
Frag_grenade_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003118  08003118  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003120  08003120  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000010  08003138  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003138  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093d5  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b0  00000000  00000000  00029450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  0002ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059e  00000000  00000000  0002b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100f1  00000000  00000000  0002bade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a11a  00000000  00000000  0003bbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000611a3  00000000  00000000  00045ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018dc  00000000  00000000  000a6e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000a8768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003094 	.word	0x08003094

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003094 	.word	0x08003094

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 facc 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f828 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8c2 	bl	800063c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f890 	bl	80005dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DFPlayer_SendCommand(DFPLAYER_CMD_RESET , 0, 0); // Reset DFPlayer Mini
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	200c      	movs	r0, #12
 80004c2:	f000 f8f1 	bl	80006a8 <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 fb2c 	bl	8000b28 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_SET_VOL, 0, 30);
 80004d0:	221e      	movs	r2, #30
 80004d2:	2100      	movs	r1, #0
 80004d4:	2006      	movs	r0, #6
 80004d6:	f000 f8e7 	bl	80006a8 <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80004da:	23fa      	movs	r3, #250	; 0xfa
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fb22 	bl	8000b28 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_PLAY_TRACK, 0x00, getRandomNumber());
 80004e4:	f000 f954 	bl	8000790 <getRandomNumber>
 80004e8:	0003      	movs	r3, r0
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f8da 	bl	80006a8 <DFPlayer_SendCommand>

  explosion = 1;
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <main+0x58>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //checkPlaybackStatus();
	  Blink_LEDs();
 80004fa:	f000 f977 	bl	80007ec <Blink_LEDs>
 80004fe:	e7fc      	b.n	80004fa <main+0x52>
 8000500:	200000b9 	.word	0x200000b9

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b099      	sub	sp, #100	; 0x64
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	242c      	movs	r4, #44	; 0x2c
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	2334      	movs	r3, #52	; 0x34
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fd91 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051a:	2318      	movs	r3, #24
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	2314      	movs	r3, #20
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fd89 	bl	800303c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052a:	003b      	movs	r3, r7
 800052c:	0018      	movs	r0, r3
 800052e:	2318      	movs	r3, #24
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f002 fd82 	bl	800303c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <SystemClock_Config+0xd4>)
 800053e:	401a      	ands	r2, r3
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemClock_Config+0xd0>)
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	0109      	lsls	r1, r1, #4
 8000546:	430a      	orrs	r2, r1
 8000548:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054a:	0021      	movs	r1, r4
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	22a0      	movs	r2, #160	; 0xa0
 8000562:	0212      	lsls	r2, r2, #8
 8000564:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fde8 	bl	8001144 <HAL_RCC_OscConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000578:	f000 f97e 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	2118      	movs	r1, #24
 800057e:	187b      	adds	r3, r7, r1
 8000580:	220f      	movs	r2, #15
 8000582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2100      	movs	r1, #0
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f94b 	bl	800183c <HAL_RCC_ClockConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005aa:	f000 f965 	bl	8000878 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ae:	003b      	movs	r3, r7
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	003b      	movs	r3, r7
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fb61 	bl	8001c84 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005c6:	f000 f957 	bl	8000878 <Error_Handler>
  }
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b019      	add	sp, #100	; 0x64
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff

080005dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <MX_USART2_UART_Init+0x5c>)
 80005e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005e8:	2296      	movs	r2, #150	; 0x96
 80005ea:	0192      	lsls	r2, r2, #6
 80005ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000602:	220c      	movs	r2, #12
 8000604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_USART2_UART_Init+0x58>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fc5b 	bl	8001edc <HAL_UART_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 f925 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000002c 	.word	0x2000002c
 8000638:	40004400 	.word	0x40004400

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 fcf6 	bl	800303c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_GPIO_Init+0x68>)
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_GPIO_Init+0x68>)
 800065e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000660:	2201      	movs	r2, #1
 8000662:	4013      	ands	r3, r2
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	2170      	movs	r1, #112	; 0x70
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fd49 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_AMBER_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2270      	movs	r2, #112	; 0x70
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2201      	movs	r2, #1
 8000680:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fbd0 	bl	8000e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b006      	add	sp, #24
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <DFPlayer_SendCommand>:

/* USER CODE BEGIN 4 */
void DFPlayer_SendCommand(uint8_t command, uint8_t param1, uint8_t param2)
	{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0004      	movs	r4, r0
 80006b0:	0008      	movs	r0, r1
 80006b2:	0011      	movs	r1, r2
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	1c22      	adds	r2, r4, #0
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	1dbb      	adds	r3, r7, #6
 80006bc:	1c02      	adds	r2, r0, #0
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1d7b      	adds	r3, r7, #5
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		uint8_t packet[10];
		uint16_t arg = (param1 << 8) | param2;
 80006c6:	1dbb      	adds	r3, r7, #6
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	1d7b      	adds	r3, r7, #5
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	2016      	movs	r0, #22
 80006da:	183b      	adds	r3, r7, r0
 80006dc:	801a      	strh	r2, [r3, #0]

		packet[0] = 0x7E;             // Start byte
 80006de:	2108      	movs	r1, #8
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	227e      	movs	r2, #126	; 0x7e
 80006e4:	701a      	strb	r2, [r3, #0]
		packet[1] = 0xFF;             // Version
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	705a      	strb	r2, [r3, #1]
		packet[2] = 0x06;             // Data length
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2206      	movs	r2, #6
 80006f0:	709a      	strb	r2, [r3, #2]
		packet[3] = command;          // Command byte
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	1dfa      	adds	r2, r7, #7
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	70da      	strb	r2, [r3, #3]
		packet[4] = 0x00;             // No feedback
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	711a      	strb	r2, [r3, #4]
		packet[5] = (arg >> 8) & 0xFF; // Parameter high byte
 8000700:	183b      	adds	r3, r7, r0
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	187b      	adds	r3, r7, r1
 800070c:	715a      	strb	r2, [r3, #5]
		packet[6] = arg & 0xFF;       // Parameter low byte
 800070e:	183b      	adds	r3, r7, r0
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	719a      	strb	r2, [r3, #6]
		uint16_t checksum = 0 - (packet[1] + packet[2] + packet[3] + packet[4] + packet[5] + packet[6]);
 8000718:	187b      	adds	r3, r7, r1
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	b29a      	uxth	r2, r3
 800071e:	187b      	adds	r3, r7, r1
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	b29b      	uxth	r3, r3
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	b29a      	uxth	r2, r3
 8000728:	187b      	adds	r3, r7, r1
 800072a:	78db      	ldrb	r3, [r3, #3]
 800072c:	b29b      	uxth	r3, r3
 800072e:	18d3      	adds	r3, r2, r3
 8000730:	b29a      	uxth	r2, r3
 8000732:	187b      	adds	r3, r7, r1
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	b29b      	uxth	r3, r3
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	b29a      	uxth	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	b29b      	uxth	r3, r3
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	187b      	adds	r3, r7, r1
 8000748:	799b      	ldrb	r3, [r3, #6]
 800074a:	b29b      	uxth	r3, r3
 800074c:	18d3      	adds	r3, r2, r3
 800074e:	b29a      	uxth	r2, r3
 8000750:	2014      	movs	r0, #20
 8000752:	183b      	adds	r3, r7, r0
 8000754:	4252      	negs	r2, r2
 8000756:	801a      	strh	r2, [r3, #0]
		packet[7] = (checksum >> 8) & 0xFF; // Checksum high byte
 8000758:	183b      	adds	r3, r7, r0
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b29b      	uxth	r3, r3
 8000760:	b2da      	uxtb	r2, r3
 8000762:	187b      	adds	r3, r7, r1
 8000764:	71da      	strb	r2, [r3, #7]
		packet[8] = checksum & 0xFF;        // Checksum low byte
 8000766:	183b      	adds	r3, r7, r0
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	187b      	adds	r3, r7, r1
 800076e:	721a      	strb	r2, [r3, #8]
		packet[9] = 0xEF;             // End byte
 8000770:	187b      	adds	r3, r7, r1
 8000772:	22ef      	movs	r2, #239	; 0xef
 8000774:	725a      	strb	r2, [r3, #9]

		// Send packet over UART
		HAL_UART_Transmit(&huart2, packet, 10, HAL_MAX_DELAY);
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	1879      	adds	r1, r7, r1
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <DFPlayer_SendCommand+0xe4>)
 800077e:	220a      	movs	r2, #10
 8000780:	f001 fc00 	bl	8001f84 <HAL_UART_Transmit>
	}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b007      	add	sp, #28
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	2000002c 	.word	0x2000002c

08000790 <getRandomNumber>:
					}
			}
	}

uint8_t getRandomNumber()
	{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    	seed = (2*HAL_GetTick() * 1103515245 + 12345) & 0x7FFFFFFF; // LCG formula
 8000794:	f000 f9be 	bl	8000b14 <HAL_GetTick>
 8000798:	0001      	movs	r1, r0
 800079a:	000a      	movs	r2, r1
 800079c:	0252      	lsls	r2, r2, #9
 800079e:	1a52      	subs	r2, r2, r1
 80007a0:	0092      	lsls	r2, r2, #2
 80007a2:	1852      	adds	r2, r2, r1
 80007a4:	0253      	lsls	r3, r2, #9
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	185b      	adds	r3, r3, r1
 80007ac:	015a      	lsls	r2, r3, #5
 80007ae:	189b      	adds	r3, r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	1a5b      	subs	r3, r3, r1
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	185b      	adds	r3, r3, r1
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <getRandomNumber+0x54>)
 80007bc:	4694      	mov	ip, r2
 80007be:	4463      	add	r3, ip
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	085a      	lsrs	r2, r3, #1
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <getRandomNumber+0x58>)
 80007c6:	601a      	str	r2, [r3, #0]
    	return (uint8_t)((seed % 3) + 1); // Random number between 1 and 3
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <getRandomNumber+0x58>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2103      	movs	r1, #3
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fd20 	bl	8000214 <__aeabi_uidivmod>
 80007d4:	000b      	movs	r3, r1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b2db      	uxtb	r3, r3
	}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	00003039 	.word	0x00003039
 80007e8:	20000000 	.word	0x20000000

080007ec <Blink_LEDs>:

void Blink_LEDs(void)
	{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
		if (explosion == 1)
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <Blink_LEDs+0x80>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d133      	bne.n	8000862 <Blink_LEDs+0x76>
			{
				uint32_t current_time = HAL_GetTick(); // Get the current system time in milliseconds
 80007fa:	f000 f98b 	bl	8000b14 <HAL_GetTick>
 80007fe:	0003      	movs	r3, r0
 8000800:	607b      	str	r3, [r7, #4]
				if ((current_time - last_blink_time) >= BLINK_INTERVAL)
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <Blink_LEDs+0x84>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	2b31      	cmp	r3, #49	; 0x31
 800080c:	d929      	bls.n	8000862 <Blink_LEDs+0x76>
					{
						last_blink_time = current_time; // Update the last toggle time
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <Blink_LEDs+0x84>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
						if (led_state == 0)
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <Blink_LEDs+0x88>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d111      	bne.n	8000840 <Blink_LEDs+0x54>
							{
								HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_SET);    // Turn ON PA0 (LED 1)
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fc6f 	bl	8001108 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);  // Turn OFF PA1 (LED 2)
 800082a:	23a0      	movs	r3, #160	; 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fc68 	bl	8001108 <HAL_GPIO_WritePin>
								led_state = 1; // Update state
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <Blink_LEDs+0x88>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);    // Turn ON PA1 (LED 2)
								led_state = 0; // Update state
							}
					}
			}
	}
 800083e:	e010      	b.n	8000862 <Blink_LEDs+0x76>
								HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_RESET);  // Turn OFF PA0 (LED 1)
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2200      	movs	r2, #0
 8000846:	2120      	movs	r1, #32
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fc5d 	bl	8001108 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);    // Turn ON PA1 (LED 2)
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2201      	movs	r2, #1
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fc56 	bl	8001108 <HAL_GPIO_WritePin>
								led_state = 0; // Update state
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <Blink_LEDs+0x88>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
	}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200000b9 	.word	0x200000b9
 8000870:	200000b4 	.word	0x200000b4
 8000874:	200000b8 	.word	0x200000b8

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <HAL_MspInit+0x24>)
 800088a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x24>)
 800088e:	2101      	movs	r1, #1
 8000890:	430a      	orrs	r2, r1
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <HAL_MspInit+0x24>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_MspInit+0x24>)
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0549      	lsls	r1, r1, #21
 800089e:	430a      	orrs	r2, r1
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	240c      	movs	r4, #12
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f002 fbbc 	bl	800303c <memset>
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a27      	ldr	r2, [pc, #156]	; (8000968 <HAL_UART_MspInit+0xbc>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d148      	bne.n	8000960 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0289      	lsls	r1, r1, #10
 80008d8:	430a      	orrs	r2, r1
 80008da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_UART_MspInit+0xc0>)
 80008ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ec:	2201      	movs	r2, #1
 80008ee:	4013      	ands	r3, r2
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA9     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2203      	movs	r2, #3
 800090a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	193a      	adds	r2, r7, r4
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fa8e 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000920:	0021      	movs	r1, r4
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2203      	movs	r2, #3
 800093a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2204      	movs	r2, #4
 8000940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fa76 	bl	8000e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	201c      	movs	r0, #28
 8000956:	f000 f9b7 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095a:	201c      	movs	r0, #28
 800095c:	f000 f9c9 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b009      	add	sp, #36	; 0x24
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f8ac 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <USART2_IRQHandler+0x14>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 fb8c 	bl	80020c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000002c 	.word	0x2000002c

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c8:	f7ff fff6 	bl	80009b8 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <LoopForever+0x6>)
    LDR R1, [R0]
 80009ce:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009d0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <LoopForever+0xa>)
    CMP R1, R2
 80009d4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009d6:	d105      	bne.n	80009e4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009da:	4912      	ldr	r1, [pc, #72]	; (8000a24 <LoopForever+0x12>)
    STR R1, [R0]
 80009dc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009e0:	4912      	ldr	r1, [pc, #72]	; (8000a2c <LoopForever+0x1a>)
    STR R1, [R0]
 80009e2:	6001      	str	r1, [r0, #0]

080009e4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	4812      	ldr	r0, [pc, #72]	; (8000a30 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <LoopForever+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009fc:	4c10      	ldr	r4, [pc, #64]	; (8000a40 <LoopForever+0x2e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fb1f 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fd4b 	bl	80004a8 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
   ldr   r0, =_estack
 8000a14:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000a18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000a20:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000a24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a2c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a38:	08003128 	.word	0x08003128
  ldr r2, =_sbss
 8000a3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a40:	200000c0 	.word	0x200000c0

08000a44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_COMP_IRQHandler>
	...

08000a48 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_Init+0x3c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_Init+0x3c>)
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f811 	bl	8000a88 <HAL_InitTick>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e001      	b.n	8000a76 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a72:	f7ff ff07 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_InitTick+0x60>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	0019      	movs	r1, r3
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	0098      	lsls	r0, r3, #2
 8000a9e:	f7ff fb33 	bl	8000108 <__udivsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0020      	movs	r0, r4
 8000aa8:	f7ff fb2e 	bl	8000108 <__udivsi3>
 8000aac:	0003      	movs	r3, r0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f92f 	bl	8000d12 <HAL_SYSTICK_Config>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e00f      	b.n	8000adc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d80b      	bhi.n	8000ada <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f8fc 	bl	8000cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_InitTick+0x64>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	2000000c 	.word	0x2000000c
 8000aec:	20000008 	.word	0x20000008

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	2000000c 	.word	0x2000000c
 8000b10:	200000bc 	.word	0x200000bc

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200000bc 	.word	0x200000bc

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	0003      	movs	r3, r0
 8000b36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	001a      	movs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b004      	add	sp, #16
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b7f      	cmp	r3, #127	; 0x7f
 8000b82:	d809      	bhi.n	8000b98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	231f      	movs	r3, #31
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_EnableIRQ+0x30>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d828      	bhi.n	8000c0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	33c0      	adds	r3, #192	; 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	589b      	ldr	r3, [r3, r2]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	33c0      	adds	r3, #192	; 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c0a:	e031      	b.n	8000c70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0019      	movs	r1, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	400b      	ands	r3, r1
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	3304      	adds	r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	400a      	ands	r2, r1
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	21ff      	movs	r1, #255	; 0xff
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	401a      	ands	r2, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	4003      	ands	r3, r0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	4023      	ands	r3, r4
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	3306      	adds	r3, #6
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	18c3      	adds	r3, r0, r3
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	045b      	lsls	r3, r3, #17
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d301      	bcc.n	8000c98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c94:	2301      	movs	r3, #1
 8000c96:	e010      	b.n	8000cba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SysTick_Config+0x44>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff7c 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x44>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	1c02      	adds	r2, r0, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff33 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffaf 	bl	8000c80 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2225      	movs	r2, #37	; 0x25
 8000d40:	5c9b      	ldrb	r3, [r3, r2]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d008      	beq.n	8000d5a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2224      	movs	r2, #36	; 0x24
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e024      	b.n	8000da4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	210e      	movs	r1, #14
 8000d66:	438a      	bics	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	438a      	bics	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	221c      	movs	r2, #28
 8000d80:	401a      	ands	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2101      	movs	r1, #1
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2225      	movs	r2, #37	; 0x25
 8000d92:	2101      	movs	r1, #1
 8000d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2224      	movs	r2, #36	; 0x24
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	5499      	strb	r1, [r3, r2]

    return status;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b004      	add	sp, #16
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	210f      	movs	r1, #15
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2225      	movs	r2, #37	; 0x25
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d006      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2204      	movs	r2, #4
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
 8000dd4:	e02a      	b.n	8000e2c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	210e      	movs	r1, #14
 8000de2:	438a      	bics	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	438a      	bics	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	221c      	movs	r2, #28
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2101      	movs	r1, #1
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2225      	movs	r2, #37	; 0x25
 8000e0e:	2101      	movs	r1, #1
 8000e10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2224      	movs	r2, #36	; 0x24
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	0010      	movs	r0, r2
 8000e2a:	4798      	blx	r3
    }
  }
  return status;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	781b      	ldrb	r3, [r3, #0]
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e52:	e143      	b.n	80010dc <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4091      	lsls	r1, r2
 8000e5e:	000a      	movs	r2, r1
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d100      	bne.n	8000e6c <HAL_GPIO_Init+0x30>
 8000e6a:	e134      	b.n	80010d6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2203      	movs	r2, #3
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d005      	beq.n	8000e84 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d130      	bne.n	8000ee6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	2203      	movs	r2, #3
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0013      	movs	r3, r2
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2203      	movs	r2, #3
 8000eec:	4013      	ands	r3, r2
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d017      	beq.n	8000f22 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d123      	bne.n	8000f76 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	58d3      	ldr	r3, [r2, r3]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2207      	movs	r2, #7
 8000f40:	4013      	ands	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2107      	movs	r1, #7
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	0013      	movs	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	6939      	ldr	r1, [r7, #16]
 8000f74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	401a      	ands	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	23c0      	movs	r3, #192	; 0xc0
 8000fb0:	029b      	lsls	r3, r3, #10
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d100      	bne.n	8000fb8 <HAL_GPIO_Init+0x17c>
 8000fb6:	e08e      	b.n	80010d6 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <HAL_GPIO_Init+0x2bc>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	589b      	ldr	r3, [r3, r2]
 8000fd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	23a0      	movs	r3, #160	; 0xa0
 8000fec:	05db      	lsls	r3, r3, #23
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1d2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a41      	ldr	r2, [pc, #260]	; (80010fc <HAL_GPIO_Init+0x2c0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1ce>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a40      	ldr	r2, [pc, #256]	; (8001100 <HAL_GPIO_Init+0x2c4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1ca>
 8001002:	2302      	movs	r3, #2
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x1d4>
 8001006:	2306      	movs	r3, #6
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x1d4>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x1d4>
 800100e:	2300      	movs	r3, #0
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	2103      	movs	r1, #3
 8001014:	400a      	ands	r2, r1
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	; (80010f8 <HAL_GPIO_Init+0x2bc>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	035b      	lsls	r3, r3, #13
 8001046:	4013      	ands	r3, r2
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	039b      	lsls	r3, r3, #14
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43da      	mvns	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	025b      	lsls	r3, r3, #9
 80010c4:	4013      	ands	r3, r2
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_GPIO_Init+0x2c8>)
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	40da      	lsrs	r2, r3
 80010e4:	1e13      	subs	r3, r2, #0
 80010e6:	d000      	beq.n	80010ea <HAL_GPIO_Init+0x2ae>
 80010e8:	e6b4      	b.n	8000e54 <HAL_GPIO_Init+0x18>
  }
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b006      	add	sp, #24
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	50000400 	.word	0x50000400
 8001100:	50000800 	.word	0x50000800
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	0008      	movs	r0, r1
 8001112:	0011      	movs	r1, r2
 8001114:	1cbb      	adds	r3, r7, #2
 8001116:	1c02      	adds	r2, r0, #0
 8001118:	801a      	strh	r2, [r3, #0]
 800111a:	1c7b      	adds	r3, r7, #1
 800111c:	1c0a      	adds	r2, r1, #0
 800111e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	1c7b      	adds	r3, r7, #1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001128:	1cbb      	adds	r3, r7, #2
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	f000 fb6c 	bl	8001830 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001158:	4bc8      	ldr	r3, [pc, #800]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	220c      	movs	r2, #12
 800115e:	4013      	ands	r3, r2
 8001160:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001162:	4bc6      	ldr	r3, [pc, #792]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2201      	movs	r2, #1
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x36>
 8001178:	e07d      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d007      	beq.n	8001190 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0c      	cmp	r3, #12
 8001184:	d112      	bne.n	80011ac <HAL_RCC_OscConfig+0x68>
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	025b      	lsls	r3, r3, #9
 800118c:	429a      	cmp	r2, r3
 800118e:	d10d      	bne.n	80011ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	4bba      	ldr	r3, [pc, #744]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	4013      	ands	r3, r2
 800119a:	d100      	bne.n	800119e <HAL_RCC_OscConfig+0x5a>
 800119c:	e06a      	b.n	8001274 <HAL_RCC_OscConfig+0x130>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d166      	bne.n	8001274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f000 fb42 	bl	8001830 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	025b      	lsls	r3, r3, #9
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_OscConfig+0x84>
 80011b8:	4bb0      	ldr	r3, [pc, #704]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4baf      	ldr	r3, [pc, #700]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	0249      	lsls	r1, r1, #9
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e027      	b.n	8001218 <HAL_RCC_OscConfig+0xd4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	02db      	lsls	r3, r3, #11
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d10e      	bne.n	80011f2 <HAL_RCC_OscConfig+0xae>
 80011d4:	4ba9      	ldr	r3, [pc, #676]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4ba8      	ldr	r3, [pc, #672]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	02c9      	lsls	r1, r1, #11
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	4ba6      	ldr	r3, [pc, #664]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba5      	ldr	r3, [pc, #660]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0249      	lsls	r1, r1, #9
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e012      	b.n	8001218 <HAL_RCC_OscConfig+0xd4>
 80011f2:	4ba2      	ldr	r3, [pc, #648]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4ba1      	ldr	r3, [pc, #644]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80011f8:	49a1      	ldr	r1, [pc, #644]	; (8001480 <HAL_RCC_OscConfig+0x33c>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4b9f      	ldr	r3, [pc, #636]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	4013      	ands	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4b9b      	ldr	r3, [pc, #620]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b9a      	ldr	r3, [pc, #616]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001212:	499c      	ldr	r1, [pc, #624]	; (8001484 <HAL_RCC_OscConfig+0x340>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fc78 	bl	8000b14 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff fc73 	bl	8000b14 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e2f9      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123c:	4b8f      	ldr	r3, [pc, #572]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0xe6>
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fc63 	bl	8000b14 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc5e 	bl	8000b14 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e2e4      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001266:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x13e>
 8001280:	e099      	b.n	80013b6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	2220      	movs	r2, #32
 800128c:	4013      	ands	r3, r2
 800128e:	d009      	beq.n	80012a4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001290:	4b7a      	ldr	r3, [pc, #488]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b79      	ldr	r3, [pc, #484]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001296:	2120      	movs	r1, #32
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	2220      	movs	r2, #32
 80012a0:	4393      	bics	r3, r2
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	2b0c      	cmp	r3, #12
 80012ae:	d13e      	bne.n	800132e <HAL_RCC_OscConfig+0x1ea>
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d13b      	bne.n	800132e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2204      	movs	r2, #4
 80012bc:	4013      	ands	r3, r2
 80012be:	d004      	beq.n	80012ca <HAL_RCC_OscConfig+0x186>
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e2b2      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a6e      	ldr	r2, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x344>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	021a      	lsls	r2, r3, #8
 80012da:	4b68      	ldr	r3, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2209      	movs	r2, #9
 80012e6:	4393      	bics	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012f2:	f000 fbeb 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 80012f6:	0001      	movs	r1, r0
 80012f8:	4b60      	ldr	r3, [pc, #384]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	220f      	movs	r2, #15
 8001300:	4013      	ands	r3, r2
 8001302:	4a62      	ldr	r2, [pc, #392]	; (800148c <HAL_RCC_OscConfig+0x348>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	000a      	movs	r2, r1
 8001308:	40da      	lsrs	r2, r3
 800130a:	4b61      	ldr	r3, [pc, #388]	; (8001490 <HAL_RCC_OscConfig+0x34c>)
 800130c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800130e:	4b61      	ldr	r3, [pc, #388]	; (8001494 <HAL_RCC_OscConfig+0x350>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2513      	movs	r5, #19
 8001314:	197c      	adds	r4, r7, r5
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff fbb6 	bl	8000a88 <HAL_InitTick>
 800131c:	0003      	movs	r3, r0
 800131e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001320:	197b      	adds	r3, r7, r5
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d046      	beq.n	80013b6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001328:	197b      	adds	r3, r7, r5
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	e280      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	2b00      	cmp	r3, #0
 8001332:	d027      	beq.n	8001384 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001334:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2209      	movs	r2, #9
 800133a:	4393      	bics	r3, r2
 800133c:	0019      	movs	r1, r3
 800133e:	4b4f      	ldr	r3, [pc, #316]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001342:	430a      	orrs	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fbe5 	bl	8000b14 <HAL_GetTick>
 800134a:	0003      	movs	r3, r0
 800134c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fbe0 	bl	8000b14 <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e266      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2204      	movs	r2, #4
 8001368:	4013      	ands	r3, r2
 800136a:	d0f1      	beq.n	8001350 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a45      	ldr	r2, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x344>)
 8001372:	4013      	ands	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	021a      	lsls	r2, r3, #8
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	e018      	b.n	80013b6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b3c      	ldr	r3, [pc, #240]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800138a:	2101      	movs	r1, #1
 800138c:	438a      	bics	r2, r1
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fbc0 	bl	8000b14 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fbbb 	bl	8000b14 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e241      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	4013      	ands	r3, r2
 80013b4:	d1f1      	bne.n	800139a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2210      	movs	r2, #16
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x27e>
 80013c0:	e0a1      	b.n	8001506 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d140      	bne.n	800144a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_OscConfig+0x29c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e227      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_RCC_OscConfig+0x354>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_RCC_OscConfig+0x338>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	0a19      	lsrs	r1, r3, #8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	061a      	lsls	r2, r3, #24
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	0b5b      	lsrs	r3, r3, #13
 800140e:	3301      	adds	r3, #1
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	0212      	lsls	r2, r2, #8
 8001414:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	210f      	movs	r1, #15
 800141e:	400b      	ands	r3, r1
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x348>)
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_RCC_OscConfig+0x34c>)
 8001428:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_RCC_OscConfig+0x350>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2513      	movs	r5, #19
 8001430:	197c      	adds	r4, r7, r5
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff fb28 	bl	8000a88 <HAL_InitTick>
 8001438:	0003      	movs	r3, r0
 800143a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800143c:	197b      	adds	r3, r7, r5
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d060      	beq.n	8001506 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001444:	197b      	adds	r3, r7, r5
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	e1f2      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03f      	beq.n	80014d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0049      	lsls	r1, r1, #1
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb58 	bl	8000b14 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001468:	e018      	b.n	800149c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146a:	f7ff fb53 	bl	8000b14 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d911      	bls.n	800149c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1d9      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
 800147c:	40021000 	.word	0x40021000
 8001480:	fffeffff 	.word	0xfffeffff
 8001484:	fffbffff 	.word	0xfffbffff
 8001488:	ffffe0ff 	.word	0xffffe0ff
 800148c:	080030ac 	.word	0x080030ac
 8001490:	20000004 	.word	0x20000004
 8001494:	20000008 	.word	0x20000008
 8001498:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800149c:	4bc9      	ldr	r3, [pc, #804]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0e0      	beq.n	800146a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a8:	4bc6      	ldr	r3, [pc, #792]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4ac6      	ldr	r2, [pc, #792]	; (80017c8 <HAL_RCC_OscConfig+0x684>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	4bc3      	ldr	r3, [pc, #780]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014b8:	430a      	orrs	r2, r1
 80014ba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014bc:	4bc1      	ldr	r3, [pc, #772]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	0a19      	lsrs	r1, r3, #8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	061a      	lsls	r2, r3, #24
 80014ca:	4bbe      	ldr	r3, [pc, #760]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	e019      	b.n	8001506 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014d2:	4bbc      	ldr	r3, [pc, #752]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4bbb      	ldr	r3, [pc, #748]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014d8:	49bc      	ldr	r1, [pc, #752]	; (80017cc <HAL_RCC_OscConfig+0x688>)
 80014da:	400a      	ands	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fb19 	bl	8000b14 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb14 	bl	8000b14 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e19a      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014fa:	4bb2      	ldr	r3, [pc, #712]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2208      	movs	r2, #8
 800150c:	4013      	ands	r3, r2
 800150e:	d036      	beq.n	800157e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d019      	beq.n	800154c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001518:	4baa      	ldr	r3, [pc, #680]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800151a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800151c:	4ba9      	ldr	r3, [pc, #676]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff faf6 	bl	8000b14 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff faf1 	bl	8000b14 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e177      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001540:	4ba0      	ldr	r3, [pc, #640]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001544:	2202      	movs	r2, #2
 8001546:	4013      	ands	r3, r2
 8001548:	d0f1      	beq.n	800152e <HAL_RCC_OscConfig+0x3ea>
 800154a:	e018      	b.n	800157e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800154c:	4b9d      	ldr	r3, [pc, #628]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800154e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001550:	4b9c      	ldr	r3, [pc, #624]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001552:	2101      	movs	r1, #1
 8001554:	438a      	bics	r2, r1
 8001556:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fadc 	bl	8000b14 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fad7 	bl	8000b14 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e15d      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001574:	4b93      	ldr	r3, [pc, #588]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001578:	2202      	movs	r2, #2
 800157a:	4013      	ands	r3, r2
 800157c:	d1f1      	bne.n	8001562 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x446>
 8001588:	e0ae      	b.n	80016e8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158a:	2023      	movs	r0, #35	; 0x23
 800158c:	183b      	adds	r3, r7, r0
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b8c      	ldr	r3, [pc, #560]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	055b      	lsls	r3, r3, #21
 800159a:	4013      	ands	r3, r2
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b89      	ldr	r3, [pc, #548]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80015a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0549      	lsls	r1, r1, #21
 80015a8:	430a      	orrs	r2, r1
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <HAL_RCC_OscConfig+0x68c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x68c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <HAL_RCC_OscConfig+0x68c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff faa2 	bl	8000b14 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fa9d 	bl	8000b14 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e123      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <HAL_RCC_OscConfig+0x68c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x4cc>
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	651a      	str	r2, [r3, #80]	; 0x50
 800160e:	e031      	b.n	8001674 <HAL_RCC_OscConfig+0x530>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x4ee>
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800161a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800161e:	496b      	ldr	r1, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x688>)
 8001620:	400a      	ands	r2, r1
 8001622:	651a      	str	r2, [r3, #80]	; 0x50
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800162a:	496a      	ldr	r1, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x690>)
 800162c:	400a      	ands	r2, r1
 800162e:	651a      	str	r2, [r3, #80]	; 0x50
 8001630:	e020      	b.n	8001674 <HAL_RCC_OscConfig+0x530>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	429a      	cmp	r2, r3
 800163c:	d10e      	bne.n	800165c <HAL_RCC_OscConfig+0x518>
 800163e:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001642:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	00c9      	lsls	r1, r1, #3
 8001648:	430a      	orrs	r2, r1
 800164a:	651a      	str	r2, [r3, #80]	; 0x50
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800164e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0049      	lsls	r1, r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	651a      	str	r2, [r3, #80]	; 0x50
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x530>
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	4b58      	ldr	r3, [pc, #352]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001662:	495a      	ldr	r1, [pc, #360]	; (80017cc <HAL_RCC_OscConfig+0x688>)
 8001664:	400a      	ands	r2, r1
 8001666:	651a      	str	r2, [r3, #80]	; 0x50
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800166a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166c:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800166e:	4959      	ldr	r1, [pc, #356]	; (80017d4 <HAL_RCC_OscConfig+0x690>)
 8001670:	400a      	ands	r2, r1
 8001672:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d015      	beq.n	80016a8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fa4a 	bl	8000b14 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001684:	e009      	b.n	800169a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fa45 	bl	8000b14 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_RCC_OscConfig+0x694>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e0ca      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800169c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0ef      	beq.n	8001686 <HAL_RCC_OscConfig+0x542>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa34 	bl	8000b14 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016b0:	e009      	b.n	80016c6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa2f 	bl	8000b14 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	4a46      	ldr	r2, [pc, #280]	; (80017d8 <HAL_RCC_OscConfig+0x694>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0b4      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	2323      	movs	r3, #35	; 0x23
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80016de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80016e2:	493e      	ldr	r1, [pc, #248]	; (80017dc <HAL_RCC_OscConfig+0x698>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5ae>
 80016f0:	e09d      	b.n	800182e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d100      	bne.n	80016fa <HAL_RCC_OscConfig+0x5b6>
 80016f8:	e076      	b.n	80017e8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d145      	bne.n	800178e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001708:	4935      	ldr	r1, [pc, #212]	; (80017e0 <HAL_RCC_OscConfig+0x69c>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fa01 	bl	8000b14 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f9fc 	bl	8000b14 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e082      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_RCC_OscConfig+0x6a0>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	431a      	orrs	r2, r3
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001752:	430a      	orrs	r2, r1
 8001754:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0449      	lsls	r1, r1, #17
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff f9d6 	bl	8000b14 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff f9d1 	bl	8000b14 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e057      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	049b      	lsls	r3, r3, #18
 8001788:	4013      	ands	r3, r2
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x62a>
 800178c:	e04f      	b.n	800182e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <HAL_RCC_OscConfig+0x69c>)
 8001796:	400a      	ands	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f9bb 	bl	8000b14 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f9b6 	bl	8000b14 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e03c      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017b6:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_OscConfig+0x680>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	049b      	lsls	r3, r3, #18
 80017be:	4013      	ands	r3, r2
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x660>
 80017c2:	e034      	b.n	800182e <HAL_RCC_OscConfig+0x6ea>
 80017c4:	40021000 	.word	0x40021000
 80017c8:	ffff1fff 	.word	0xffff1fff
 80017cc:	fffffeff 	.word	0xfffffeff
 80017d0:	40007000 	.word	0x40007000
 80017d4:	fffffbff 	.word	0xfffffbff
 80017d8:	00001388 	.word	0x00001388
 80017dc:	efffffff 	.word	0xefffffff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_OscConfig+0x6f4>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	429a      	cmp	r2, r3
 8001808:	d10f      	bne.n	800182a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	23f0      	movs	r3, #240	; 0xf0
 800180e:	039b      	lsls	r3, r3, #14
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d107      	bne.n	800182a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	23c0      	movs	r3, #192	; 0xc0
 800181e:	041b      	lsls	r3, r3, #16
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b00a      	add	sp, #40	; 0x28
 8001836:	bdb0      	pop	{r4, r5, r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e128      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b96      	ldr	r3, [pc, #600]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d91e      	bls.n	800189c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b93      	ldr	r3, [pc, #588]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4393      	bics	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	4b90      	ldr	r3, [pc, #576]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001870:	f7ff f950 	bl	8000b14 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001878:	e009      	b.n	800188e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187a:	f7ff f94b 	bl	8000b14 <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	4a8a      	ldr	r2, [pc, #552]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e109      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b87      	ldr	r3, [pc, #540]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a6:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	22f0      	movs	r2, #240	; 0xf0
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x8a>
 80018c4:	e089      	b.n	80019da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ce:	4b79      	ldr	r3, [pc, #484]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	029b      	lsls	r3, r3, #10
 80018d6:	4013      	ands	r3, r2
 80018d8:	d120      	bne.n	800191c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0e1      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	049b      	lsls	r3, r3, #18
 80018ee:	4013      	ands	r3, r2
 80018f0:	d114      	bne.n	800191c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0d5      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d106      	bne.n	800190c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018fe:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d109      	bne.n	800191c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0ca      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800190c:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0c2      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2203      	movs	r2, #3
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff f8f0 	bl	8000b14 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d111      	bne.n	8001964 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001940:	e009      	b.n	8001956 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f8e7 	bl	8000b14 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0a5      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	220c      	movs	r2, #12
 800195c:	4013      	ands	r3, r2
 800195e:	2b08      	cmp	r3, #8
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_ClockConfig+0x106>
 8001962:	e03a      	b.n	80019da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d111      	bne.n	8001990 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196c:	e009      	b.n	8001982 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f7ff f8d1 	bl	8000b14 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e08f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001982:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	220c      	movs	r2, #12
 8001988:	4013      	ands	r3, r2
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d1ef      	bne.n	800196e <HAL_RCC_ClockConfig+0x132>
 800198e:	e024      	b.n	80019da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d11b      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001998:	e009      	b.n	80019ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199a:	f7ff f8bb 	bl	8000b14 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e079      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	220c      	movs	r2, #12
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_ClockConfig+0x15e>
 80019ba:	e00e      	b.n	80019da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f8aa 	bl	8000b14 <HAL_GetTick>
 80019c0:	0002      	movs	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e068      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	220c      	movs	r2, #12
 80019d6:	4013      	ands	r3, r2
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d21e      	bcs.n	8001a26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019fa:	f7ff f88b 	bl	8000b14 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	e009      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f886 	bl	8000b14 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <HAL_RCC_ClockConfig+0x274>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e044      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_ClockConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d1ee      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d009      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_RCC_ClockConfig+0x27c>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d00a      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <HAL_RCC_ClockConfig+0x280>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	00da      	lsls	r2, r3, #3
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a64:	f000 f832 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a68:	0001      	movs	r1, r0
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	220f      	movs	r2, #15
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x284>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	000a      	movs	r2, r1
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_RCC_ClockConfig+0x288>)
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_RCC_ClockConfig+0x28c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	250b      	movs	r5, #11
 8001a86:	197c      	adds	r4, r7, r5
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7fe fffd 	bl	8000a88 <HAL_InitTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a9a:	197b      	adds	r3, r7, r5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	fffff8ff 	.word	0xfffff8ff
 8001abc:	ffffc7ff 	.word	0xffffc7ff
 8001ac0:	080030ac 	.word	0x080030ac
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	20000008 	.word	0x20000008

08001acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b08e      	sub	sp, #56	; 0x38
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ada:	230c      	movs	r3, #12
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d014      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ae2:	d900      	bls.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ae4:	e07b      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x112>
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x24>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aee:	e076      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001af0:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001afe:	e07c      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b04:	e079      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b0a:	e076      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	0c9a      	lsrs	r2, r3, #18
 8001b10:	230f      	movs	r3, #15
 8001b12:	401a      	ands	r2, r3
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b16:	5c9b      	ldrb	r3, [r3, r2]
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	0d9a      	lsrs	r2, r3, #22
 8001b1e:	2303      	movs	r3, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	3301      	adds	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d01a      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	69b8      	ldr	r0, [r7, #24]
 8001b40:	69f9      	ldr	r1, [r7, #28]
 8001b42:	f7fe fb8d 	bl	8000260 <__aeabi_lmul>
 8001b46:	0002      	movs	r2, r0
 8001b48:	000b      	movs	r3, r1
 8001b4a:	0010      	movs	r0, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f7fe fb61 	bl	8000220 <__aeabi_uldivmod>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	000b      	movs	r3, r1
 8001b62:	0013      	movs	r3, r2
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
 8001b66:	e037      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d01a      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	68b8      	ldr	r0, [r7, #8]
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	f7fe fb6d 	bl	8000260 <__aeabi_lmul>
 8001b86:	0002      	movs	r2, r0
 8001b88:	000b      	movs	r3, r1
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f7fe fb41 	bl	8000220 <__aeabi_uldivmod>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	000b      	movs	r3, r1
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba6:	e017      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001baa:	0018      	movs	r0, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x140>)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f7fe fb54 	bl	8000260 <__aeabi_lmul>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	000b      	movs	r3, r1
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	001c      	movs	r4, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	001d      	movs	r5, r3
 8001bc8:	0022      	movs	r2, r4
 8001bca:	002b      	movs	r3, r5
 8001bcc:	f7fe fb28 	bl	8000220 <__aeabi_uldivmod>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	000b      	movs	r3, r1
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bdc:	e00d      	b.n	8001bfa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0b5b      	lsrs	r3, r3, #13
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	3301      	adds	r3, #1
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	0212      	lsls	r2, r2, #8
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b00e      	add	sp, #56	; 0x38
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	003d0900 	.word	0x003d0900
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200
 8001c14:	080030c4 	.word	0x080030c4

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff2 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c34:	0001      	movs	r1, r0
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4013      	ands	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	000b      	movs	r3, r1
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	080030bc 	.word	0x080030bc

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffdc 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c60:	0001      	movs	r1, r0
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	0adb      	lsrs	r3, r3, #11
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	40d9      	lsrs	r1, r3
 8001c72:	000b      	movs	r3, r1
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	080030bc 	.word	0x080030bc

08001c84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2017      	movs	r0, #23
 8001c8e:	183b      	adds	r3, r7, r0
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001c9e:	e0c7      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca0:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	055b      	lsls	r3, r3, #21
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d109      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb0:	4b80      	ldr	r3, [pc, #512]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	0549      	lsls	r1, r1, #21
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d11a      	bne.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ccc:	4b7a      	ldr	r3, [pc, #488]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b79      	ldr	r3, [pc, #484]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0049      	lsls	r1, r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7fe ff1b 	bl	8000b14 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7fe ff16 	bl	8000b14 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0d9      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	039b      	lsls	r3, r3, #14
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	; 0xc0
 8001d14:	039b      	lsls	r3, r3, #14
 8001d16:	4013      	ands	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d013      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	401a      	ands	r2, r3
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	029b      	lsls	r3, r3, #10
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d10a      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d30:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	401a      	ands	r2, r3
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d101      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0b1      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03b      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d033      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d02e      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d72:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	4a51      	ldr	r2, [pc, #324]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d80:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0309      	lsls	r1, r1, #12
 8001d86:	430a      	orrs	r2, r1
 8001d88:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d90:	494b      	ldr	r1, [pc, #300]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	d014      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe feb5 	bl	8000b14 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dae:	e009      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe feb0 	bl	8000b14 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e072      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	401a      	ands	r2, r3
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	0019      	movs	r1, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	039b      	lsls	r3, r3, #14
 8001dfe:	401a      	ands	r2, r3
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	029b      	lsls	r3, r3, #10
 8001e12:	401a      	ands	r2, r3
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e1a:	2317      	movs	r3, #23
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	220c      	movs	r2, #12
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2208      	movs	r2, #8
 8001e72:	4013      	ands	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e86:	430a      	orrs	r2, r1
 8001e88:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4013      	ands	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	fffcffff 	.word	0xfffcffff
 8001ec0:	fff7ffff 	.word	0xfff7ffff
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	ffcfffff 	.word	0xffcfffff
 8001ecc:	efffffff 	.word	0xefffffff
 8001ed0:	fffff3ff 	.word	0xfffff3ff
 8001ed4:	ffffcfff 	.word	0xffffcfff
 8001ed8:	fff3ffff 	.word	0xfff3ffff

08001edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e044      	b.n	8001f78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2278      	movs	r2, #120	; 0x78
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe fcd3 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2224      	movs	r2, #36	; 0x24
 8001f0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 fbce 	bl	80026c0 <UART_SetConfig>
 8001f24:	0003      	movs	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e024      	b.n	8001f78 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 fe0b 	bl	8002b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	490d      	ldr	r1, [pc, #52]	; (8001f80 <HAL_UART_Init+0xa4>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	212a      	movs	r1, #42	; 0x2a
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fea3 	bl	8002cbc <UART_CheckIdleState>
 8001f76:	0003      	movs	r3, r0
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b002      	add	sp, #8
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	ffffb7ff 	.word	0xffffb7ff

08001f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	1dbb      	adds	r3, r7, #6
 8001f92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d000      	beq.n	8001f9e <HAL_UART_Transmit+0x1a>
 8001f9c:	e08c      	b.n	80020b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_UART_Transmit+0x28>
 8001fa4:	1dbb      	adds	r3, r7, #6
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e084      	b.n	80020ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d109      	bne.n	8001fd0 <HAL_UART_Transmit+0x4c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e074      	b.n	80020ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2284      	movs	r2, #132	; 0x84
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2221      	movs	r2, #33	; 0x21
 8001fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fde:	f7fe fd99 	bl	8000b14 <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1dba      	adds	r2, r7, #6
 8001fea:	2150      	movs	r1, #80	; 0x50
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1dba      	adds	r2, r7, #6
 8001ff4:	2152      	movs	r1, #82	; 0x52
 8001ff6:	8812      	ldrh	r2, [r2, #0]
 8001ff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	429a      	cmp	r2, r3
 8002004:	d108      	bne.n	8002018 <HAL_UART_Transmit+0x94>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e003      	b.n	8002020 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002020:	e02f      	b.n	8002082 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	0013      	movs	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	f000 feec 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d004      	beq.n	8002042 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e03b      	b.n	80020ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	001a      	movs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	05d2      	lsls	r2, r2, #23
 8002054:	0dd2      	lsrs	r2, r2, #23
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	3302      	adds	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	e007      	b.n	8002070 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2252      	movs	r2, #82	; 0x52
 8002074:	5a9b      	ldrh	r3, [r3, r2]
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b299      	uxth	r1, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2252      	movs	r2, #82	; 0x52
 8002080:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2252      	movs	r2, #82	; 0x52
 8002086:	5a9b      	ldrh	r3, [r3, r2]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1c9      	bne.n	8002022 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	0013      	movs	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	f000 feb6 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d004      	beq.n	80020ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e005      	b.n	80020ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2220      	movs	r2, #32
 80020b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
  }
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b008      	add	sp, #32
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b0ab      	sub	sp, #172	; 0xac
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	22a4      	movs	r2, #164	; 0xa4
 80020d4:	18b9      	adds	r1, r7, r2
 80020d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	20a0      	movs	r0, #160	; 0xa0
 80020e0:	1839      	adds	r1, r7, r0
 80020e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	219c      	movs	r1, #156	; 0x9c
 80020ec:	1879      	adds	r1, r7, r1
 80020ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80020f0:	0011      	movs	r1, r2
 80020f2:	18bb      	adds	r3, r7, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a99      	ldr	r2, [pc, #612]	; (800235c <HAL_UART_IRQHandler+0x298>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	2298      	movs	r2, #152	; 0x98
 80020fc:	18bc      	adds	r4, r7, r2
 80020fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002100:	18bb      	adds	r3, r7, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d114      	bne.n	8002132 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002108:	187b      	adds	r3, r7, r1
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	4013      	ands	r3, r2
 8002110:	d00f      	beq.n	8002132 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002112:	183b      	adds	r3, r7, r0
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2220      	movs	r2, #32
 8002118:	4013      	ands	r3, r2
 800211a:	d00a      	beq.n	8002132 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <HAL_UART_IRQHandler+0x62>
 8002124:	e2a0      	b.n	8002668 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	0010      	movs	r0, r2
 800212e:	4798      	blx	r3
      }
      return;
 8002130:	e29a      	b.n	8002668 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002132:	2398      	movs	r3, #152	; 0x98
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d100      	bne.n	800213e <HAL_UART_IRQHandler+0x7a>
 800213c:	e114      	b.n	8002368 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800213e:	239c      	movs	r3, #156	; 0x9c
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2201      	movs	r2, #1
 8002146:	4013      	ands	r3, r2
 8002148:	d106      	bne.n	8002158 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800214a:	23a0      	movs	r3, #160	; 0xa0
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a83      	ldr	r2, [pc, #524]	; (8002360 <HAL_UART_IRQHandler+0x29c>)
 8002152:	4013      	ands	r3, r2
 8002154:	d100      	bne.n	8002158 <HAL_UART_IRQHandler+0x94>
 8002156:	e107      	b.n	8002368 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002158:	23a4      	movs	r3, #164	; 0xa4
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2201      	movs	r2, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d012      	beq.n	800218a <HAL_UART_IRQHandler+0xc6>
 8002164:	23a0      	movs	r3, #160	; 0xa0
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d00b      	beq.n	800218a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2284      	movs	r2, #132	; 0x84
 800217e:	589b      	ldr	r3, [r3, r2]
 8002180:	2201      	movs	r2, #1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2184      	movs	r1, #132	; 0x84
 8002188:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800218a:	23a4      	movs	r3, #164	; 0xa4
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d011      	beq.n	80021ba <HAL_UART_IRQHandler+0xf6>
 8002196:	239c      	movs	r3, #156	; 0x9c
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d00b      	beq.n	80021ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2202      	movs	r2, #2
 80021a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2284      	movs	r2, #132	; 0x84
 80021ae:	589b      	ldr	r3, [r3, r2]
 80021b0:	2204      	movs	r2, #4
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2184      	movs	r1, #132	; 0x84
 80021b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021ba:	23a4      	movs	r3, #164	; 0xa4
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	d011      	beq.n	80021ea <HAL_UART_IRQHandler+0x126>
 80021c6:	239c      	movs	r3, #156	; 0x9c
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00b      	beq.n	80021ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2204      	movs	r2, #4
 80021d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2284      	movs	r2, #132	; 0x84
 80021de:	589b      	ldr	r3, [r3, r2]
 80021e0:	2202      	movs	r2, #2
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2184      	movs	r1, #132	; 0x84
 80021e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80021ea:	23a4      	movs	r3, #164	; 0xa4
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	d017      	beq.n	8002226 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	4013      	ands	r3, r2
 8002200:	d105      	bne.n	800220e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002202:	239c      	movs	r3, #156	; 0x9c
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800220c:	d00b      	beq.n	8002226 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2284      	movs	r2, #132	; 0x84
 800221a:	589b      	ldr	r3, [r3, r2]
 800221c:	2208      	movs	r2, #8
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2184      	movs	r1, #132	; 0x84
 8002224:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002226:	23a4      	movs	r3, #164	; 0xa4
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4013      	ands	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_UART_IRQHandler+0x198>
 8002234:	23a0      	movs	r3, #160	; 0xa0
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	04db      	lsls	r3, r3, #19
 800223e:	4013      	ands	r3, r2
 8002240:	d00c      	beq.n	800225c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2284      	movs	r2, #132	; 0x84
 8002250:	589b      	ldr	r3, [r3, r2]
 8002252:	2220      	movs	r2, #32
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2184      	movs	r1, #132	; 0x84
 800225a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2284      	movs	r2, #132	; 0x84
 8002260:	589b      	ldr	r3, [r3, r2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d100      	bne.n	8002268 <HAL_UART_IRQHandler+0x1a4>
 8002266:	e201      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002268:	23a4      	movs	r3, #164	; 0xa4
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2220      	movs	r2, #32
 8002270:	4013      	ands	r3, r2
 8002272:	d00e      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002274:	23a0      	movs	r3, #160	; 0xa0
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2220      	movs	r2, #32
 800227c:	4013      	ands	r3, r2
 800227e:	d008      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	0010      	movs	r0, r2
 8002290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2284      	movs	r2, #132	; 0x84
 8002296:	589b      	ldr	r3, [r3, r2]
 8002298:	2194      	movs	r1, #148	; 0x94
 800229a:	187a      	adds	r2, r7, r1
 800229c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d004      	beq.n	80022b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2228      	movs	r2, #40	; 0x28
 80022b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022b4:	d047      	beq.n	8002346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fe11 	bl	8002ee0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d137      	bne.n	800233c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022cc:	f3ef 8310 	mrs	r3, PRIMASK
 80022d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80022d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d4:	2090      	movs	r0, #144	; 0x90
 80022d6:	183a      	adds	r2, r7, r0
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	2301      	movs	r3, #1
 80022dc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	438a      	bics	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	183b      	adds	r3, r7, r0
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022fe:	f383 8810 	msr	PRIMASK, r3
}
 8002302:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <HAL_UART_IRQHandler+0x2a0>)
 8002312:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	0018      	movs	r0, r3
 800231a:	f7fe fd47 	bl	8000dac <HAL_DMA_Abort_IT>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d01a      	beq.n	8002358 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	0018      	movs	r0, r3
 800232e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	e012      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f9af 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233a:	e00d      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 f9aa 	bl	8002698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	e008      	b.n	8002358 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f9a5 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2284      	movs	r2, #132	; 0x84
 8002352:	2100      	movs	r1, #0
 8002354:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002356:	e189      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	46c0      	nop			; (mov r8, r8)
    return;
 800235a:	e187      	b.n	800266c <HAL_UART_IRQHandler+0x5a8>
 800235c:	0000080f 	.word	0x0000080f
 8002360:	04000120 	.word	0x04000120
 8002364:	08002fa9 	.word	0x08002fa9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	2b01      	cmp	r3, #1
 800236e:	d000      	beq.n	8002372 <HAL_UART_IRQHandler+0x2ae>
 8002370:	e13b      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002372:	23a4      	movs	r3, #164	; 0xa4
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_UART_IRQHandler+0x2bc>
 800237e:	e134      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002380:	23a0      	movs	r3, #160	; 0xa0
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2210      	movs	r2, #16
 8002388:	4013      	ands	r3, r2
 800238a:	d100      	bne.n	800238e <HAL_UART_IRQHandler+0x2ca>
 800238c:	e12d      	b.n	80025ea <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d000      	beq.n	80023a6 <HAL_UART_IRQHandler+0x2e2>
 80023a4:	e0a1      	b.n	80024ea <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	217e      	movs	r1, #126	; 0x7e
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <HAL_UART_IRQHandler+0x2fa>
 80023bc:	e158      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2258      	movs	r2, #88	; 0x58
 80023c2:	5a9b      	ldrh	r3, [r3, r2]
 80023c4:	187a      	adds	r2, r7, r1
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d300      	bcc.n	80023ce <HAL_UART_IRQHandler+0x30a>
 80023cc:	e150      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	187a      	adds	r2, r7, r1
 80023d2:	215a      	movs	r1, #90	; 0x5a
 80023d4:	8812      	ldrh	r2, [r2, #0]
 80023d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	d16f      	bne.n	80024c6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023e6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f0:	2301      	movs	r3, #1
 80023f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	f383 8810 	msr	PRIMASK, r3
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	499e      	ldr	r1, [pc, #632]	; (8002680 <HAL_UART_IRQHandler+0x5bc>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	f383 8810 	msr	PRIMASK, r3
}
 8002416:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002418:	f3ef 8310 	mrs	r3, PRIMASK
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002420:	677b      	str	r3, [r7, #116]	; 0x74
 8002422:	2301      	movs	r3, #1
 8002424:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	f383 8810 	msr	PRIMASK, r3
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2101      	movs	r1, #1
 800243a:	438a      	bics	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	f383 8810 	msr	PRIMASK, r3
}
 8002448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8310 	mrs	r3, PRIMASK
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002452:	673b      	str	r3, [r7, #112]	; 0x70
 8002454:	2301      	movs	r3, #1
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	438a      	bics	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	f383 8810 	msr	PRIMASK, r3
}
 800247a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	2120      	movs	r1, #32
 8002482:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248a:	f3ef 8310 	mrs	r3, PRIMASK
 800248e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002494:	2301      	movs	r3, #1
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249a:	f383 8810 	msr	PRIMASK, r3
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2110      	movs	r1, #16
 80024ac:	438a      	bics	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fc33 	bl	8000d2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2258      	movs	r2, #88	; 0x58
 80024d0:	5a9a      	ldrh	r2, [r3, r2]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	215a      	movs	r1, #90	; 0x5a
 80024d6:	5a5b      	ldrh	r3, [r3, r1]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 f8e0 	bl	80026a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024e8:	e0c2      	b.n	8002670 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2258      	movs	r2, #88	; 0x58
 80024ee:	5a99      	ldrh	r1, [r3, r2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	225a      	movs	r2, #90	; 0x5a
 80024f4:	5a9b      	ldrh	r3, [r3, r2]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	208e      	movs	r0, #142	; 0x8e
 80024fa:	183b      	adds	r3, r7, r0
 80024fc:	1a8a      	subs	r2, r1, r2
 80024fe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	225a      	movs	r2, #90	; 0x5a
 8002504:	5a9b      	ldrh	r3, [r3, r2]
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d100      	bne.n	800250e <HAL_UART_IRQHandler+0x44a>
 800250c:	e0b2      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800250e:	183b      	adds	r3, r7, r0
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_UART_IRQHandler+0x454>
 8002516:	e0ad      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002518:	f3ef 8310 	mrs	r3, PRIMASK
 800251c:	60fb      	str	r3, [r7, #12]
  return(result);
 800251e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002520:	2488      	movs	r4, #136	; 0x88
 8002522:	193a      	adds	r2, r7, r4
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	2301      	movs	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4951      	ldr	r1, [pc, #324]	; (8002684 <HAL_UART_IRQHandler+0x5c0>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	193b      	adds	r3, r7, r4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002550:	f3ef 8310 	mrs	r3, PRIMASK
 8002554:	61bb      	str	r3, [r7, #24]
  return(result);
 8002556:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002558:	2484      	movs	r4, #132	; 0x84
 800255a:	193a      	adds	r2, r7, r4
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	2301      	movs	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f383 8810 	msr	PRIMASK, r3
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	438a      	bics	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	193b      	adds	r3, r7, r4
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	2120      	movs	r1, #32
 800258e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259c:	f3ef 8310 	mrs	r3, PRIMASK
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a4:	2480      	movs	r4, #128	; 0x80
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2110      	movs	r1, #16
 80025c2:	438a      	bics	r2, r1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 f860 	bl	80026a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025e8:	e044      	b.n	8002674 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80025ea:	23a4      	movs	r3, #164	; 0xa4
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	035b      	lsls	r3, r3, #13
 80025f4:	4013      	ands	r3, r2
 80025f6:	d010      	beq.n	800261a <HAL_UART_IRQHandler+0x556>
 80025f8:	239c      	movs	r3, #156	; 0x9c
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	03db      	lsls	r3, r3, #15
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	0352      	lsls	r2, r2, #13
 800260e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fd0a 	bl	800302c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002618:	e02f      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800261a:	23a4      	movs	r3, #164	; 0xa4
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	4013      	ands	r3, r2
 8002624:	d00f      	beq.n	8002646 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002626:	23a0      	movs	r3, #160	; 0xa0
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	4013      	ands	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01e      	beq.n	8002678 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	0010      	movs	r0, r2
 8002642:	4798      	blx	r3
    }
    return;
 8002644:	e018      	b.n	8002678 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002646:	23a4      	movs	r3, #164	; 0xa4
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	4013      	ands	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_UART_IRQHandler+0x5b6>
 8002652:	23a0      	movs	r3, #160	; 0xa0
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	4013      	ands	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 fcb8 	bl	8002fd6 <UART_EndTransmit_IT>
    return;
 8002666:	e008      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	e006      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
    return;
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	e004      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	e002      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
      return;
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	e000      	b.n	800267a <HAL_UART_IRQHandler+0x5b6>
    return;
 8002678:	46c0      	nop			; (mov r8, r8)
  }

}
 800267a:	46bd      	mov	sp, r7
 800267c:	b02b      	add	sp, #172	; 0xac
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	fffffeff 	.word	0xfffffeff
 8002684:	fffffedf 	.word	0xfffffedf

08002688 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	000a      	movs	r2, r1
 80026b2:	1cbb      	adds	r3, r7, #2
 80026b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c8:	231a      	movs	r3, #26
 80026ca:	2218      	movs	r2, #24
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4ab4      	ldr	r2, [pc, #720]	; (80029c4 <UART_SetConfig+0x304>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4aaf      	ldr	r2, [pc, #700]	; (80029c8 <UART_SetConfig+0x308>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4aa9      	ldr	r2, [pc, #676]	; (80029cc <UART_SetConfig+0x30c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002730:	4313      	orrs	r3, r2
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4aa5      	ldr	r2, [pc, #660]	; (80029d0 <UART_SetConfig+0x310>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4aa1      	ldr	r2, [pc, #644]	; (80029d4 <UART_SetConfig+0x314>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d131      	bne.n	80027b8 <UART_SetConfig+0xf8>
 8002754:	4ba0      	ldr	r3, [pc, #640]	; (80029d8 <UART_SetConfig+0x318>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	220c      	movs	r2, #12
 800275a:	4013      	ands	r3, r2
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d01d      	beq.n	800279c <UART_SetConfig+0xdc>
 8002760:	d823      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002762:	2b08      	cmp	r3, #8
 8002764:	d00c      	beq.n	8002780 <UART_SetConfig+0xc0>
 8002766:	d820      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <UART_SetConfig+0xb2>
 800276c:	2b04      	cmp	r3, #4
 800276e:	d00e      	beq.n	800278e <UART_SetConfig+0xce>
 8002770:	e01b      	b.n	80027aa <UART_SetConfig+0xea>
 8002772:	231b      	movs	r3, #27
 8002774:	2218      	movs	r2, #24
 8002776:	189b      	adds	r3, r3, r2
 8002778:	19db      	adds	r3, r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e065      	b.n	800284c <UART_SetConfig+0x18c>
 8002780:	231b      	movs	r3, #27
 8002782:	2218      	movs	r2, #24
 8002784:	189b      	adds	r3, r3, r2
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e05e      	b.n	800284c <UART_SetConfig+0x18c>
 800278e:	231b      	movs	r3, #27
 8002790:	2218      	movs	r2, #24
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e057      	b.n	800284c <UART_SetConfig+0x18c>
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2208      	movs	r2, #8
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e050      	b.n	800284c <UART_SetConfig+0x18c>
 80027aa:	231b      	movs	r3, #27
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2210      	movs	r2, #16
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e049      	b.n	800284c <UART_SetConfig+0x18c>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a83      	ldr	r2, [pc, #524]	; (80029cc <UART_SetConfig+0x30c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d13e      	bne.n	8002840 <UART_SetConfig+0x180>
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <UART_SetConfig+0x318>)
 80027c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027c6:	23c0      	movs	r3, #192	; 0xc0
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4013      	ands	r3, r2
 80027cc:	22c0      	movs	r2, #192	; 0xc0
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d027      	beq.n	8002824 <UART_SetConfig+0x164>
 80027d4:	22c0      	movs	r2, #192	; 0xc0
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	4293      	cmp	r3, r2
 80027da:	d82a      	bhi.n	8002832 <UART_SetConfig+0x172>
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d011      	beq.n	8002808 <UART_SetConfig+0x148>
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d822      	bhi.n	8002832 <UART_SetConfig+0x172>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <UART_SetConfig+0x13a>
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	00d2      	lsls	r2, r2, #3
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <UART_SetConfig+0x156>
 80027f8:	e01b      	b.n	8002832 <UART_SetConfig+0x172>
 80027fa:	231b      	movs	r3, #27
 80027fc:	2218      	movs	r2, #24
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e021      	b.n	800284c <UART_SetConfig+0x18c>
 8002808:	231b      	movs	r3, #27
 800280a:	2218      	movs	r2, #24
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e01a      	b.n	800284c <UART_SetConfig+0x18c>
 8002816:	231b      	movs	r3, #27
 8002818:	2218      	movs	r2, #24
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2204      	movs	r2, #4
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e013      	b.n	800284c <UART_SetConfig+0x18c>
 8002824:	231b      	movs	r3, #27
 8002826:	2218      	movs	r2, #24
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2208      	movs	r2, #8
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e00c      	b.n	800284c <UART_SetConfig+0x18c>
 8002832:	231b      	movs	r3, #27
 8002834:	2218      	movs	r2, #24
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	2210      	movs	r2, #16
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e005      	b.n	800284c <UART_SetConfig+0x18c>
 8002840:	231b      	movs	r3, #27
 8002842:	2218      	movs	r2, #24
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2210      	movs	r2, #16
 800284a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5e      	ldr	r2, [pc, #376]	; (80029cc <UART_SetConfig+0x30c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d000      	beq.n	8002858 <UART_SetConfig+0x198>
 8002856:	e084      	b.n	8002962 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002858:	231b      	movs	r3, #27
 800285a:	2218      	movs	r2, #24
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d01d      	beq.n	80028a2 <UART_SetConfig+0x1e2>
 8002866:	dc20      	bgt.n	80028aa <UART_SetConfig+0x1ea>
 8002868:	2b04      	cmp	r3, #4
 800286a:	d015      	beq.n	8002898 <UART_SetConfig+0x1d8>
 800286c:	dc1d      	bgt.n	80028aa <UART_SetConfig+0x1ea>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <UART_SetConfig+0x1b8>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d005      	beq.n	8002882 <UART_SetConfig+0x1c2>
 8002876:	e018      	b.n	80028aa <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff f9d8 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 800287c:	0003      	movs	r3, r0
 800287e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002880:	e01c      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <UART_SetConfig+0x318>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2210      	movs	r2, #16
 8002888:	4013      	ands	r3, r2
 800288a:	d002      	beq.n	8002892 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <UART_SetConfig+0x31c>)
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002890:	e014      	b.n	80028bc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <UART_SetConfig+0x320>)
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002896:	e011      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002898:	f7ff f918 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 800289c:	0003      	movs	r3, r0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a0:	e00c      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a8:	e008      	b.n	80028bc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028ae:	231a      	movs	r3, #26
 80028b0:	2218      	movs	r2, #24
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
        break;
 80028ba:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d100      	bne.n	80028c4 <UART_SetConfig+0x204>
 80028c2:	e12f      	b.n	8002b24 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	0013      	movs	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d305      	bcc.n	80028e0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d906      	bls.n	80028ee <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80028e0:	231a      	movs	r3, #26
 80028e2:	2218      	movs	r2, #24
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	19db      	adds	r3, r3, r7
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e11a      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	000b      	movs	r3, r1
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	0010      	movs	r0, r2
 8002900:	0205      	lsls	r5, r0, #8
 8002902:	431d      	orrs	r5, r3
 8002904:	000b      	movs	r3, r1
 8002906:	021c      	lsls	r4, r3, #8
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	1900      	adds	r0, r0, r4
 800291a:	4169      	adcs	r1, r5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f7fd fc79 	bl	8000220 <__aeabi_uldivmod>
 800292e:	0002      	movs	r2, r0
 8002930:	000b      	movs	r3, r1
 8002932:	0013      	movs	r3, r2
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d309      	bcc.n	8002954 <UART_SetConfig+0x294>
 8002940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	035b      	lsls	r3, r3, #13
 8002946:	429a      	cmp	r2, r3
 8002948:	d204      	bcs.n	8002954 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e0e7      	b.n	8002b24 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002954:	231a      	movs	r3, #26
 8002956:	2218      	movs	r2, #24
 8002958:	189b      	adds	r3, r3, r2
 800295a:	19db      	adds	r3, r3, r7
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e0e0      	b.n	8002b24 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	429a      	cmp	r2, r3
 800296c:	d000      	beq.n	8002970 <UART_SetConfig+0x2b0>
 800296e:	e082      	b.n	8002a76 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002970:	231b      	movs	r3, #27
 8002972:	2218      	movs	r2, #24
 8002974:	189b      	adds	r3, r3, r2
 8002976:	19db      	adds	r3, r3, r7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d834      	bhi.n	80029e8 <UART_SetConfig+0x328>
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <UART_SetConfig+0x324>)
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002988:	f7ff f950 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 800298c:	0003      	movs	r3, r0
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002990:	e033      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002992:	f7ff f961 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002996:	0003      	movs	r3, r0
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800299a:	e02e      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <UART_SetConfig+0x318>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <UART_SetConfig+0x31c>)
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029aa:	e026      	b.n	80029fa <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <UART_SetConfig+0x320>)
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b0:	e023      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b2:	f7ff f88b 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 80029b6:	0003      	movs	r3, r0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ba:	e01e      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029c2:	e01a      	b.n	80029fa <UART_SetConfig+0x33a>
 80029c4:	efff69f3 	.word	0xefff69f3
 80029c8:	ffffcfff 	.word	0xffffcfff
 80029cc:	40004800 	.word	0x40004800
 80029d0:	fffff4ff 	.word	0xfffff4ff
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	003d0900 	.word	0x003d0900
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	080030d0 	.word	0x080030d0
      default:
        pclk = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029ec:	231a      	movs	r3, #26
 80029ee:	2218      	movs	r2, #24
 80029f0:	189b      	adds	r3, r3, r2
 80029f2:	19db      	adds	r3, r3, r7
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
        break;
 80029f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d100      	bne.n	8002a02 <UART_SetConfig+0x342>
 8002a00:	e090      	b.n	8002b24 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	18d2      	adds	r2, r2, r3
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f7fd fb77 	bl	8000108 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d921      	bls.n	8002a68 <UART_SetConfig+0x3a8>
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	025b      	lsls	r3, r3, #9
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d21c      	bcs.n	8002a68 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	200e      	movs	r0, #14
 8002a34:	2418      	movs	r4, #24
 8002a36:	1903      	adds	r3, r0, r4
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2207      	movs	r2, #7
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	1903      	adds	r3, r0, r4
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	1902      	adds	r2, r0, r4
 8002a52:	19d2      	adds	r2, r2, r7
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1902      	adds	r2, r0, r4
 8002a60:	19d2      	adds	r2, r2, r7
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e05d      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002a68:	231a      	movs	r3, #26
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e056      	b.n	8002b24 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a76:	231b      	movs	r3, #27
 8002a78:	2218      	movs	r2, #24
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	19db      	adds	r3, r3, r7
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d822      	bhi.n	8002aca <UART_SetConfig+0x40a>
 8002a84:	009a      	lsls	r2, r3, #2
 8002a86:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <UART_SetConfig+0x484>)
 8002a88:	18d3      	adds	r3, r2, r3
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8e:	f7ff f8cd 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002a92:	0003      	movs	r3, r0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a96:	e021      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7ff f8de 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aa0:	e01c      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa2:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <UART_SetConfig+0x488>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <UART_SetConfig+0x48c>)
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ab0:	e014      	b.n	8002adc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <UART_SetConfig+0x490>)
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ab6:	e011      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab8:	f7ff f808 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8002abc:	0003      	movs	r3, r0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac0:	e00c      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac8:	e008      	b.n	8002adc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ace:	231a      	movs	r3, #26
 8002ad0:	2218      	movs	r2, #24
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	19db      	adds	r3, r3, r7
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
        break;
 8002ada:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	085a      	lsrs	r2, r3, #1
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	18d2      	adds	r2, r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0019      	movs	r1, r3
 8002af2:	0010      	movs	r0, r2
 8002af4:	f7fd fb08 	bl	8000108 <__udivsi3>
 8002af8:	0003      	movs	r3, r0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d90a      	bls.n	8002b18 <UART_SetConfig+0x458>
 8002b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	025b      	lsls	r3, r3, #9
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d205      	bcs.n	8002b18 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e005      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002b18:	231a      	movs	r3, #26
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2200      	movs	r2, #0
 8002b28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b30:	231a      	movs	r3, #26
 8002b32:	2218      	movs	r2, #24
 8002b34:	189b      	adds	r3, r3, r2
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b00e      	add	sp, #56	; 0x38
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	080030f4 	.word	0x080030f4
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	003d0900 	.word	0x003d0900
 8002b50:	00f42400 	.word	0x00f42400

08002b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <UART_AdvFeatureConfig+0x144>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a43      	ldr	r2, [pc, #268]	; (8002c9c <UART_AdvFeatureConfig+0x148>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <UART_AdvFeatureConfig+0x14c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <UART_AdvFeatureConfig+0x150>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2210      	movs	r2, #16
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <UART_AdvFeatureConfig+0x154>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <UART_AdvFeatureConfig+0x158>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <UART_AdvFeatureConfig+0x15c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	035b      	lsls	r3, r3, #13
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10b      	bne.n	8002c6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <UART_AdvFeatureConfig+0x160>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	4013      	ands	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <UART_AdvFeatureConfig+0x164>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffdffff 	.word	0xfffdffff
 8002c9c:	fffeffff 	.word	0xfffeffff
 8002ca0:	fffbffff 	.word	0xfffbffff
 8002ca4:	ffff7fff 	.word	0xffff7fff
 8002ca8:	ffffefff 	.word	0xffffefff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	ffefffff 	.word	0xffefffff
 8002cb4:	ff9fffff 	.word	0xff9fffff
 8002cb8:	fff7ffff 	.word	0xfff7ffff

08002cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2284      	movs	r2, #132	; 0x84
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ccc:	f7fd ff22 	bl	8000b14 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d12c      	bne.n	8002d3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	0391      	lsls	r1, r2, #14
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <UART_CheckIdleState+0x148>)
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f000 f88c 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d021      	beq.n	8002d3c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d02:	2301      	movs	r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2278      	movs	r2, #120	; 0x78
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e05f      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d146      	bne.n	8002dd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	03d1      	lsls	r1, r2, #15
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4a2c      	ldr	r2, [pc, #176]	; (8002e04 <UART_CheckIdleState+0x148>)
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f000 f858 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d03b      	beq.n	8002dd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d60:	f3ef 8310 	mrs	r3, PRIMASK
 8002d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4921      	ldr	r1, [pc, #132]	; (8002e08 <UART_CheckIdleState+0x14c>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f383 8810 	msr	PRIMASK, r3
}
 8002d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d92:	f3ef 8310 	mrs	r3, PRIMASK
 8002d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	2120      	movs	r1, #32
 8002dca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2278      	movs	r2, #120	; 0x78
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e011      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2278      	movs	r2, #120	; 0x78
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b010      	add	sp, #64	; 0x40
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	01ffffff 	.word	0x01ffffff
 8002e08:	fffffedf 	.word	0xfffffedf

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e04b      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d048      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e24:	f7fd fe76 	bl	8000b14 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04b      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d035      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2208      	movs	r2, #8
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d111      	bne.n	8002e7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f83c 	bl	8002ee0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2284      	movs	r2, #132	; 0x84
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2278      	movs	r2, #120	; 0x78
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02c      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d112      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f81f 	bl	8002ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2284      	movs	r2, #132	; 0x84
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2278      	movs	r2, #120	; 0x78
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	425a      	negs	r2, r3
 8002ec6:	4153      	adcs	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0a4      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	; 0x38
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	617b      	str	r3, [r7, #20]
  return(result);
 8002eee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4926      	ldr	r1, [pc, #152]	; (8002fa4 <UART_EndRxTransfer+0xc4>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d118      	bne.n	8002f86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f54:	f3ef 8310 	mrs	r3, PRIMASK
 8002f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2110      	movs	r1, #16
 8002f76:	438a      	bics	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b00e      	add	sp, #56	; 0x38
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	fffffedf 	.word	0xfffffedf

08002fa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	225a      	movs	r2, #90	; 0x5a
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2252      	movs	r2, #82	; 0x52
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fb65 	bl	8002698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2140      	movs	r1, #64	; 0x40
 8003000:	438a      	bics	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff fb32 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b006      	add	sp, #24
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <memset>:
 800303c:	0003      	movs	r3, r0
 800303e:	1882      	adds	r2, r0, r2
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	7019      	strb	r1, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2600      	movs	r6, #0
 8003050:	4c0c      	ldr	r4, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	2600      	movs	r6, #0
 800305e:	f000 f819 	bl	8003094 <_init>
 8003062:	4c0a      	ldr	r4, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4d0a      	ldr	r5, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	00b3      	lsls	r3, r6, #2
 8003072:	58eb      	ldr	r3, [r5, r3]
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	00b3      	lsls	r3, r6, #2
 800307c:	58eb      	ldr	r3, [r5, r3]
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	08003120 	.word	0x08003120
 8003088:	08003120 	.word	0x08003120
 800308c:	08003124 	.word	0x08003124
 8003090:	08003120 	.word	0x08003120

08003094 <_init>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr

080030a0 <_fini>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr
