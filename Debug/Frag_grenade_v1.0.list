
Frag_grenade_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003228  08003228  00004228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003294  08003294  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003294  08003294  00004294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800329c  0800329c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800329c  0800329c  0000429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a0  080032a0  000042a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080032a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000014  080032b8  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080032b8  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000848d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001741  00000000  00000000  0000d4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054b  00000000  00000000  0000f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff62  00000000  00000000  0000f82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b9  00000000  00000000  0001f78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061066  00000000  00000000  00028c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00089cac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000175c  00000000  00000000  00089cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0008b44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003210 	.word	0x08003210

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003210 	.word	0x08003210

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fb4c 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f85a 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f91c 	bl	80006f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b8:	f000 f8fc 	bl	80006b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f8c0 	bl	8000640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80004c0:	23fa      	movs	r3, #250	@ 0xfa
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fbaf 	bl	8000c28 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, sizeof(dma_rx_buffer));
 80004ca:	4923      	ldr	r1, [pc, #140]	@ (8000558 <main+0xb0>)
 80004cc:	4b23      	ldr	r3, [pc, #140]	@ (800055c <main+0xb4>)
 80004ce:	220a      	movs	r2, #10
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 ffc3 	bl	800245c <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 80004d6:	23fa      	movs	r3, #250	@ 0xfa
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fba4 	bl	8000c28 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_RESET , 0, 0); // Reset DFPlayer Mini
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	200c      	movs	r0, #12
 80004e6:	f000 f939 	bl	800075c <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80004ea:	23fa      	movs	r3, #250	@ 0xfa
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fb9a 	bl	8000c28 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_SET_VOL, 0, 30);
 80004f4:	221e      	movs	r2, #30
 80004f6:	2100      	movs	r1, #0
 80004f8:	2006      	movs	r0, #6
 80004fa:	f000 f92f 	bl	800075c <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80004fe:	23fa      	movs	r3, #250	@ 0xfa
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fb90 	bl	8000c28 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_PLAY_TRACK, 0x00, getRandomNumber());
 8000508:	f000 f9ac 	bl	8000864 <getRandomNumber>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	2003      	movs	r0, #3
 8000514:	f000 f922 	bl	800075c <DFPlayer_SendCommand>
  HAL_Delay(1000);
 8000518:	23fa      	movs	r3, #250	@ 0xfa
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fb83 	bl	8000c28 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Blink_LEDs();
      if (HAL_GetTick() - last_query_time >= CHECK_INTERVAL)
 8000522:	f000 fb77 	bl	8000c14 <HAL_GetTick>
 8000526:	0002      	movs	r2, r0
 8000528:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <main+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad2      	subs	r2, r2, r3
 800052e:	23fa      	movs	r3, #250	@ 0xfa
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	429a      	cmp	r2, r3
 8000534:	d306      	bcc.n	8000544 <main+0x9c>
		  {
			  DFPlayer_SendPlaybackStatusQuery(); // Send the query command
 8000536:	f000 f981 	bl	800083c <DFPlayer_SendPlaybackStatusQuery>
			  last_query_time = HAL_GetTick();
 800053a:	f000 fb6b 	bl	8000c14 <HAL_GetTick>
 800053e:	0002      	movs	r2, r0
 8000540:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <main+0xb8>)
 8000542:	601a      	str	r2, [r3, #0]
		  }
	  //checkPlaybackStatus();
	  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, playback_status);
 8000544:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <main+0xbc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2da      	uxtb	r2, r3
 800054a:	23a0      	movs	r3, #160	@ 0xa0
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2110      	movs	r1, #16
 8000550:	0018      	movs	r0, r3
 8000552:	f000 ff8b 	bl	800146c <HAL_GPIO_WritePin>
      if (HAL_GetTick() - last_query_time >= CHECK_INTERVAL)
 8000556:	e7e4      	b.n	8000522 <main+0x7a>
 8000558:	20000100 	.word	0x20000100
 800055c:	20000030 	.word	0x20000030
 8000560:	2000010c 	.word	0x2000010c
 8000564:	20000004 	.word	0x20000004

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b099      	sub	sp, #100	@ 0x64
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	242c      	movs	r4, #44	@ 0x2c
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2334      	movs	r3, #52	@ 0x34
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f002 fe1c 	bl	80031b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	2318      	movs	r3, #24
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fe14 	bl	80031b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2318      	movs	r3, #24
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fe0d 	bl	80031b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a26      	ldr	r2, [pc, #152]	@ (800063c <SystemClock_Config+0xd4>)
 80005a2:	401a      	ands	r2, r3
 80005a4:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <SystemClock_Config+0xd0>)
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	0109      	lsls	r1, r1, #4
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ae:	0021      	movs	r1, r4
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2210      	movs	r2, #16
 80005b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	22a0      	movs	r2, #160	@ 0xa0
 80005c6:	0212      	lsls	r2, r2, #8
 80005c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 ff82 	bl	80014dc <HAL_RCC_OscConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005dc:	f000 f99e 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	2118      	movs	r1, #24
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	220f      	movs	r2, #15
 80005e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2100      	movs	r1, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fae5 	bl	8001bd4 <HAL_RCC_ClockConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800060e:	f000 f985 	bl	800091c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000612:	003b      	movs	r3, r7
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061e:	003b      	movs	r3, r7
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fcfb 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f977 	bl	800091c <Error_Handler>
  }
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b019      	add	sp, #100	@ 0x64
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	40007000 	.word	0x40007000
 800063c:	ffffe7ff 	.word	0xffffe7ff

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__HAL_RCC_USART2_CLK_ENABLE();
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_USART2_UART_Init+0x68>)
 8000646:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_USART2_UART_Init+0x68>)
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	0289      	lsls	r1, r1, #10
 800064e:	430a      	orrs	r2, r1
 8000650:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000654:	4a16      	ldr	r2, [pc, #88]	@ (80006b0 <MX_USART2_UART_Init+0x70>)
 8000656:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 800065a:	2296      	movs	r2, #150	@ 0x96
 800065c:	0192      	lsls	r2, r2, #6
 800065e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000674:	220c      	movs	r2, #12
 8000676:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_USART2_UART_Init+0x6c>)
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fdee 	bl	8002274 <HAL_UART_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800069c:	f000 f93e 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000
 80006ac:	20000030 	.word	0x20000030
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_DMA_Init+0x38>)
 80006bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_DMA_Init+0x38>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_DMA_Init+0x38>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	2201      	movs	r2, #1
 80006cc:	4013      	ands	r3, r2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fb76 	bl	8000dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fb88 	bl	8000df2 <HAL_NVIC_EnableIRQ>

}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2314      	movs	r3, #20
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f002 fd59 	bl	80031b6 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_GPIO_Init+0x68>)
 8000706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_GPIO_Init+0x68>)
 800070a:	2101      	movs	r1, #1
 800070c:	430a      	orrs	r2, r1
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_GPIO_Init+0x68>)
 8000712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000714:	2201      	movs	r2, #1
 8000716:	4013      	ands	r3, r2
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800071c:	23a0      	movs	r3, #160	@ 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2200      	movs	r2, #0
 8000722:	2170      	movs	r1, #112	@ 0x70
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fea1 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_AMBER_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2270      	movs	r2, #112	@ 0x70
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2201      	movs	r2, #1
 8000734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	1d3a      	adds	r2, r7, #4
 8000744:	23a0      	movs	r3, #160	@ 0xa0
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fd28 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <DFPlayer_SendCommand>:

/* USER CODE BEGIN 4 */
void DFPlayer_SendCommand(uint8_t command, uint8_t param1, uint8_t param2)
	{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	0004      	movs	r4, r0
 8000764:	0008      	movs	r0, r1
 8000766:	0011      	movs	r1, r2
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	1c22      	adds	r2, r4, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	1c02      	adds	r2, r0, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	1d7b      	adds	r3, r7, #5
 8000776:	1c0a      	adds	r2, r1, #0
 8000778:	701a      	strb	r2, [r3, #0]
		uint8_t packet[10];
		uint16_t arg = (param1 << 8) | param2;
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	b21a      	sxth	r2, r3
 8000782:	1d7b      	adds	r3, r7, #5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b21b      	sxth	r3, r3
 8000788:	4313      	orrs	r3, r2
 800078a:	b21a      	sxth	r2, r3
 800078c:	2016      	movs	r0, #22
 800078e:	183b      	adds	r3, r7, r0
 8000790:	801a      	strh	r2, [r3, #0]

		packet[0] = 0x7E;             // Start byte
 8000792:	2108      	movs	r1, #8
 8000794:	187b      	adds	r3, r7, r1
 8000796:	227e      	movs	r2, #126	@ 0x7e
 8000798:	701a      	strb	r2, [r3, #0]
		packet[1] = 0xFF;             // Version
 800079a:	187b      	adds	r3, r7, r1
 800079c:	22ff      	movs	r2, #255	@ 0xff
 800079e:	705a      	strb	r2, [r3, #1]
		packet[2] = 0x06;             // Data length
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2206      	movs	r2, #6
 80007a4:	709a      	strb	r2, [r3, #2]
		packet[3] = command;          // Command byte
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	1dfa      	adds	r2, r7, #7
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	70da      	strb	r2, [r3, #3]
		packet[4] = 0x00;             // No feedback
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	711a      	strb	r2, [r3, #4]
		packet[5] = (arg >> 8) & 0xFF; // Parameter high byte
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	715a      	strb	r2, [r3, #5]
		packet[6] = arg & 0xFF;       // Parameter low byte
 80007c2:	183b      	adds	r3, r7, r0
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	719a      	strb	r2, [r3, #6]
		uint16_t checksum = 0 - (packet[1] + packet[2] + packet[3] + packet[4] + packet[5] + packet[6]);
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	785b      	ldrb	r3, [r3, #1]
 80007d0:	001a      	movs	r2, r3
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	78d2      	ldrb	r2, [r2, #3]
 80007de:	189b      	adds	r3, r3, r2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	7912      	ldrb	r2, [r2, #4]
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	187a      	adds	r2, r7, r1
 80007ec:	7952      	ldrb	r2, [r2, #5]
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	187a      	adds	r2, r7, r1
 80007f4:	7992      	ldrb	r2, [r2, #6]
 80007f6:	189b      	adds	r3, r3, r2
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	2014      	movs	r0, #20
 80007fc:	183b      	adds	r3, r7, r0
 80007fe:	4252      	negs	r2, r2
 8000800:	801a      	strh	r2, [r3, #0]
		packet[7] = (checksum >> 8) & 0xFF; // Checksum high byte
 8000802:	183b      	adds	r3, r7, r0
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	187b      	adds	r3, r7, r1
 800080e:	71da      	strb	r2, [r3, #7]
		packet[8] = checksum & 0xFF;        // Checksum low byte
 8000810:	183b      	adds	r3, r7, r0
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	187b      	adds	r3, r7, r1
 8000818:	721a      	strb	r2, [r3, #8]
		packet[9] = 0xEF;             // End byte
 800081a:	187b      	adds	r3, r7, r1
 800081c:	22ef      	movs	r2, #239	@ 0xef
 800081e:	725a      	strb	r2, [r3, #9]

		// Send packet over UART
		HAL_UART_Transmit(&huart2, packet, 10, HAL_MAX_DELAY);
 8000820:	2301      	movs	r3, #1
 8000822:	425b      	negs	r3, r3
 8000824:	1879      	adds	r1, r7, r1
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <DFPlayer_SendCommand+0xdc>)
 8000828:	220a      	movs	r2, #10
 800082a:	f001 fd77 	bl	800231c <HAL_UART_Transmit>
	}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b007      	add	sp, #28
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	20000030 	.word	0x20000030

0800083c <DFPlayer_SendPlaybackStatusQuery>:

void DFPlayer_SendPlaybackStatusQuery(void)
	{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
		DFPlayer_SendCommand(0x42, 0x00, 0x00); // Query playback status
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2042      	movs	r0, #66	@ 0x42
 8000846:	f7ff ff89 	bl	800075c <DFPlayer_SendCommand>
		HAL_UART_Receive_DMA(&huart2, dma_rx_buffer, sizeof(dma_rx_buffer)); // Start DMA reception
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <DFPlayer_SendPlaybackStatusQuery+0x20>)
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <DFPlayer_SendPlaybackStatusQuery+0x24>)
 800084e:	220a      	movs	r2, #10
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fe03 	bl	800245c <HAL_UART_Receive_DMA>
		//HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
	}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000100 	.word	0x20000100
 8000860:	20000030 	.word	0x20000030

08000864 <getRandomNumber>:
				explosion = 1;
			}
	}

uint8_t getRandomNumber()
	{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    	seed = (2*HAL_GetTick() * 1103515245 + 12345) & 0x7FFFFFFF; // LCG formula
 8000868:	f000 f9d4 	bl	8000c14 <HAL_GetTick>
 800086c:	0001      	movs	r1, r0
 800086e:	000a      	movs	r2, r1
 8000870:	0252      	lsls	r2, r2, #9
 8000872:	1a52      	subs	r2, r2, r1
 8000874:	0092      	lsls	r2, r2, #2
 8000876:	1852      	adds	r2, r2, r1
 8000878:	0253      	lsls	r3, r2, #9
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	185b      	adds	r3, r3, r1
 8000880:	015a      	lsls	r2, r3, #5
 8000882:	189b      	adds	r3, r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	1a5b      	subs	r3, r3, r1
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	185b      	adds	r3, r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <getRandomNumber+0x54>)
 8000890:	4694      	mov	ip, r2
 8000892:	4463      	add	r3, ip
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	085a      	lsrs	r2, r3, #1
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <getRandomNumber+0x58>)
 800089a:	601a      	str	r2, [r3, #0]
    	return (uint8_t)((seed % 3) + 1); // Random number between 1 and 3
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <getRandomNumber+0x58>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2103      	movs	r1, #3
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fcb6 	bl	8000214 <__aeabi_uidivmod>
 80008a8:	000b      	movs	r3, r1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2db      	uxtb	r3, r3
	}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	00003039 	.word	0x00003039
 80008bc:	20000000 	.word	0x20000000

080008c0 <HAL_UART_RxCpltCallback>:
					}
			}
	}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 80008c8:	23a0      	movs	r3, #160	@ 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2140      	movs	r1, #64	@ 0x40
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fde9 	bl	80014a6 <HAL_GPIO_TogglePin>
		if (huart->Instance == USART2)  			// Validate the DFPlayer response
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <HAL_UART_RxCpltCallback+0x50>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d113      	bne.n	8000906 <HAL_UART_RxCpltCallback+0x46>
			{
				if (dma_rx_buffer[0] == 0x7E && dma_rx_buffer[3] == 0x42 && dma_rx_buffer[9] == 0xEF)
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_UART_RxCpltCallback+0x54>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80008e4:	d10c      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x40>
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <HAL_UART_RxCpltCallback+0x54>)
 80008e8:	78db      	ldrb	r3, [r3, #3]
 80008ea:	2b42      	cmp	r3, #66	@ 0x42
 80008ec:	d108      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x40>
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_UART_RxCpltCallback+0x54>)
 80008f0:	7a5b      	ldrb	r3, [r3, #9]
 80008f2:	2bef      	cmp	r3, #239	@ 0xef
 80008f4:	d104      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x40>
					{
						playback_status = dma_rx_buffer[6]; // Extract playback status
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_UART_RxCpltCallback+0x54>)
 80008f8:	799a      	ldrb	r2, [r3, #6]
 80008fa:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <HAL_UART_RxCpltCallback+0x58>)
 80008fc:	701a      	strb	r2, [r3, #0]
						playback_status = 0xFF; // Invalid response
					}
				//HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);				// Restart DMA reception

			}
	}
 80008fe:	e002      	b.n	8000906 <HAL_UART_RxCpltCallback+0x46>
						playback_status = 0xFF; // Invalid response
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_UART_RxCpltCallback+0x58>)
 8000902:	22ff      	movs	r2, #255	@ 0xff
 8000904:	701a      	strb	r2, [r3, #0]
	}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	40004400 	.word	0x40004400
 8000914:	20000100 	.word	0x20000100
 8000918:	20000004 	.word	0x20000004

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092c:	4b07      	ldr	r3, [pc, #28]	@ (800094c <HAL_MspInit+0x24>)
 800092e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x24>)
 8000932:	2101      	movs	r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <HAL_MspInit+0x24>)
 800093a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_MspInit+0x24>)
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	0549      	lsls	r1, r1, #21
 8000942:	430a      	orrs	r2, r1
 8000944:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	@ 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	240c      	movs	r4, #12
 800095a:	193b      	adds	r3, r7, r4
 800095c:	0018      	movs	r0, r3
 800095e:	2314      	movs	r3, #20
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f002 fc27 	bl	80031b6 <memset>
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <HAL_UART_MspInit+0x100>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d16a      	bne.n	8000a48 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <HAL_UART_MspInit+0x104>)
 8000974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000976:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <HAL_UART_MspInit+0x104>)
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	0289      	lsls	r1, r1, #10
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <HAL_UART_MspInit+0x104>)
 8000982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000984:	4b33      	ldr	r3, [pc, #204]	@ (8000a54 <HAL_UART_MspInit+0x104>)
 8000986:	2101      	movs	r1, #1
 8000988:	430a      	orrs	r2, r1
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800098c:	4b31      	ldr	r3, [pc, #196]	@ (8000a54 <HAL_UART_MspInit+0x104>)
 800098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000990:	2201      	movs	r2, #1
 8000992:	4013      	ands	r3, r2
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA0-CK_IN     ------> USART2_RX
    PA9     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2202      	movs	r2, #2
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2203      	movs	r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	193a      	adds	r2, r7, r4
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fbee 	bl	80011a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c4:	0021      	movs	r1, r4
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2202      	movs	r2, #2
 80009d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2203      	movs	r2, #3
 80009de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2204      	movs	r2, #4
 80009e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	23a0      	movs	r3, #160	@ 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fbd6 	bl	80011a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_UART_MspInit+0x10c>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	0152      	lsls	r2, r2, #5
 8000a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 f9fc 	bl	8000e2c <HAL_DMA_Init>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000a38:	f7ff ff70 	bl	800091c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a40:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_UART_MspInit+0x108>)
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b009      	add	sp, #36	@ 0x24
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000
 8000a58:	200000b8 	.word	0x200000b8
 8000a5c:	40020030 	.word	0x40020030

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8b2 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 8000a98:	23a0      	movs	r3, #160	@ 0xa0
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2140      	movs	r1, #64	@ 0x40
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fd01 	bl	80014a6 <HAL_GPIO_TogglePin>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 fa9e 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	200000b8 	.word	0x200000b8

08000ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f7ff fff6 	bl	8000ab8 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000acc:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ace:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ad0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <LoopForever+0xa>)
    CMP R1, R2
 8000ad4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ad6:	d105      	bne.n	8000ae4 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000ad8:	4811      	ldr	r0, [pc, #68]	@ (8000b20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ada:	4912      	ldr	r1, [pc, #72]	@ (8000b24 <LoopForever+0x12>)
    STR R1, [R0]
 8000adc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ae0:	4912      	ldr	r1, [pc, #72]	@ (8000b2c <LoopForever+0x1a>)
    STR R1, [R0]
 8000ae2:	6001      	str	r1, [r0, #0]

08000ae4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ae6:	4913      	ldr	r1, [pc, #76]	@ (8000b34 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ae8:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <LoopForever+0x26>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000afc:	4c10      	ldr	r4, [pc, #64]	@ (8000b40 <LoopForever+0x2e>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0a:	f002 fb5d 	bl	80031c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0e:	f7ff fccb 	bl	80004a8 <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
   ldr   r0, =_estack
 8000b14:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000b18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000b20:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000b24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b2c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b38:	080032a4 	.word	0x080032a4
  ldr r2, =_sbss
 8000b3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b40:	20000114 	.word	0x20000114

08000b44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_COMP_IRQHandler>
	...

08000b48 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <HAL_Init+0x3c>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <HAL_Init+0x3c>)
 8000b5a:	2140      	movs	r1, #64	@ 0x40
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f811 	bl	8000b88 <HAL_InitTick>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e001      	b.n	8000b76 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b72:	f7ff fed9 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_InitTick+0x5c>)
 8000b92:	681c      	ldr	r4, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_InitTick+0x60>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	0019      	movs	r1, r3
 8000b9a:	23fa      	movs	r3, #250	@ 0xfa
 8000b9c:	0098      	lsls	r0, r3, #2
 8000b9e:	f7ff fab3 	bl	8000108 <__udivsi3>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f7ff faae 	bl	8000108 <__udivsi3>
 8000bac:	0003      	movs	r3, r0
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f92f 	bl	8000e12 <HAL_SYSTICK_Config>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e00f      	b.n	8000bdc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d80b      	bhi.n	8000bda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f8fc 	bl	8000dc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_InitTick+0x64>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b003      	add	sp, #12
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000010 	.word	0x20000010
 8000bec:	2000000c 	.word	0x2000000c

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	18d2      	adds	r2, r2, r3
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_IncTick+0x20>)
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	20000110 	.word	0x20000110

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	@ (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	20000110 	.word	0x20000110

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	0003      	movs	r3, r0
 8000c36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001a      	movs	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	0002      	movs	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000010 	.word	0x20000010

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	0002      	movs	r2, r0
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c82:	d809      	bhi.n	8000c98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	231f      	movs	r3, #31
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_EnableIRQ+0x30>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	4091      	lsls	r1, r2
 8000c94:	000a      	movs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
  }
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cb8:	d828      	bhi.n	8000d0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cba:	4a2f      	ldr	r2, [pc, #188]	@ (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	33c0      	adds	r3, #192	@ 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	589b      	ldr	r3, [r3, r2]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	@ 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	@ 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	481f      	ldr	r0, [pc, #124]	@ (8000d78 <__NVIC_SetPriority+0xd4>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	430a      	orrs	r2, r1
 8000d04:	33c0      	adds	r3, #192	@ 0xc0
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d0a:	e031      	b.n	8000d70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0019      	movs	r1, r3
 8000d14:	230f      	movs	r3, #15
 8000d16:	400b      	ands	r3, r1
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3306      	adds	r3, #6
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	3304      	adds	r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	@ 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	@ 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	001c      	movs	r4, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	4023      	ands	r3, r4
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	430a      	orrs	r2, r1
 8000d66:	3306      	adds	r3, #6
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	18c3      	adds	r3, r0, r3
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b003      	add	sp, #12
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	045b      	lsls	r3, r3, #17
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d301      	bcc.n	8000d98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d94:	2301      	movs	r3, #1
 8000d96:	e010      	b.n	8000dba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <SysTick_Config+0x44>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2103      	movs	r1, #3
 8000da6:	0018      	movs	r0, r3
 8000da8:	f7ff ff7c 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SysTick_Config+0x44>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <SysTick_Config+0x44>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	1c02      	adds	r2, r0, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b004      	add	sp, #16
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	0002      	movs	r2, r0
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffaf 	bl	8000d80 <SysTick_Config>
 8000e22:	0003      	movs	r3, r0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e061      	b.n	8000f02 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a32      	ldr	r2, [pc, #200]	@ (8000f0c <HAL_DMA_Init+0xe0>)
 8000e44:	4694      	mov	ip, r2
 8000e46:	4463      	add	r3, ip
 8000e48:	2114      	movs	r1, #20
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff f95c 	bl	8000108 <__udivsi3>
 8000e50:	0003      	movs	r3, r0
 8000e52:	009a      	lsls	r2, r3, #2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f10 <HAL_DMA_Init+0xe4>)
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2225      	movs	r2, #37	@ 0x25
 8000e62:	2102      	movs	r1, #2
 8000e64:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4a28      	ldr	r2, [pc, #160]	@ (8000f14 <HAL_DMA_Init+0xe8>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	01db      	lsls	r3, r3, #7
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d018      	beq.n	8000eea <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eb8:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <HAL_DMA_Init+0xec>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec0:	211c      	movs	r1, #28
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	4099      	lsls	r1, r3
 8000ec8:	000b      	movs	r3, r1
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_DMA_Init+0xec>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_DMA_Init+0xec>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	201c      	movs	r0, #28
 8000ee0:	4003      	ands	r3, r0
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_DMA_Init+0xec>)
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2225      	movs	r2, #37	@ 0x25
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2224      	movs	r2, #36	@ 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b004      	add	sp, #16
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	40020000 	.word	0x40020000
 8000f14:	ffff800f 	.word	0xffff800f
 8000f18:	400200a8 	.word	0x400200a8

08000f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2317      	movs	r3, #23
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2224      	movs	r2, #36	@ 0x24
 8000f36:	5c9b      	ldrb	r3, [r3, r2]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_DMA_Start_IT+0x24>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e04f      	b.n	8000fe0 <HAL_DMA_Start_IT+0xc4>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2224      	movs	r2, #36	@ 0x24
 8000f44:	2101      	movs	r1, #1
 8000f46:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2225      	movs	r2, #37	@ 0x25
 8000f4c:	5c9b      	ldrb	r3, [r3, r2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d13a      	bne.n	8000fca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2225      	movs	r2, #37	@ 0x25
 8000f58:	2102      	movs	r1, #2
 8000f5a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	438a      	bics	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f8e3 	bl	8001144 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	210e      	movs	r1, #14
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e00f      	b.n	8000fb8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	210a      	movs	r1, #10
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e007      	b.n	8000fda <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2224      	movs	r2, #36	@ 0x24
 8000fce:	2100      	movs	r1, #0
 8000fd0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fd2:	2317      	movs	r3, #23
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000fda:	2317      	movs	r3, #23
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	781b      	ldrb	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	221c      	movs	r2, #28
 8001006:	4013      	ands	r3, r2
 8001008:	2204      	movs	r2, #4
 800100a:	409a      	lsls	r2, r3
 800100c:	0013      	movs	r3, r2
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	d026      	beq.n	8001062 <HAL_DMA_IRQHandler+0x7a>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2204      	movs	r2, #4
 8001018:	4013      	ands	r3, r2
 800101a:	d022      	beq.n	8001062 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2220      	movs	r2, #32
 8001024:	4013      	ands	r3, r2
 8001026:	d107      	bne.n	8001038 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2104      	movs	r1, #4
 8001034:	438a      	bics	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103c:	221c      	movs	r2, #28
 800103e:	401a      	ands	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	2104      	movs	r1, #4
 8001046:	4091      	lsls	r1, r2
 8001048:	000a      	movs	r2, r1
 800104a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	2b00      	cmp	r3, #0
 8001052:	d100      	bne.n	8001056 <HAL_DMA_IRQHandler+0x6e>
 8001054:	e071      	b.n	800113a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	0010      	movs	r0, r2
 800105e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001060:	e06b      	b.n	800113a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	221c      	movs	r2, #28
 8001068:	4013      	ands	r3, r2
 800106a:	2202      	movs	r2, #2
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	d02d      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xea>
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2202      	movs	r2, #2
 800107a:	4013      	ands	r3, r2
 800107c:	d029      	beq.n	80010d2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2220      	movs	r2, #32
 8001086:	4013      	ands	r3, r2
 8001088:	d10b      	bne.n	80010a2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	210a      	movs	r1, #10
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2225      	movs	r2, #37	@ 0x25
 800109e:	2101      	movs	r1, #1
 80010a0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	221c      	movs	r2, #28
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	2102      	movs	r1, #2
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2224      	movs	r2, #36	@ 0x24
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d039      	beq.n	800113a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	0010      	movs	r0, r2
 80010ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010d0:	e033      	b.n	800113a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	221c      	movs	r2, #28
 80010d8:	4013      	ands	r3, r2
 80010da:	2208      	movs	r2, #8
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	d02a      	beq.n	800113c <HAL_DMA_IRQHandler+0x154>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2208      	movs	r2, #8
 80010ea:	4013      	ands	r3, r2
 80010ec:	d026      	beq.n	800113c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	210e      	movs	r1, #14
 80010fa:	438a      	bics	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	221c      	movs	r2, #28
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	2101      	movs	r1, #1
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2225      	movs	r2, #37	@ 0x25
 800111c:	2101      	movs	r1, #1
 800111e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2224      	movs	r2, #36	@ 0x24
 8001124:	2100      	movs	r1, #0
 8001126:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	0010      	movs	r0, r2
 8001138:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	46c0      	nop			@ (mov r8, r8)
}
 800113e:	46bd      	mov	sp, r7
 8001140:	b004      	add	sp, #16
 8001142:	bd80      	pop	{r7, pc}

08001144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	221c      	movs	r2, #28
 8001158:	401a      	ands	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	2101      	movs	r1, #1
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d108      	bne.n	8001188 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001186:	e007      	b.n	8001198 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
}
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011b6:	e143      	b.n	8001440 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d100      	bne.n	80011d0 <HAL_GPIO_Init+0x30>
 80011ce:	e134      	b.n	800143a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d005      	beq.n	80011e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d130      	bne.n	800124a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121e:	2201      	movs	r2, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	2201      	movs	r2, #1
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b03      	cmp	r3, #3
 8001254:	d017      	beq.n	8001286 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d123      	bne.n	80012da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	58d3      	ldr	r3, [r2, r3]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2207      	movs	r2, #7
 80012a4:	4013      	ands	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2107      	movs	r1, #7
 80012be:	400b      	ands	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	23c0      	movs	r3, #192	@ 0xc0
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x17c>
 800131a:	e08e      	b.n	800143a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131c:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <HAL_GPIO_Init+0x2b8>)
 800131e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001320:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <HAL_GPIO_Init+0x2b8>)
 8001322:	2101      	movs	r1, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001328:	4a4c      	ldr	r2, [pc, #304]	@ (800145c <HAL_GPIO_Init+0x2bc>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	589b      	ldr	r3, [r3, r2]
 8001334:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	23a0      	movs	r3, #160	@ 0xa0
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	429a      	cmp	r2, r3
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x1d2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a41      	ldr	r2, [pc, #260]	@ (8001460 <HAL_GPIO_Init+0x2c0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x1ce>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a40      	ldr	r2, [pc, #256]	@ (8001464 <HAL_GPIO_Init+0x2c4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x1ca>
 8001366:	2302      	movs	r3, #2
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x1d4>
 800136a:	2306      	movs	r3, #6
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x1d4>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x1d4>
 8001372:	2300      	movs	r3, #0
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	2103      	movs	r1, #3
 8001378:	400a      	ands	r2, r1
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	@ (800145c <HAL_GPIO_Init+0x2bc>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	039b      	lsls	r3, r3, #14
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43da      	mvns	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	4013      	ands	r3, r2
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <HAL_GPIO_Init+0x2c8>)
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	40da      	lsrs	r2, r3
 8001448:	1e13      	subs	r3, r2, #0
 800144a:	d000      	beq.n	800144e <HAL_GPIO_Init+0x2ae>
 800144c:	e6b4      	b.n	80011b8 <HAL_GPIO_Init+0x18>
  }
}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b006      	add	sp, #24
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	50000400 	.word	0x50000400
 8001464:	50000800 	.word	0x50000800
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	0008      	movs	r0, r1
 8001476:	0011      	movs	r1, r2
 8001478:	1cbb      	adds	r3, r7, #2
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	1c7b      	adds	r3, r7, #1
 8001480:	1c0a      	adds	r2, r1, #0
 8001482:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001484:	1c7b      	adds	r3, r7, #1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148c:	1cbb      	adds	r3, r7, #2
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001496:	1cbb      	adds	r3, r7, #2
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	000a      	movs	r2, r1
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ba:	1cbb      	adds	r3, r7, #2
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4013      	ands	r3, r2
 80014c2:	041a      	lsls	r2, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	1cb9      	adds	r1, r7, #2
 80014ca:	8809      	ldrh	r1, [r1, #0]
 80014cc:	400b      	ands	r3, r1
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	46c0      	nop			@ (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b004      	add	sp, #16
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f000 fb6c 	bl	8001bc8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4bc8      	ldr	r3, [pc, #800]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	220c      	movs	r2, #12
 80014f6:	4013      	ands	r3, r2
 80014f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fa:	4bc6      	ldr	r3, [pc, #792]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x36>
 8001510:	e07d      	b.n	800160e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d007      	beq.n	8001528 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d112      	bne.n	8001544 <HAL_RCC_OscConfig+0x68>
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	429a      	cmp	r2, r3
 8001526:	d10d      	bne.n	8001544 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	4bba      	ldr	r3, [pc, #744]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x5a>
 8001534:	e06a      	b.n	800160c <HAL_RCC_OscConfig+0x130>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d166      	bne.n	800160c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	f000 fb42 	bl	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	2380      	movs	r3, #128	@ 0x80
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x84>
 8001550:	4bb0      	ldr	r3, [pc, #704]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4baf      	ldr	r3, [pc, #700]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e027      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	23a0      	movs	r3, #160	@ 0xa0
 8001566:	02db      	lsls	r3, r3, #11
 8001568:	429a      	cmp	r2, r3
 800156a:	d10e      	bne.n	800158a <HAL_RCC_OscConfig+0xae>
 800156c:	4ba9      	ldr	r3, [pc, #676]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4ba8      	ldr	r3, [pc, #672]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001572:	2180      	movs	r1, #128	@ 0x80
 8001574:	02c9      	lsls	r1, r1, #11
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	4ba6      	ldr	r3, [pc, #664]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4ba5      	ldr	r3, [pc, #660]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e012      	b.n	80015b0 <HAL_RCC_OscConfig+0xd4>
 800158a:	4ba2      	ldr	r3, [pc, #648]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4ba1      	ldr	r3, [pc, #644]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001590:	49a1      	ldr	r1, [pc, #644]	@ (8001818 <HAL_RCC_OscConfig+0x33c>)
 8001592:	400a      	ands	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4b9f      	ldr	r3, [pc, #636]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80015aa:	499c      	ldr	r1, [pc, #624]	@ (800181c <HAL_RCC_OscConfig+0x340>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb2c 	bl	8000c14 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb27 	bl	8000c14 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	@ 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2f9      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0xe6>
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb17 	bl	8000c14 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb12 	bl	8000c14 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2e4      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x110>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x13e>
 8001618:	e099      	b.n	800174e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	2220      	movs	r2, #32
 8001624:	4013      	ands	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001628:	4b7a      	ldr	r3, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b79      	ldr	r3, [pc, #484]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800162e:	2120      	movs	r1, #32
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	2220      	movs	r2, #32
 8001638:	4393      	bics	r3, r2
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d13e      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1ea>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13b      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800164e:	4b71      	ldr	r3, [pc, #452]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d004      	beq.n	8001662 <HAL_RCC_OscConfig+0x186>
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e2b2      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b6c      	ldr	r3, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x344>)
 8001668:	4013      	ands	r3, r2
 800166a:	0019      	movs	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	4b68      	ldr	r3, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2209      	movs	r2, #9
 800167e:	4393      	bics	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	4b64      	ldr	r3, [pc, #400]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168a:	f000 fbeb 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 800168e:	0001      	movs	r1, r0
 8001690:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	220f      	movs	r2, #15
 8001698:	4013      	ands	r3, r2
 800169a:	4a62      	ldr	r2, [pc, #392]	@ (8001824 <HAL_RCC_OscConfig+0x348>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	000a      	movs	r2, r1
 80016a0:	40da      	lsrs	r2, r3
 80016a2:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_RCC_OscConfig+0x34c>)
 80016a4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80016a6:	4b61      	ldr	r3, [pc, #388]	@ (800182c <HAL_RCC_OscConfig+0x350>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2513      	movs	r5, #19
 80016ac:	197c      	adds	r4, r7, r5
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff fa6a 	bl	8000b88 <HAL_InitTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016b8:	197b      	adds	r3, r7, r5
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d046      	beq.n	800174e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80016c0:	197b      	adds	r3, r7, r5
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	e280      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d027      	beq.n	800171c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016cc:	4b51      	ldr	r3, [pc, #324]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2209      	movs	r2, #9
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80016d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fa99 	bl	8000c14 <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fa94 	bl	8000c14 <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e266      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016fa:	4b46      	ldr	r3, [pc, #280]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2204      	movs	r2, #4
 8001700:	4013      	ands	r3, r2
 8001702:	d0f1      	beq.n	80016e8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a45      	ldr	r2, [pc, #276]	@ (8001820 <HAL_RCC_OscConfig+0x344>)
 800170a:	4013      	ands	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	021a      	lsls	r2, r3, #8
 8001714:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	e018      	b.n	800174e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171c:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa74 	bl	8000c14 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fa6f 	bl	8000c14 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e241      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	d1f1      	bne.n	8001732 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <HAL_RCC_OscConfig+0x27e>
 8001758:	e0a1      	b.n	800189e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d140      	bne.n	80017e2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4013      	ands	r3, r2
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x29c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e227      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <HAL_RCC_OscConfig+0x354>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	0a19      	lsrs	r1, r3, #8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	061a      	lsls	r2, r3, #24
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	0b5b      	lsrs	r3, r3, #13
 80017a6:	3301      	adds	r3, #1
 80017a8:	2280      	movs	r2, #128	@ 0x80
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	210f      	movs	r1, #15
 80017b6:	400b      	ands	r3, r1
 80017b8:	491a      	ldr	r1, [pc, #104]	@ (8001824 <HAL_RCC_OscConfig+0x348>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <HAL_RCC_OscConfig+0x34c>)
 80017c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_RCC_OscConfig+0x350>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2513      	movs	r5, #19
 80017c8:	197c      	adds	r4, r7, r5
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff f9dc 	bl	8000b88 <HAL_InitTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017d4:	197b      	adds	r3, r7, r5
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d060      	beq.n	800189e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80017dc:	197b      	adds	r3, r7, r5
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	e1f2      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03f      	beq.n	800186a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_RCC_OscConfig+0x338>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0049      	lsls	r1, r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa0c 	bl	8000c14 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001800:	e018      	b.n	8001834 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001802:	f7ff fa07 	bl	8000c14 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d911      	bls.n	8001834 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1d9      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
 8001814:	40021000 	.word	0x40021000
 8001818:	fffeffff 	.word	0xfffeffff
 800181c:	fffbffff 	.word	0xfffbffff
 8001820:	ffffe0ff 	.word	0xffffe0ff
 8001824:	08003228 	.word	0x08003228
 8001828:	20000008 	.word	0x20000008
 800182c:	2000000c 	.word	0x2000000c
 8001830:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001834:	4bc9      	ldr	r3, [pc, #804]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d0e0      	beq.n	8001802 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4bc6      	ldr	r3, [pc, #792]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	4ac6      	ldr	r2, [pc, #792]	@ (8001b60 <HAL_RCC_OscConfig+0x684>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4bc3      	ldr	r3, [pc, #780]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001854:	4bc1      	ldr	r3, [pc, #772]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	0a19      	lsrs	r1, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	061a      	lsls	r2, r3, #24
 8001862:	4bbe      	ldr	r3, [pc, #760]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	e019      	b.n	800189e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186a:	4bbc      	ldr	r3, [pc, #752]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4bbb      	ldr	r3, [pc, #748]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001870:	49bc      	ldr	r1, [pc, #752]	@ (8001b64 <HAL_RCC_OscConfig+0x688>)
 8001872:	400a      	ands	r2, r1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff f9cd 	bl	8000c14 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001880:	f7ff f9c8 	bl	8000c14 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e19a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001892:	4bb2      	ldr	r3, [pc, #712]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	@ 0x80
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2208      	movs	r2, #8
 80018a4:	4013      	ands	r3, r2
 80018a6:	d036      	beq.n	8001916 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d019      	beq.n	80018e4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b0:	4baa      	ldr	r3, [pc, #680]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80018b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b4:	4ba9      	ldr	r3, [pc, #676]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f9aa 	bl	8000c14 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c6:	f7ff f9a5 	bl	8000c14 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e177      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d8:	4ba0      	ldr	r3, [pc, #640]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80018da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f1      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3ea>
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80018e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018e8:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f990 	bl	8000c14 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff f98b 	bl	8000c14 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e15d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800190c:	4b93      	ldr	r3, [pc, #588]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800190e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d1f1      	bne.n	80018fa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x446>
 8001920:	e0ae      	b.n	8001a80 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2023      	movs	r0, #35	@ 0x23
 8001924:	183b      	adds	r3, r7, r0
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800192c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	055b      	lsls	r3, r3, #21
 8001932:	4013      	ands	r3, r2
 8001934:	d109      	bne.n	800194a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b89      	ldr	r3, [pc, #548]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800193c:	2180      	movs	r1, #128	@ 0x80
 800193e:	0549      	lsls	r1, r1, #21
 8001940:	430a      	orrs	r2, r1
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001944:	183b      	adds	r3, r7, r0
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b87      	ldr	r3, [pc, #540]	@ (8001b68 <HAL_RCC_OscConfig+0x68c>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2380      	movs	r3, #128	@ 0x80
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4013      	ands	r3, r2
 8001954:	d11a      	bne.n	800198c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b84      	ldr	r3, [pc, #528]	@ (8001b68 <HAL_RCC_OscConfig+0x68c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b83      	ldr	r3, [pc, #524]	@ (8001b68 <HAL_RCC_OscConfig+0x68c>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	0049      	lsls	r1, r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001964:	f7ff f956 	bl	8000c14 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff f951 	bl	8000c14 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	@ 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e123      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_OscConfig+0x68c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4cc>
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800199a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 800199e:	2180      	movs	r1, #128	@ 0x80
 80019a0:	0049      	lsls	r1, r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80019a6:	e031      	b.n	8001a0c <HAL_RCC_OscConfig+0x530>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x4ee>
 80019b0:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b4:	4b69      	ldr	r3, [pc, #420]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019b6:	496b      	ldr	r1, [pc, #428]	@ (8001b64 <HAL_RCC_OscConfig+0x688>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80019bc:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019c2:	496a      	ldr	r1, [pc, #424]	@ (8001b6c <HAL_RCC_OscConfig+0x690>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80019c8:	e020      	b.n	8001a0c <HAL_RCC_OscConfig+0x530>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	23a0      	movs	r3, #160	@ 0xa0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x518>
 80019d6:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019da:	4b60      	ldr	r3, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	00c9      	lsls	r1, r1, #3
 80019e0:	430a      	orrs	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80019e4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019ea:	2180      	movs	r1, #128	@ 0x80
 80019ec:	0049      	lsls	r1, r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x530>
 80019f4:	4b59      	ldr	r3, [pc, #356]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019f8:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 80019fa:	495a      	ldr	r1, [pc, #360]	@ (8001b64 <HAL_RCC_OscConfig+0x688>)
 80019fc:	400a      	ands	r2, r1
 80019fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a00:	4b56      	ldr	r3, [pc, #344]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a04:	4b55      	ldr	r3, [pc, #340]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a06:	4959      	ldr	r1, [pc, #356]	@ (8001b6c <HAL_RCC_OscConfig+0x690>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f8fe 	bl	8000c14 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a1c:	e009      	b.n	8001a32 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f8f9 	bl	8000c14 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a51      	ldr	r2, [pc, #324]	@ (8001b70 <HAL_RCC_OscConfig+0x694>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0ca      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a32:	4b4a      	ldr	r3, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0ef      	beq.n	8001a1e <HAL_RCC_OscConfig+0x542>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f8e8 	bl	8000c14 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f8e3 	bl	8000c14 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a46      	ldr	r2, [pc, #280]	@ (8001b70 <HAL_RCC_OscConfig+0x694>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0b4      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1ef      	bne.n	8001a4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a6a:	2323      	movs	r3, #35	@ 0x23
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a78:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a7a:	493e      	ldr	r1, [pc, #248]	@ (8001b74 <HAL_RCC_OscConfig+0x698>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <HAL_RCC_OscConfig+0x5ae>
 8001a88:	e09d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x5b6>
 8001a90:	e076      	b.n	8001b80 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d145      	bne.n	8001b26 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001aa0:	4935      	ldr	r1, [pc, #212]	@ (8001b78 <HAL_RCC_OscConfig+0x69c>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f8b5 	bl	8000c14 <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f8b0 	bl	8000c14 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e082      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	049b      	lsls	r3, r3, #18
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b7c <HAL_RCC_OscConfig+0x6a0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0449      	lsls	r1, r1, #17
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f88a 	bl	8000c14 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f885 	bl	8000c14 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e057      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b18:	4b10      	ldr	r3, [pc, #64]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	049b      	lsls	r3, r3, #18
 8001b20:	4013      	ands	r3, r2
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62a>
 8001b24:	e04f      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b26:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001b2c:	4912      	ldr	r1, [pc, #72]	@ (8001b78 <HAL_RCC_OscConfig+0x69c>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f86f 	bl	8000c14 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f86a 	bl	8000c14 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e03c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b4e:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	049b      	lsls	r3, r3, #18
 8001b56:	4013      	ands	r3, r2
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x660>
 8001b5a:	e034      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6ea>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	ffff1fff 	.word	0xffff1fff
 8001b64:	fffffeff 	.word	0xfffffeff
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	fffffbff 	.word	0xfffffbff
 8001b70:	00001388 	.word	0x00001388
 8001b74:	efffffff 	.word	0xefffffff
 8001b78:	feffffff 	.word	0xfeffffff
 8001b7c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_OscConfig+0x6f4>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	401a      	ands	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	23f0      	movs	r3, #240	@ 0xf0
 8001ba6:	039b      	lsls	r3, r3, #14
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	23c0      	movs	r3, #192	@ 0xc0
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b00a      	add	sp, #40	@ 0x28
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e128      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b96      	ldr	r3, [pc, #600]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d91e      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b93      	ldr	r3, [pc, #588]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	4b90      	ldr	r3, [pc, #576]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f804 	bl	8000c14 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f7fe ffff 	bl	8000c14 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4a8a      	ldr	r2, [pc, #552]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e109      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3e:	4b83      	ldr	r3, [pc, #524]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	22f0      	movs	r2, #240	@ 0xf0
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x8a>
 8001c5c:	e089      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d120      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0e1      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c7e:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d114      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0d5      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ca      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ca4:	4b69      	ldr	r3, [pc, #420]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0c2      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b65      	ldr	r3, [pc, #404]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe ffa4 	bl	8000c14 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7fe ff9b 	bl	8000c14 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a58      	ldr	r2, [pc, #352]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0a5      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cee:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_ClockConfig+0x106>
 8001cfa:	e03a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d111      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7fe ff85 	bl	8000c14 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e08f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	220c      	movs	r2, #12
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d1ef      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x132>
 8001d26:	e024      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d11b      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7fe ff6f 	bl	8000c14 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a42      	ldr	r2, [pc, #264]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e079      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x15e>
 8001d52:	e00e      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7fe ff5e 	bl	8000c14 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e068      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d21e      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d80:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d92:	f7fe ff3f 	bl	8000c14 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7fe ff3a 	bl	8000c14 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e044      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	@ (8001e50 <HAL_RCC_ClockConfig+0x27c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	4013      	ands	r3, r2
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <HAL_RCC_ClockConfig+0x280>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	00da      	lsls	r2, r3, #3
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfc:	f000 f832 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e00:	0001      	movs	r1, r0
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	220f      	movs	r2, #15
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_RCC_ClockConfig+0x284>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	000a      	movs	r2, r1
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_RCC_ClockConfig+0x288>)
 8001e16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_RCC_ClockConfig+0x28c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	250b      	movs	r5, #11
 8001e1e:	197c      	adds	r4, r7, r5
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe feb1 	bl	8000b88 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bdb0      	pop	{r4, r5, r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	40022000 	.word	0x40022000
 8001e48:	00001388 	.word	0x00001388
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	fffff8ff 	.word	0xfffff8ff
 8001e54:	ffffc7ff 	.word	0xffffc7ff
 8001e58:	08003228 	.word	0x08003228
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	2000000c 	.word	0x2000000c

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b08e      	sub	sp, #56	@ 0x38
 8001e68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e72:	230c      	movs	r3, #12
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d014      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7a:	d900      	bls.n	8001e7e <HAL_RCC_GetSysClockFreq+0x1a>
 8001e7c:	e07b      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x112>
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x24>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e86:	e076      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e88:	4b44      	ldr	r3, [pc, #272]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e94:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e96:	e07c      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e98:	4b42      	ldr	r3, [pc, #264]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e9c:	e079      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9e:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ea0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ea2:	e076      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea6:	0c9a      	lsrs	r2, r3, #18
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	401a      	ands	r2, r3
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x148>)
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb4:	0d9a      	lsrs	r2, r3, #22
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	3301      	adds	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebe:	4b37      	ldr	r3, [pc, #220]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	025b      	lsls	r3, r3, #9
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d01a      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	4a35      	ldr	r2, [pc, #212]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	69f9      	ldr	r1, [r7, #28]
 8001eda:	f7fe f9c1 	bl	8000260 <__aeabi_lmul>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	000b      	movs	r3, r1
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f7fe f995 	bl	8000220 <__aeabi_uldivmod>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	000b      	movs	r3, r1
 8001efa:	0013      	movs	r3, r2
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001efe:	e037      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	4013      	ands	r3, r2
 8001f08:	d01a      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f14:	2300      	movs	r3, #0
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	f7fe f9a1 	bl	8000260 <__aeabi_lmul>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	000b      	movs	r3, r1
 8001f22:	0010      	movs	r0, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f7fe f975 	bl	8000220 <__aeabi_uldivmod>
 8001f36:	0002      	movs	r2, r0
 8001f38:	000b      	movs	r3, r1
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3e:	e017      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f42:	0018      	movs	r0, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	0019      	movs	r1, r3
 8001f48:	4a16      	ldr	r2, [pc, #88]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f7fe f988 	bl	8000260 <__aeabi_lmul>
 8001f50:	0002      	movs	r2, r0
 8001f52:	000b      	movs	r3, r1
 8001f54:	0010      	movs	r0, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	001c      	movs	r4, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	001d      	movs	r5, r3
 8001f60:	0022      	movs	r2, r4
 8001f62:	002b      	movs	r3, r5
 8001f64:	f7fe f95c 	bl	8000220 <__aeabi_uldivmod>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	000b      	movs	r3, r1
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f74:	e00d      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x138>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0b5b      	lsrs	r3, r3, #13
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	4013      	ands	r3, r2
 8001f80:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	3301      	adds	r3, #1
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	0212      	lsls	r2, r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f90:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b00e      	add	sp, #56	@ 0x38
 8001f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	003d0900 	.word	0x003d0900
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	08003240 	.word	0x08003240

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff2 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fcc:	0001      	movs	r1, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	40d9      	lsrs	r1, r3
 8001fde:	000b      	movs	r3, r1
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08003238 	.word	0x08003238

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	0adb      	lsrs	r3, r3, #11
 8002000:	2207      	movs	r2, #7
 8002002:	4013      	ands	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	40d9      	lsrs	r1, r3
 800200a:	000b      	movs	r3, r1
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	40021000 	.word	0x40021000
 8002018:	08003238 	.word	0x08003238

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002024:	2017      	movs	r0, #23
 8002026:	183b      	adds	r3, r7, r0
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2220      	movs	r2, #32
 8002032:	4013      	ands	r3, r2
 8002034:	d100      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002036:	e0c7      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002038:	4b84      	ldr	r3, [pc, #528]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800203a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	055b      	lsls	r3, r3, #21
 8002040:	4013      	ands	r3, r2
 8002042:	d109      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b81      	ldr	r3, [pc, #516]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002048:	4b80      	ldr	r3, [pc, #512]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	0549      	lsls	r1, r1, #21
 800204e:	430a      	orrs	r2, r1
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002052:	183b      	adds	r3, r7, r0
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b7d      	ldr	r3, [pc, #500]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d11a      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002064:	4b7a      	ldr	r3, [pc, #488]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b79      	ldr	r3, [pc, #484]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe fdcf 	bl	8000c14 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7fe fdca 	bl	8000c14 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	@ 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0d9      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d0f0      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800209a:	4b6c      	ldr	r3, [pc, #432]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	23c0      	movs	r3, #192	@ 0xc0
 80020a0:	039b      	lsls	r3, r3, #14
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	039b      	lsls	r3, r3, #14
 80020ae:	4013      	ands	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d013      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	23c0      	movs	r3, #192	@ 0xc0
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	401a      	ands	r2, r3
 80020c0:	23c0      	movs	r3, #192	@ 0xc0
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d10a      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020c8:	4b60      	ldr	r3, [pc, #384]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	401a      	ands	r2, r3
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0b1      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020de:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020e2:	23c0      	movs	r3, #192	@ 0xc0
 80020e4:	029b      	lsls	r3, r3, #10
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03b      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	23c0      	movs	r3, #192	@ 0xc0
 80020f6:	029b      	lsls	r3, r3, #10
 80020f8:	4013      	ands	r3, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d033      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2220      	movs	r2, #32
 8002106:	4013      	ands	r3, r2
 8002108:	d02e      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800210a:	4b50      	ldr	r3, [pc, #320]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b4d      	ldr	r3, [pc, #308]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002118:	4b4c      	ldr	r3, [pc, #304]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0309      	lsls	r1, r1, #12
 800211e:	430a      	orrs	r2, r1
 8002120:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002122:	4b4a      	ldr	r3, [pc, #296]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002126:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002128:	494b      	ldr	r1, [pc, #300]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800212a:	400a      	ands	r2, r1
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d014      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fd69 	bl	8000c14 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002146:	e009      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fd64 	bl	8000c14 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a42      	ldr	r2, [pc, #264]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e072      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800215c:	4b3b      	ldr	r3, [pc, #236]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800215e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d0ef      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2220      	movs	r2, #32
 800216e:	4013      	ands	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	029b      	lsls	r3, r3, #10
 800217a:	401a      	ands	r2, r3
 800217c:	23c0      	movs	r3, #192	@ 0xc0
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	429a      	cmp	r2, r3
 8002182:	d10c      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002184:	4b31      	ldr	r3, [pc, #196]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a35      	ldr	r2, [pc, #212]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	23c0      	movs	r3, #192	@ 0xc0
 8002194:	039b      	lsls	r3, r3, #14
 8002196:	401a      	ands	r2, r3
 8002198:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	23c0      	movs	r3, #192	@ 0xc0
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	401a      	ands	r2, r3
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b23      	ldr	r3, [pc, #140]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021c2:	4928      	ldr	r1, [pc, #160]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	220c      	movs	r2, #12
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2204      	movs	r2, #4
 80021ec:	4013      	ands	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002200:	430a      	orrs	r2, r1
 8002202:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2208      	movs	r2, #8
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a16      	ldr	r2, [pc, #88]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800221e:	430a      	orrs	r2, r1
 8002220:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2280      	movs	r2, #128	@ 0x80
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800223c:	430a      	orrs	r2, r1
 800223e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b006      	add	sp, #24
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	fffcffff 	.word	0xfffcffff
 8002258:	fff7ffff 	.word	0xfff7ffff
 800225c:	00001388 	.word	0x00001388
 8002260:	ffcfffff 	.word	0xffcfffff
 8002264:	efffffff 	.word	0xefffffff
 8002268:	fffff3ff 	.word	0xfffff3ff
 800226c:	ffffcfff 	.word	0xffffcfff
 8002270:	fff3ffff 	.word	0xfff3ffff

08002274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e044      	b.n	8002310 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2278      	movs	r2, #120	@ 0x78
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f7fe fb59 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2224      	movs	r2, #36	@ 0x24
 80022a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	438a      	bics	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f94a 	bl	8002550 <UART_SetConfig>
 80022bc:	0003      	movs	r3, r0
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e024      	b.n	8002310 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 fb87 	bl	80029e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	490d      	ldr	r1, [pc, #52]	@ (8002318 <HAL_UART_Init+0xa4>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	212a      	movs	r1, #42	@ 0x2a
 80022f2:	438a      	bics	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fc1f 	bl	8002b4c <UART_CheckIdleState>
 800230e:	0003      	movs	r3, r0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}
 8002318:	ffffb7ff 	.word	0xffffb7ff

0800231c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002330:	2b20      	cmp	r3, #32
 8002332:	d000      	beq.n	8002336 <HAL_UART_Transmit+0x1a>
 8002334:	e08c      	b.n	8002450 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_UART_Transmit+0x28>
 800233c:	1dbb      	adds	r3, r7, #6
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e084      	b.n	8002452 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	015b      	lsls	r3, r3, #5
 8002350:	429a      	cmp	r2, r3
 8002352:	d109      	bne.n	8002368 <HAL_UART_Transmit+0x4c>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2201      	movs	r2, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d001      	beq.n	8002368 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e074      	b.n	8002452 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2284      	movs	r2, #132	@ 0x84
 800236c:	2100      	movs	r1, #0
 800236e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe fc4d 	bl	8000c14 <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1dba      	adds	r2, r7, #6
 8002382:	2150      	movs	r1, #80	@ 0x50
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1dba      	adds	r2, r7, #6
 800238c:	2152      	movs	r1, #82	@ 0x52
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	429a      	cmp	r2, r3
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Transmit+0x94>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b8:	e02f      	b.n	800241a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0013      	movs	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	f000 fc68 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d004      	beq.n	80023da <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e03b      	b.n	8002452 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	001a      	movs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	05d2      	lsls	r2, r2, #23
 80023ec:	0dd2      	lsrs	r2, r2, #23
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	3302      	adds	r3, #2
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	e007      	b.n	8002408 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2252      	movs	r2, #82	@ 0x52
 800240c:	5a9b      	ldrh	r3, [r3, r2]
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b299      	uxth	r1, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2252      	movs	r2, #82	@ 0x52
 8002418:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2252      	movs	r2, #82	@ 0x52
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1c9      	bne.n	80023ba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	0013      	movs	r3, r2
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	@ 0x40
 8002434:	f000 fc32 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d004      	beq.n	8002446 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e005      	b.n	8002452 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b008      	add	sp, #32
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	1dbb      	adds	r3, r7, #6
 8002468:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2280      	movs	r2, #128	@ 0x80
 800246e:	589b      	ldr	r3, [r3, r2]
 8002470:	2b20      	cmp	r3, #32
 8002472:	d14a      	bne.n	800250a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_Receive_DMA+0x26>
 800247a:	1dbb      	adds	r3, r7, #6
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e042      	b.n	800250c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	429a      	cmp	r2, r3
 8002490:	d109      	bne.n	80024a6 <HAL_UART_Receive_DMA+0x4a>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	d001      	beq.n	80024a6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e032      	b.n	800250c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a18      	ldr	r2, [pc, #96]	@ (8002514 <HAL_UART_Receive_DMA+0xb8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d020      	beq.n	80024f8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	041b      	lsls	r3, r3, #16
 80024c0:	4013      	ands	r3, r2
 80024c2:	d019      	beq.n	80024f8 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c4:	f3ef 8310 	mrs	r3, PRIMASK
 80024c8:	613b      	str	r3, [r7, #16]
  return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	2301      	movs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f383 8810 	msr	PRIMASK, r3
}
 80024d8:	46c0      	nop			@ (mov r8, r8)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2180      	movs	r1, #128	@ 0x80
 80024e6:	04c9      	lsls	r1, r1, #19
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f383 8810 	msr	PRIMASK, r3
}
 80024f6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fc35 	bl	8002d70 <UART_Start_Receive_DMA>
 8002506:	0003      	movs	r3, r0
 8002508:	e000      	b.n	800250c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
  }
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b008      	add	sp, #32
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40004800 	.word	0x40004800

08002518 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b002      	add	sp, #8
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	000a      	movs	r2, r1
 8002542:	1cbb      	adds	r3, r7, #2
 8002544:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b08e      	sub	sp, #56	@ 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002558:	231a      	movs	r3, #26
 800255a:	2218      	movs	r2, #24
 800255c:	189b      	adds	r3, r3, r2
 800255e:	19db      	adds	r3, r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	431a      	orrs	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	431a      	orrs	r2, r3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4313      	orrs	r3, r2
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4ab4      	ldr	r2, [pc, #720]	@ (8002854 <UART_SetConfig+0x304>)
 8002584:	4013      	ands	r3, r2
 8002586:	0019      	movs	r1, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4aaf      	ldr	r2, [pc, #700]	@ (8002858 <UART_SetConfig+0x308>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4aa9      	ldr	r2, [pc, #676]	@ (800285c <UART_SetConfig+0x30c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025c0:	4313      	orrs	r3, r2
 80025c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4aa5      	ldr	r2, [pc, #660]	@ (8002860 <UART_SetConfig+0x310>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4aa1      	ldr	r2, [pc, #644]	@ (8002864 <UART_SetConfig+0x314>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d131      	bne.n	8002648 <UART_SetConfig+0xf8>
 80025e4:	4ba0      	ldr	r3, [pc, #640]	@ (8002868 <UART_SetConfig+0x318>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	220c      	movs	r2, #12
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d01d      	beq.n	800262c <UART_SetConfig+0xdc>
 80025f0:	d823      	bhi.n	800263a <UART_SetConfig+0xea>
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d00c      	beq.n	8002610 <UART_SetConfig+0xc0>
 80025f6:	d820      	bhi.n	800263a <UART_SetConfig+0xea>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <UART_SetConfig+0xb2>
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00e      	beq.n	800261e <UART_SetConfig+0xce>
 8002600:	e01b      	b.n	800263a <UART_SetConfig+0xea>
 8002602:	231b      	movs	r3, #27
 8002604:	2218      	movs	r2, #24
 8002606:	189b      	adds	r3, r3, r2
 8002608:	19db      	adds	r3, r3, r7
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e065      	b.n	80026dc <UART_SetConfig+0x18c>
 8002610:	231b      	movs	r3, #27
 8002612:	2218      	movs	r2, #24
 8002614:	189b      	adds	r3, r3, r2
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e05e      	b.n	80026dc <UART_SetConfig+0x18c>
 800261e:	231b      	movs	r3, #27
 8002620:	2218      	movs	r2, #24
 8002622:	189b      	adds	r3, r3, r2
 8002624:	19db      	adds	r3, r3, r7
 8002626:	2204      	movs	r2, #4
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e057      	b.n	80026dc <UART_SetConfig+0x18c>
 800262c:	231b      	movs	r3, #27
 800262e:	2218      	movs	r2, #24
 8002630:	189b      	adds	r3, r3, r2
 8002632:	19db      	adds	r3, r3, r7
 8002634:	2208      	movs	r2, #8
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e050      	b.n	80026dc <UART_SetConfig+0x18c>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2210      	movs	r2, #16
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e049      	b.n	80026dc <UART_SetConfig+0x18c>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a83      	ldr	r2, [pc, #524]	@ (800285c <UART_SetConfig+0x30c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d13e      	bne.n	80026d0 <UART_SetConfig+0x180>
 8002652:	4b85      	ldr	r3, [pc, #532]	@ (8002868 <UART_SetConfig+0x318>)
 8002654:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002656:	23c0      	movs	r3, #192	@ 0xc0
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	4013      	ands	r3, r2
 800265c:	22c0      	movs	r2, #192	@ 0xc0
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	4293      	cmp	r3, r2
 8002662:	d027      	beq.n	80026b4 <UART_SetConfig+0x164>
 8002664:	22c0      	movs	r2, #192	@ 0xc0
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	4293      	cmp	r3, r2
 800266a:	d82a      	bhi.n	80026c2 <UART_SetConfig+0x172>
 800266c:	2280      	movs	r2, #128	@ 0x80
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	4293      	cmp	r3, r2
 8002672:	d011      	beq.n	8002698 <UART_SetConfig+0x148>
 8002674:	2280      	movs	r2, #128	@ 0x80
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	4293      	cmp	r3, r2
 800267a:	d822      	bhi.n	80026c2 <UART_SetConfig+0x172>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <UART_SetConfig+0x13a>
 8002680:	2280      	movs	r2, #128	@ 0x80
 8002682:	00d2      	lsls	r2, r2, #3
 8002684:	4293      	cmp	r3, r2
 8002686:	d00e      	beq.n	80026a6 <UART_SetConfig+0x156>
 8002688:	e01b      	b.n	80026c2 <UART_SetConfig+0x172>
 800268a:	231b      	movs	r3, #27
 800268c:	2218      	movs	r2, #24
 800268e:	189b      	adds	r3, r3, r2
 8002690:	19db      	adds	r3, r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e021      	b.n	80026dc <UART_SetConfig+0x18c>
 8002698:	231b      	movs	r3, #27
 800269a:	2218      	movs	r2, #24
 800269c:	189b      	adds	r3, r3, r2
 800269e:	19db      	adds	r3, r3, r7
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e01a      	b.n	80026dc <UART_SetConfig+0x18c>
 80026a6:	231b      	movs	r3, #27
 80026a8:	2218      	movs	r2, #24
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	19db      	adds	r3, r3, r7
 80026ae:	2204      	movs	r2, #4
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e013      	b.n	80026dc <UART_SetConfig+0x18c>
 80026b4:	231b      	movs	r3, #27
 80026b6:	2218      	movs	r2, #24
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	19db      	adds	r3, r3, r7
 80026bc:	2208      	movs	r2, #8
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e00c      	b.n	80026dc <UART_SetConfig+0x18c>
 80026c2:	231b      	movs	r3, #27
 80026c4:	2218      	movs	r2, #24
 80026c6:	189b      	adds	r3, r3, r2
 80026c8:	19db      	adds	r3, r3, r7
 80026ca:	2210      	movs	r2, #16
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e005      	b.n	80026dc <UART_SetConfig+0x18c>
 80026d0:	231b      	movs	r3, #27
 80026d2:	2218      	movs	r2, #24
 80026d4:	189b      	adds	r3, r3, r2
 80026d6:	19db      	adds	r3, r3, r7
 80026d8:	2210      	movs	r2, #16
 80026da:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a5e      	ldr	r2, [pc, #376]	@ (800285c <UART_SetConfig+0x30c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d000      	beq.n	80026e8 <UART_SetConfig+0x198>
 80026e6:	e084      	b.n	80027f2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026e8:	231b      	movs	r3, #27
 80026ea:	2218      	movs	r2, #24
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	19db      	adds	r3, r3, r7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d01d      	beq.n	8002732 <UART_SetConfig+0x1e2>
 80026f6:	dc20      	bgt.n	800273a <UART_SetConfig+0x1ea>
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d015      	beq.n	8002728 <UART_SetConfig+0x1d8>
 80026fc:	dc1d      	bgt.n	800273a <UART_SetConfig+0x1ea>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <UART_SetConfig+0x1b8>
 8002702:	2b02      	cmp	r3, #2
 8002704:	d005      	beq.n	8002712 <UART_SetConfig+0x1c2>
 8002706:	e018      	b.n	800273a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002708:	f7ff fc5c 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 800270c:	0003      	movs	r3, r0
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002710:	e01c      	b.n	800274c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002712:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <UART_SetConfig+0x318>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2210      	movs	r2, #16
 8002718:	4013      	ands	r3, r2
 800271a:	d002      	beq.n	8002722 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <UART_SetConfig+0x31c>)
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002720:	e014      	b.n	800274c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002722:	4b53      	ldr	r3, [pc, #332]	@ (8002870 <UART_SetConfig+0x320>)
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002726:	e011      	b.n	800274c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002728:	f7ff fb9c 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 800272c:	0003      	movs	r3, r0
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002730:	e00c      	b.n	800274c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002738:	e008      	b.n	800274c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800273e:	231a      	movs	r3, #26
 8002740:	2218      	movs	r2, #24
 8002742:	189b      	adds	r3, r3, r2
 8002744:	19db      	adds	r3, r3, r7
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
        break;
 800274a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <UART_SetConfig+0x204>
 8002752:	e12f      	b.n	80029b4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	0013      	movs	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	189b      	adds	r3, r3, r2
 800275e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002760:	429a      	cmp	r2, r3
 8002762:	d305      	bcc.n	8002770 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800276a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276c:	429a      	cmp	r2, r3
 800276e:	d906      	bls.n	800277e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002770:	231a      	movs	r3, #26
 8002772:	2218      	movs	r2, #24
 8002774:	189b      	adds	r3, r3, r2
 8002776:	19db      	adds	r3, r3, r7
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e11a      	b.n	80029b4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	000b      	movs	r3, r1
 800278c:	0e1b      	lsrs	r3, r3, #24
 800278e:	0010      	movs	r0, r2
 8002790:	0205      	lsls	r5, r0, #8
 8002792:	431d      	orrs	r5, r3
 8002794:	000b      	movs	r3, r1
 8002796:	021c      	lsls	r4, r3, #8
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68b8      	ldr	r0, [r7, #8]
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	1900      	adds	r0, r0, r4
 80027aa:	4169      	adcs	r1, r5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f7fd fd31 	bl	8000220 <__aeabi_uldivmod>
 80027be:	0002      	movs	r2, r0
 80027c0:	000b      	movs	r3, r1
 80027c2:	0013      	movs	r3, r2
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027c8:	23c0      	movs	r3, #192	@ 0xc0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d309      	bcc.n	80027e4 <UART_SetConfig+0x294>
 80027d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	035b      	lsls	r3, r3, #13
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d204      	bcs.n	80027e4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e0e7      	b.n	80029b4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80027e4:	231a      	movs	r3, #26
 80027e6:	2218      	movs	r2, #24
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	19db      	adds	r3, r3, r7
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e0e0      	b.n	80029b4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d000      	beq.n	8002800 <UART_SetConfig+0x2b0>
 80027fe:	e082      	b.n	8002906 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002800:	231b      	movs	r3, #27
 8002802:	2218      	movs	r2, #24
 8002804:	189b      	adds	r3, r3, r2
 8002806:	19db      	adds	r3, r3, r7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d834      	bhi.n	8002878 <UART_SetConfig+0x328>
 800280e:	009a      	lsls	r2, r3, #2
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <UART_SetConfig+0x324>)
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002818:	f7ff fbd4 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 800281c:	0003      	movs	r3, r0
 800281e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002820:	e033      	b.n	800288a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002822:	f7ff fbe5 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8002826:	0003      	movs	r3, r0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800282a:	e02e      	b.n	800288a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800282c:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <UART_SetConfig+0x318>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	4013      	ands	r3, r2
 8002834:	d002      	beq.n	800283c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002836:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <UART_SetConfig+0x31c>)
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800283a:	e026      	b.n	800288a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800283c:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <UART_SetConfig+0x320>)
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002840:	e023      	b.n	800288a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002842:	f7ff fb0f 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8002846:	0003      	movs	r3, r0
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800284a:	e01e      	b.n	800288a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002852:	e01a      	b.n	800288a <UART_SetConfig+0x33a>
 8002854:	efff69f3 	.word	0xefff69f3
 8002858:	ffffcfff 	.word	0xffffcfff
 800285c:	40004800 	.word	0x40004800
 8002860:	fffff4ff 	.word	0xfffff4ff
 8002864:	40004400 	.word	0x40004400
 8002868:	40021000 	.word	0x40021000
 800286c:	003d0900 	.word	0x003d0900
 8002870:	00f42400 	.word	0x00f42400
 8002874:	0800324c 	.word	0x0800324c
      default:
        pclk = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800287c:	231a      	movs	r3, #26
 800287e:	2218      	movs	r2, #24
 8002880:	189b      	adds	r3, r3, r2
 8002882:	19db      	adds	r3, r3, r7
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
        break;
 8002888:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d100      	bne.n	8002892 <UART_SetConfig+0x342>
 8002890:	e090      	b.n	80029b4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	005a      	lsls	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	18d2      	adds	r2, r2, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7fd fc2f 	bl	8000108 <__udivsi3>
 80028aa:	0003      	movs	r3, r0
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d921      	bls.n	80028f8 <UART_SetConfig+0x3a8>
 80028b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	025b      	lsls	r3, r3, #9
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d21c      	bcs.n	80028f8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	200e      	movs	r0, #14
 80028c4:	2418      	movs	r4, #24
 80028c6:	1903      	adds	r3, r0, r4
 80028c8:	19db      	adds	r3, r3, r7
 80028ca:	210f      	movs	r1, #15
 80028cc:	438a      	bics	r2, r1
 80028ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2207      	movs	r2, #7
 80028d8:	4013      	ands	r3, r2
 80028da:	b299      	uxth	r1, r3
 80028dc:	1903      	adds	r3, r0, r4
 80028de:	19db      	adds	r3, r3, r7
 80028e0:	1902      	adds	r2, r0, r4
 80028e2:	19d2      	adds	r2, r2, r7
 80028e4:	8812      	ldrh	r2, [r2, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1902      	adds	r2, r0, r4
 80028f0:	19d2      	adds	r2, r2, r7
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	e05d      	b.n	80029b4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80028f8:	231a      	movs	r3, #26
 80028fa:	2218      	movs	r2, #24
 80028fc:	189b      	adds	r3, r3, r2
 80028fe:	19db      	adds	r3, r3, r7
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e056      	b.n	80029b4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002906:	231b      	movs	r3, #27
 8002908:	2218      	movs	r2, #24
 800290a:	189b      	adds	r3, r3, r2
 800290c:	19db      	adds	r3, r3, r7
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d822      	bhi.n	800295a <UART_SetConfig+0x40a>
 8002914:	009a      	lsls	r2, r3, #2
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <UART_SetConfig+0x484>)
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800291e:	f7ff fb51 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8002922:	0003      	movs	r3, r0
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002926:	e021      	b.n	800296c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002928:	f7ff fb62 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 800292c:	0003      	movs	r3, r0
 800292e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002930:	e01c      	b.n	800296c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002932:	4b29      	ldr	r3, [pc, #164]	@ (80029d8 <UART_SetConfig+0x488>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	4013      	ands	r3, r2
 800293a:	d002      	beq.n	8002942 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800293c:	4b27      	ldr	r3, [pc, #156]	@ (80029dc <UART_SetConfig+0x48c>)
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002940:	e014      	b.n	800296c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002942:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <UART_SetConfig+0x490>)
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002946:	e011      	b.n	800296c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002948:	f7ff fa8c 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 800294c:	0003      	movs	r3, r0
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002950:	e00c      	b.n	800296c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002958:	e008      	b.n	800296c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800295e:	231a      	movs	r3, #26
 8002960:	2218      	movs	r2, #24
 8002962:	189b      	adds	r3, r3, r2
 8002964:	19db      	adds	r3, r3, r7
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
        break;
 800296a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	085a      	lsrs	r2, r3, #1
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	18d2      	adds	r2, r2, r3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0019      	movs	r1, r3
 8002982:	0010      	movs	r0, r2
 8002984:	f7fd fbc0 	bl	8000108 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2b0f      	cmp	r3, #15
 8002990:	d90a      	bls.n	80029a8 <UART_SetConfig+0x458>
 8002992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	429a      	cmp	r2, r3
 800299a:	d205      	bcs.n	80029a8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	b29a      	uxth	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	e005      	b.n	80029b4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80029a8:	231a      	movs	r3, #26
 80029aa:	2218      	movs	r2, #24
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2200      	movs	r2, #0
 80029b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2200      	movs	r2, #0
 80029be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80029c0:	231a      	movs	r3, #26
 80029c2:	2218      	movs	r2, #24
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	19db      	adds	r3, r3, r7
 80029c8:	781b      	ldrb	r3, [r3, #0]
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b00e      	add	sp, #56	@ 0x38
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	08003270 	.word	0x08003270
 80029d8:	40021000 	.word	0x40021000
 80029dc:	003d0900 	.word	0x003d0900
 80029e0:	00f42400 	.word	0x00f42400

080029e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002b28 <UART_AdvFeatureConfig+0x144>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a43      	ldr	r2, [pc, #268]	@ (8002b2c <UART_AdvFeatureConfig+0x148>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	2204      	movs	r2, #4
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a3b      	ldr	r2, [pc, #236]	@ (8002b30 <UART_AdvFeatureConfig+0x14c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a34      	ldr	r2, [pc, #208]	@ (8002b34 <UART_AdvFeatureConfig+0x150>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00b      	beq.n	8002a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	@ (8002b38 <UART_AdvFeatureConfig+0x154>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d00b      	beq.n	8002ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4a25      	ldr	r2, [pc, #148]	@ (8002b3c <UART_AdvFeatureConfig+0x158>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	0019      	movs	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	2240      	movs	r2, #64	@ 0x40
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <UART_AdvFeatureConfig+0x15c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	035b      	lsls	r3, r3, #13
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10b      	bne.n	8002afe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <UART_AdvFeatureConfig+0x160>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b48 <UART_AdvFeatureConfig+0x164>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  }
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	fffdffff 	.word	0xfffdffff
 8002b2c:	fffeffff 	.word	0xfffeffff
 8002b30:	fffbffff 	.word	0xfffbffff
 8002b34:	ffff7fff 	.word	0xffff7fff
 8002b38:	ffffefff 	.word	0xffffefff
 8002b3c:	ffffdfff 	.word	0xffffdfff
 8002b40:	ffefffff 	.word	0xffefffff
 8002b44:	ff9fffff 	.word	0xff9fffff
 8002b48:	fff7ffff 	.word	0xfff7ffff

08002b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b092      	sub	sp, #72	@ 0x48
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2284      	movs	r2, #132	@ 0x84
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b5c:	f7fe f85a 	bl	8000c14 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d12c      	bne.n	8002bcc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	0391      	lsls	r1, r2, #14
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4a46      	ldr	r2, [pc, #280]	@ (8002c94 <UART_CheckIdleState+0x148>)
 8002b7c:	9200      	str	r2, [sp, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f000 f88c 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d021      	beq.n	8002bcc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b92:	2301      	movs	r3, #1
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	438a      	bics	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2278      	movs	r2, #120	@ 0x78
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e05f      	b.n	8002c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d146      	bne.n	8002c68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bdc:	2280      	movs	r2, #128	@ 0x80
 8002bde:	03d1      	lsls	r1, r2, #15
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c94 <UART_CheckIdleState+0x148>)
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f000 f858 	bl	8002c9c <UART_WaitOnFlagUntilTimeout>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d03b      	beq.n	8002c68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4921      	ldr	r1, [pc, #132]	@ (8002c98 <UART_CheckIdleState+0x14c>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f383 8810 	msr	PRIMASK, r3
}
 8002c20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c22:	f3ef 8310 	mrs	r3, PRIMASK
 8002c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f383 8810 	msr	PRIMASK, r3
}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2278      	movs	r2, #120	@ 0x78
 8002c60:	2100      	movs	r1, #0
 8002c62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e011      	b.n	8002c8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	@ 0x80
 8002c72:	2120      	movs	r1, #32
 8002c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2278      	movs	r2, #120	@ 0x78
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b010      	add	sp, #64	@ 0x40
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	01ffffff 	.word	0x01ffffff
 8002c98:	fffffedf 	.word	0xfffffedf

08002c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cac:	e04b      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	d048      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb4:	f7fd ffae 	bl	8000c14 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04b      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d035      	beq.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d111      	bne.n	8002d0c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2208      	movs	r2, #8
 8002cee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 f900 	bl	8002ef8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2284      	movs	r2, #132	@ 0x84
 8002cfc:	2108      	movs	r1, #8
 8002cfe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2278      	movs	r2, #120	@ 0x78
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02c      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	401a      	ands	r2, r3
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d112      	bne.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f8e3 	bl	8002ef8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2284      	movs	r2, #132	@ 0x84
 8002d36:	2120      	movs	r1, #32
 8002d38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2278      	movs	r2, #120	@ 0x78
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e00f      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	425a      	negs	r2, r3
 8002d56:	4153      	adcs	r3, r2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d0a4      	beq.n	8002cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b004      	add	sp, #16
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b090      	sub	sp, #64	@ 0x40
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	1dbb      	adds	r3, r7, #6
 8002d7c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1dba      	adds	r2, r7, #6
 8002d88:	2158      	movs	r1, #88	@ 0x58
 8002d8a:	8812      	ldrh	r2, [r2, #0]
 8002d8c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2284      	movs	r2, #132	@ 0x84
 8002d92:	2100      	movs	r1, #0
 8002d94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	2122      	movs	r1, #34	@ 0x22
 8002d9c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea4 <UART_Start_Receive_DMA+0x134>)
 8002dac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea8 <UART_Start_Receive_DMA+0x138>)
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	4a3c      	ldr	r2, [pc, #240]	@ (8002eac <UART_Start_Receive_DMA+0x13c>)
 8002dbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3324      	adds	r3, #36	@ 0x24
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	f7fe f89e 	bl	8000f1c <HAL_DMA_Start_IT>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d009      	beq.n	8002df8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2284      	movs	r2, #132	@ 0x84
 8002de8:	2110      	movs	r1, #16
 8002dea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	2120      	movs	r1, #32
 8002df2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e050      	b.n	8002e9a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d019      	beq.n	8002e34 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e00:	f3ef 8310 	mrs	r3, PRIMASK
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	0049      	lsls	r1, r1, #1
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e34:	f3ef 8310 	mrs	r3, PRIMASK
 8002e38:	613b      	str	r3, [r7, #16]
  return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f383 8810 	msr	PRIMASK, r3
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e66:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e6c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e70:	2301      	movs	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	f383 8810 	msr	PRIMASK, r3
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2140      	movs	r1, #64	@ 0x40
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b010      	add	sp, #64	@ 0x40
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	08002fc1 	.word	0x08002fc1
 8002ea8:	080030f1 	.word	0x080030f1
 8002eac:	08003133 	.word	0x08003133

08002eb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	21c0      	movs	r1, #192	@ 0xc0
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b006      	add	sp, #24
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08e      	sub	sp, #56	@ 0x38
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f00:	f3ef 8310 	mrs	r3, PRIMASK
 8002f04:	617b      	str	r3, [r7, #20]
  return(result);
 8002f06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4926      	ldr	r1, [pc, #152]	@ (8002fbc <UART_EndRxTransfer+0xc4>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f383 8810 	msr	PRIMASK, r3
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f32:	f3ef 8310 	mrs	r3, PRIMASK
 8002f36:	623b      	str	r3, [r7, #32]
  return(result);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	f383 8810 	msr	PRIMASK, r3
}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	438a      	bics	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5e:	f383 8810 	msr	PRIMASK, r3
}
 8002f62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d118      	bne.n	8002f9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f76:	2301      	movs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f383 8810 	msr	PRIMASK, r3
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2110      	movs	r1, #16
 8002f8e:	438a      	bics	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f383 8810 	msr	PRIMASK, r3
}
 8002f9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2280      	movs	r2, #128	@ 0x80
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b00e      	add	sp, #56	@ 0x38
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	fffffedf 	.word	0xfffffedf

08002fc0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b094      	sub	sp, #80	@ 0x50
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d16f      	bne.n	80030ba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fdc:	225a      	movs	r2, #90	@ 0x5a
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fe8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fec:	2301      	movs	r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	493a      	ldr	r1, [pc, #232]	@ (80030ec <UART_DMAReceiveCplt+0x12c>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800300a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003014:	f3ef 8310 	mrs	r3, PRIMASK
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	647b      	str	r3, [r7, #68]	@ 0x44
 800301e:	2301      	movs	r3, #1
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003050:	2301      	movs	r3, #1
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	f383 8810 	msr	PRIMASK, r3
}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2140      	movs	r1, #64	@ 0x40
 8003068:	438a      	bics	r2, r1
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800306e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307a:	2280      	movs	r2, #128	@ 0x80
 800307c:	2120      	movs	r1, #32
 800307e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003084:	2b01      	cmp	r3, #1
 8003086:	d118      	bne.n	80030ba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	60fb      	str	r3, [r7, #12]
  return(result);
 800308e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003092:	2301      	movs	r3, #1
 8003094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	2200      	movs	r2, #0
 80030be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d108      	bne.n	80030da <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ca:	2258      	movs	r2, #88	@ 0x58
 80030cc:	5a9a      	ldrh	r2, [r3, r2]
 80030ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff fa30 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030d8:	e003      	b.n	80030e2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80030da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030dc:	0018      	movs	r0, r3
 80030de:	f7fd fbef 	bl	80008c0 <HAL_UART_RxCpltCallback>
}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b014      	add	sp, #80	@ 0x50
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	fffffeff 	.word	0xfffffeff

080030f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10a      	bne.n	8003122 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2258      	movs	r2, #88	@ 0x58
 8003110:	5a9b      	ldrh	r3, [r3, r2]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0011      	movs	r1, r2
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fa0c 	bl	8002538 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003120:	e003      	b.n	800312a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff f9f7 	bl	8002518 <HAL_UART_RxHalfCpltCallback>
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003144:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2280      	movs	r2, #128	@ 0x80
 8003156:	4013      	ands	r3, r2
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d10a      	bne.n	8003172 <UART_DMAError+0x40>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b21      	cmp	r3, #33	@ 0x21
 8003160:	d107      	bne.n	8003172 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2252      	movs	r2, #82	@ 0x52
 8003166:	2100      	movs	r1, #0
 8003168:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff fe9f 	bl	8002eb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	4013      	ands	r3, r2
 800317c:	2b40      	cmp	r3, #64	@ 0x40
 800317e:	d10a      	bne.n	8003196 <UART_DMAError+0x64>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b22      	cmp	r3, #34	@ 0x22
 8003184:	d107      	bne.n	8003196 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	225a      	movs	r2, #90	@ 0x5a
 800318a:	2100      	movs	r1, #0
 800318c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff feb1 	bl	8002ef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2284      	movs	r2, #132	@ 0x84
 800319a:	589b      	ldr	r3, [r3, r2]
 800319c:	2210      	movs	r2, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2184      	movs	r1, #132	@ 0x84
 80031a4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7ff f9bd 	bl	8002528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b006      	add	sp, #24
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <memset>:
 80031b6:	0003      	movs	r3, r0
 80031b8:	1882      	adds	r2, r0, r2
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d100      	bne.n	80031c0 <memset+0xa>
 80031be:	4770      	bx	lr
 80031c0:	7019      	strb	r1, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	e7f9      	b.n	80031ba <memset+0x4>
	...

080031c8 <__libc_init_array>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	2600      	movs	r6, #0
 80031cc:	4c0c      	ldr	r4, [pc, #48]	@ (8003200 <__libc_init_array+0x38>)
 80031ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003204 <__libc_init_array+0x3c>)
 80031d0:	1b64      	subs	r4, r4, r5
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	42a6      	cmp	r6, r4
 80031d6:	d109      	bne.n	80031ec <__libc_init_array+0x24>
 80031d8:	2600      	movs	r6, #0
 80031da:	f000 f819 	bl	8003210 <_init>
 80031de:	4c0a      	ldr	r4, [pc, #40]	@ (8003208 <__libc_init_array+0x40>)
 80031e0:	4d0a      	ldr	r5, [pc, #40]	@ (800320c <__libc_init_array+0x44>)
 80031e2:	1b64      	subs	r4, r4, r5
 80031e4:	10a4      	asrs	r4, r4, #2
 80031e6:	42a6      	cmp	r6, r4
 80031e8:	d105      	bne.n	80031f6 <__libc_init_array+0x2e>
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	00b3      	lsls	r3, r6, #2
 80031ee:	58eb      	ldr	r3, [r5, r3]
 80031f0:	4798      	blx	r3
 80031f2:	3601      	adds	r6, #1
 80031f4:	e7ee      	b.n	80031d4 <__libc_init_array+0xc>
 80031f6:	00b3      	lsls	r3, r6, #2
 80031f8:	58eb      	ldr	r3, [r5, r3]
 80031fa:	4798      	blx	r3
 80031fc:	3601      	adds	r6, #1
 80031fe:	e7f2      	b.n	80031e6 <__libc_init_array+0x1e>
 8003200:	0800329c 	.word	0x0800329c
 8003204:	0800329c 	.word	0x0800329c
 8003208:	080032a0 	.word	0x080032a0
 800320c:	0800329c 	.word	0x0800329c

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
