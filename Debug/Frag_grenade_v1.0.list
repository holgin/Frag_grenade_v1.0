
Frag_grenade_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002554  08002554  00003554  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002578  08002578  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002578  08002578  00003578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002580  08002580  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00003580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002588  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08002598  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08002598  0000418c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119d2  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002914  00000000  00000000  00015a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00018320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b87  00000000  00000000  00018e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001156d  00000000  00000000  000199df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e76  00000000  00000000  0002af4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000687dd  00000000  00000000  0003edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a759f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d7c  00000000  00000000  000a75e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00006931  00000000  00000000  000a9360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000afc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800253c 	.word	0x0800253c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800253c 	.word	0x0800253c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004a8:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004aa:	2101      	movs	r1, #1
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004ae:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004b2:	430a      	orrs	r2, r1
 80004b4:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ba:	400b      	ands	r3, r1
 80004bc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004be:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004c2:	f000 fb87 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004c6:	200a      	movs	r0, #10
 80004c8:	f000 fbae 	bl	8000c28 <HAL_NVIC_EnableIRQ>

}
 80004cc:	bd07      	pop	{r0, r1, r2, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	2502      	movs	r5, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80004da:	26a0      	movs	r6, #160	@ 0xa0
{
 80004dc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2214      	movs	r2, #20
 80004e0:	2100      	movs	r1, #0
 80004e2:	a803      	add	r0, sp, #12
 80004e4:	f001 fffd 	bl	80024e2 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b18      	ldr	r3, [pc, #96]	@ (800054c <MX_GPIO_Init+0x78>)
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80004ea:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80004ee:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4322      	orrs	r2, r4
 80004f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80004f6:	2170      	movs	r1, #112	@ 0x70
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4022      	ands	r2, r4
 80004fa:	9201      	str	r2, [sp, #4]
 80004fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000500:	432a      	orrs	r2, r5
 8000502:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	402b      	ands	r3, r5
 800050a:	9302      	str	r3, [sp, #8]
 800050c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800050e:	f000 fd31 	bl	8000f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_AMBER_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin;
 8000512:	2370      	movs	r3, #112	@ 0x70
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	0030      	movs	r0, r6
 800051a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_AMBER_Pin|LED_RED_Pin;
 800051c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f000 fc79 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Fuze_Pin */
  GPIO_InitStruct.Pin = Fuze_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Fuze_GPIO_Port, &GPIO_InitStruct);
 8000528:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052a:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Fuze_GPIO_Port, &GPIO_InitStruct);
 800052c:	4808      	ldr	r0, [pc, #32]	@ (8000550 <MX_GPIO_Init+0x7c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = Fuze_Pin;
 8000530:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(Fuze_GPIO_Port, &GPIO_InitStruct);
 8000534:	f000 fc70 	bl	8000e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000538:	0022      	movs	r2, r4
 800053a:	0021      	movs	r1, r4
 800053c:	2005      	movs	r0, #5
 800053e:	f000 fb49 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000542:	2005      	movs	r0, #5
 8000544:	f000 fb70 	bl	8000c28 <HAL_NVIC_EnableIRQ>

}
 8000548:	b008      	add	sp, #32
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	50000400 	.word	0x50000400

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	a80c      	add	r0, sp, #48	@ 0x30
 800055e:	f001 ffc0 	bl	80024e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	2214      	movs	r2, #20
 8000564:	2100      	movs	r1, #0
 8000566:	4668      	mov	r0, sp
 8000568:	f001 ffbb 	bl	80024e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	2218      	movs	r2, #24
 800056e:	2100      	movs	r1, #0
 8000570:	a805      	add	r0, sp, #20
 8000572:	f001 ffb6 	bl	80024e2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	491c      	ldr	r1, [pc, #112]	@ (80005e8 <SystemClock_Config+0x94>)
 8000578:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <SystemClock_Config+0x98>)
 800057a:	680a      	ldr	r2, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	401a      	ands	r2, r3
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	4313      	orrs	r3, r2
 8000586:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	02db      	lsls	r3, r3, #11
 8000594:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000596:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800059a:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059e:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005a4:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f000 fd43 	bl	8001030 <HAL_RCC_OscConfig>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005be:	0029      	movs	r1, r5
 80005c0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	f000 ff82 	bl	80014cc <HAL_RCC_ClockConfig>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x7c>
 80005cc:	b672      	cpsid	i
  while (1)
 80005ce:	e7fe      	b.n	80005ce <SystemClock_Config+0x7a>
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d0:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d4:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	f001 f857 	bl	8001688 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
 80005de:	b672      	cpsid	i
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <SystemClock_Config+0x8c>
}
 80005e2:	b019      	add	sp, #100	@ 0x64
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	40007000 	.word	0x40007000
 80005ec:	ffffe7ff 	.word	0xffffe7ff

080005f0 <DFPlayer_SendCommand>:
	{
 80005f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80005f2:	0013      	movs	r3, r2
		uint16_t arg = (param1 << 8) | param2;
 80005f4:	020a      	lsls	r2, r1, #8
 80005f6:	431a      	orrs	r2, r3
		packet[0] = 0x7E;             // Start byte
 80005f8:	2382      	movs	r3, #130	@ 0x82
 80005fa:	a901      	add	r1, sp, #4
 80005fc:	425b      	negs	r3, r3
 80005fe:	800b      	strh	r3, [r1, #0]
		packet[2] = 0x06;             // Data length
 8000600:	3388      	adds	r3, #136	@ 0x88
 8000602:	708b      	strb	r3, [r1, #2]
		packet[4] = 0x00;             // No feedback
 8000604:	2300      	movs	r3, #0
		packet[3] = command;          // Command byte
 8000606:	70c8      	strb	r0, [r1, #3]
		uint16_t checksum = 0 - (packet[1] + packet[2] + packet[3] + packet[4] + packet[5] + packet[6]);
 8000608:	3006      	adds	r0, #6
		uint16_t arg = (param1 << 8) | param2;
 800060a:	b214      	sxth	r4, r2
		uint16_t checksum = 0 - (packet[1] + packet[2] + packet[3] + packet[4] + packet[5] + packet[6]);
 800060c:	30ff      	adds	r0, #255	@ 0xff
		packet[5] = (arg >> 8) & 0xFF; // Parameter high byte
 800060e:	0a12      	lsrs	r2, r2, #8
		packet[4] = 0x00;             // No feedback
 8000610:	710b      	strb	r3, [r1, #4]
		packet[6] = arg & 0xFF;       // Parameter low byte
 8000612:	718c      	strb	r4, [r1, #6]
		uint16_t checksum = 0 - (packet[1] + packet[2] + packet[3] + packet[4] + packet[5] + packet[6]);
 8000614:	1813      	adds	r3, r2, r0
 8000616:	b2e4      	uxtb	r4, r4
 8000618:	191b      	adds	r3, r3, r4
 800061a:	425b      	negs	r3, r3
 800061c:	b29b      	uxth	r3, r3
		packet[5] = (arg >> 8) & 0xFF; // Parameter high byte
 800061e:	714a      	strb	r2, [r1, #5]
		packet[8] = checksum & 0xFF;        // Checksum low byte
 8000620:	720b      	strb	r3, [r1, #8]
		packet[7] = (checksum >> 8) & 0xFF; // Checksum high byte
 8000622:	0a1a      	lsrs	r2, r3, #8
		packet[9] = 0xEF;             // End byte
 8000624:	23ef      	movs	r3, #239	@ 0xef
 8000626:	724b      	strb	r3, [r1, #9]
		HAL_UART_Transmit(&huart2, packet, 10, HAL_MAX_DELAY);		// Send packet over UART
 8000628:	3bee      	subs	r3, #238	@ 0xee
		packet[7] = (checksum >> 8) & 0xFF; // Checksum high byte
 800062a:	71ca      	strb	r2, [r1, #7]
		HAL_UART_Transmit(&huart2, packet, 10, HAL_MAX_DELAY);		// Send packet over UART
 800062c:	425b      	negs	r3, r3
 800062e:	220a      	movs	r2, #10
 8000630:	4801      	ldr	r0, [pc, #4]	@ (8000638 <DFPlayer_SendCommand+0x48>)
 8000632:	f001 fdda 	bl	80021ea <HAL_UART_Transmit>
	}
 8000636:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000638:	20000100 	.word	0x20000100

0800063c <getRandomNumber>:
	{
 800063c:	b510      	push	{r4, lr}
    	seed = (2*HAL_GetTick() * 1103515245 + 12345) & 0x7FFFFFFF; // LCG formula
 800063e:	f000 fab1 	bl	8000ba4 <HAL_GetTick>
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <getRandomNumber+0x24>)
    	return (uint8_t)((seed % 3) + 1); // Random number between 1 and 3
 8000644:	2103      	movs	r1, #3
    	seed = (2*HAL_GetTick() * 1103515245 + 12345) & 0x7FFFFFFF; // LCG formula
 8000646:	4358      	muls	r0, r3
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <getRandomNumber+0x28>)
 800064a:	18c0      	adds	r0, r0, r3
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <getRandomNumber+0x2c>)
 8000650:	0840      	lsrs	r0, r0, #1
 8000652:	6018      	str	r0, [r3, #0]
    	return (uint8_t)((seed % 3) + 1); // Random number between 1 and 3
 8000654:	f7ff fdde 	bl	8000214 <__aeabi_uidivmod>
 8000658:	3101      	adds	r1, #1
 800065a:	b2c8      	uxtb	r0, r1
	}
 800065c:	bd10      	pop	{r4, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	838c9cda 	.word	0x838c9cda
 8000664:	00003039 	.word	0x00003039
 8000668:	20000000 	.word	0x20000000

0800066c <ReadPlaybackStatus>:
	{
 800066c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		DFPlayer_SendCommand(0x42, 0x00, 0x00);					// Send the status query command
 800066e:	2200      	movs	r2, #0
 8000670:	2042      	movs	r0, #66	@ 0x42
 8000672:	0011      	movs	r1, r2
		if (HAL_UART_Receive(&huart2, status_packet, 10, 100) == HAL_OK) 		// Wait for the response from the DFPlayer Mini
 8000674:	ac01      	add	r4, sp, #4
		DFPlayer_SendCommand(0x42, 0x00, 0x00);					// Send the status query command
 8000676:	f7ff ffbb 	bl	80005f0 <DFPlayer_SendCommand>
		if (HAL_UART_Receive(&huart2, status_packet, 10, 100) == HAL_OK) 		// Wait for the response from the DFPlayer Mini
 800067a:	2364      	movs	r3, #100	@ 0x64
 800067c:	220a      	movs	r2, #10
 800067e:	0021      	movs	r1, r4
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <ReadPlaybackStatus+0x3c>)
 8000682:	f001 fe19 	bl	80022b8 <HAL_UART_Receive>
 8000686:	2800      	cmp	r0, #0
 8000688:	d10b      	bne.n	80006a2 <ReadPlaybackStatus+0x36>
				if (status_packet[3] == 0x42 && status_packet[0] == 0x7E && status_packet[9] == 0xEF) 			// Ensure the response is valid and matches the query
 800068a:	78e3      	ldrb	r3, [r4, #3]
 800068c:	2b42      	cmp	r3, #66	@ 0x42
 800068e:	d106      	bne.n	800069e <ReadPlaybackStatus+0x32>
 8000690:	7823      	ldrb	r3, [r4, #0]
 8000692:	2b7e      	cmp	r3, #126	@ 0x7e
 8000694:	d103      	bne.n	800069e <ReadPlaybackStatus+0x32>
 8000696:	7a63      	ldrb	r3, [r4, #9]
 8000698:	2bef      	cmp	r3, #239	@ 0xef
 800069a:	d100      	bne.n	800069e <ReadPlaybackStatus+0x32>
						status = status_packet[6]; // Extract the playback status (0x01 or 0x00)
 800069c:	79a0      	ldrb	r0, [r4, #6]
	}
 800069e:	b004      	add	sp, #16
 80006a0:	bd10      	pop	{r4, pc}
		uint8_t status = 0x00; 									// Default to an invalid value
 80006a2:	2000      	movs	r0, #0
 80006a4:	e7fb      	b.n	800069e <ReadPlaybackStatus+0x32>
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	20000100 	.word	0x20000100

080006ac <main>:
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80006ae:	f000 fa59 	bl	8000b64 <HAL_Init>
  SystemClock_Config();
 80006b2:	f7ff ff4f 	bl	8000554 <SystemClock_Config>
  MX_GPIO_Init();
 80006b6:	f7ff ff0d 	bl	80004d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f7ff fef5 	bl	80004a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006be:	f000 f973 	bl	80009a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006c2:	f000 f8d3 	bl	800086c <MX_TIM2_Init>
  MX_TIM21_Init();
 80006c6:	f000 f90d 	bl	80008e4 <MX_TIM21_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80006ca:	481a      	ldr	r0, [pc, #104]	@ (8000734 <main+0x88>)
 80006cc:	f001 f8e4 	bl	8001898 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 80006d0:	4819      	ldr	r0, [pc, #100]	@ (8000738 <main+0x8c>)
 80006d2:	f001 f8e1 	bl	8001898 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 80006d6:	20fa      	movs	r0, #250	@ 0xfa
 80006d8:	0080      	lsls	r0, r0, #2
 80006da:	f000 fa69 	bl	8000bb0 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_RESET , 0, 0); // Reset DFPlayer Mini
 80006de:	2200      	movs	r2, #0
 80006e0:	200c      	movs	r0, #12
 80006e2:	0011      	movs	r1, r2
 80006e4:	f7ff ff84 	bl	80005f0 <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80006e8:	20fa      	movs	r0, #250	@ 0xfa
 80006ea:	0080      	lsls	r0, r0, #2
 80006ec:	f000 fa60 	bl	8000bb0 <HAL_Delay>
  DFPlayer_SendCommand(DFPLAYER_CMD_PLAY_TRACK, 0x00, getRandomNumber());
 80006f0:	f7ff ffa4 	bl	800063c <getRandomNumber>
 80006f4:	2100      	movs	r1, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	2003      	movs	r0, #3
 80006fa:	f7ff ff79 	bl	80005f0 <DFPlayer_SendCommand>
  HAL_Delay(1000);
 80006fe:	20fa      	movs	r0, #250	@ 0xfa
      if (HAL_GetTick() - last_query_time >= CHECK_INTERVAL)
 8000700:	25fa      	movs	r5, #250	@ 0xfa
			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, ReadPlaybackStatus());
 8000702:	24a0      	movs	r4, #160	@ 0xa0
  HAL_Delay(1000);
 8000704:	0080      	lsls	r0, r0, #2
 8000706:	f000 fa53 	bl	8000bb0 <HAL_Delay>
      if (HAL_GetTick() - last_query_time >= CHECK_INTERVAL)
 800070a:	00ad      	lsls	r5, r5, #2
			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, ReadPlaybackStatus());
 800070c:	05e4      	lsls	r4, r4, #23
      if (HAL_GetTick() - last_query_time >= CHECK_INTERVAL)
 800070e:	f000 fa49 	bl	8000ba4 <HAL_GetTick>
 8000712:	4e0a      	ldr	r6, [pc, #40]	@ (800073c <main+0x90>)
 8000714:	6833      	ldr	r3, [r6, #0]
 8000716:	1ac0      	subs	r0, r0, r3
 8000718:	42a8      	cmp	r0, r5
 800071a:	d3f8      	bcc.n	800070e <main+0x62>
			  last_query_time = HAL_GetTick();
 800071c:	f000 fa42 	bl	8000ba4 <HAL_GetTick>
 8000720:	6030      	str	r0, [r6, #0]
			  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, ReadPlaybackStatus());
 8000722:	f7ff ffa3 	bl	800066c <ReadPlaybackStatus>
 8000726:	2110      	movs	r1, #16
 8000728:	0002      	movs	r2, r0
 800072a:	0020      	movs	r0, r4
 800072c:	f000 fc22 	bl	8000f74 <HAL_GPIO_WritePin>
 8000730:	e7ed      	b.n	800070e <main+0x62>
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	20000078 	.word	0x20000078
 8000738:	20000038 	.word	0x20000038
 800073c:	20000030 	.word	0x20000030

08000740 <HAL_TIM_PeriodElapsedCallback>:
	{
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (htim->Instance == TIM2)
 8000742:	2380      	movs	r3, #128	@ 0x80
 8000744:	6802      	ldr	r2, [r0, #0]
	{
 8000746:	0004      	movs	r4, r0
		if (htim->Instance == TIM2)
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	429a      	cmp	r2, r3
 800074c:	d114      	bne.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x38>
				if (explosion == 1)
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000750:	781d      	ldrb	r5, [r3, #0]
 8000752:	2d01      	cmp	r5, #1
 8000754:	d130      	bne.n	80007b8 <HAL_TIM_PeriodElapsedCallback+0x78>
						if (led_state == 0)
 8000756:	4e20      	ldr	r6, [pc, #128]	@ (80007d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000758:	7837      	ldrb	r7, [r6, #0]
 800075a:	2f00      	cmp	r7, #0
 800075c:	d11d      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x5a>
								HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_SET);   // Turn ON amber LED
 800075e:	20a0      	movs	r0, #160	@ 0xa0
 8000760:	002a      	movs	r2, r5
 8000762:	2120      	movs	r1, #32
 8000764:	05c0      	lsls	r0, r0, #23
 8000766:	f000 fc05 	bl	8000f74 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);  // Turn OFF red LED
 800076a:	20a0      	movs	r0, #160	@ 0xa0
 800076c:	003a      	movs	r2, r7
 800076e:	2140      	movs	r1, #64	@ 0x40
 8000770:	05c0      	lsls	r0, r0, #23
 8000772:	f000 fbff 	bl	8000f74 <HAL_GPIO_WritePin>
								led_state = 1;
 8000776:	7035      	strb	r5, [r6, #0]
		if (htim->Instance == TIM21)
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800077a:	6822      	ldr	r2, [r4, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d10b      	bne.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x58>
				second_ticks++;
 8000780:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	7013      	strb	r3, [r2, #0]
				if (second_ticks >= 5)
 800078a:	2b04      	cmp	r3, #4
 800078c:	d904      	bls.n	8000798 <HAL_TIM_PeriodElapsedCallback+0x58>
						explosion = 1;
 800078e:	2101      	movs	r1, #1
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000792:	7019      	strb	r1, [r3, #0]
						second_ticks = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	7013      	strb	r3, [r2, #0]
	}
 8000798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_RESET); // Turn OFF amber LED
 800079a:	20a0      	movs	r0, #160	@ 0xa0
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	05c0      	lsls	r0, r0, #23
 80007a2:	f000 fbe7 	bl	8000f74 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);     // Turn ON red LED
 80007a6:	20a0      	movs	r0, #160	@ 0xa0
 80007a8:	002a      	movs	r2, r5
 80007aa:	2140      	movs	r1, #64	@ 0x40
 80007ac:	05c0      	lsls	r0, r0, #23
 80007ae:	f000 fbe1 	bl	8000f74 <HAL_GPIO_WritePin>
								led_state = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	7033      	strb	r3, [r6, #0]
 80007b6:	e7df      	b.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x38>
						HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_RESET); 						// Turn off blinking LEDs when explosion is inactive
 80007b8:	20a0      	movs	r0, #160	@ 0xa0
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	05c0      	lsls	r0, r0, #23
 80007c0:	f000 fbd8 	bl	8000f74 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_RESET);
 80007c4:	20a0      	movs	r0, #160	@ 0xa0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	05c0      	lsls	r0, r0, #23
 80007cc:	f000 fbd2 	bl	8000f74 <HAL_GPIO_WritePin>
 80007d0:	e7d2      	b.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x38>
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	20000034 	.word	0x20000034
 80007d8:	2000002d 	.word	0x2000002d
 80007dc:	40010800 	.word	0x40010800
 80007e0:	2000002c 	.word	0x2000002c

080007e4 <Error_Handler>:
 80007e4:	b672      	cpsid	i
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x2>

080007e8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	2201      	movs	r2, #1
 80007ea:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <HAL_MspInit+0x18>)
 80007ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007ee:	430a      	orrs	r2, r1
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80007f6:	0552      	lsls	r2, r2, #21
 80007f8:	430a      	orrs	r2, r1
 80007fa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler>

08000806 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler>

08000808 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f9bd 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bd10      	pop	{r4, pc}

08000814 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000814:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Fuze_Pin);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 fbb4 	bl	8000f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800081c:	bd10      	pop	{r4, pc}
	...

08000820 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000820:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, LED_AMBER_Pin, GPIO_PIN_SET);
 8000822:	24a0      	movs	r4, #160	@ 0xa0
 8000824:	05e4      	lsls	r4, r4, #23
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	0020      	movs	r0, r4
 800082c:	f000 fba2 	bl	8000f74 <HAL_GPIO_WritePin>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <DMA1_Channel2_3_IRQHandler+0x24>)
 8000832:	f000 faa6 	bl	8000d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	@ 0x40
 800083a:	0020      	movs	r0, r4
 800083c:	f000 fb9a 	bl	8000f74 <HAL_GPIO_WritePin>
  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	200000b8 	.word	0x200000b8

08000848 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000848:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800084a:	4802      	ldr	r0, [pc, #8]	@ (8000854 <TIM2_IRQHandler+0xc>)
 800084c:	f001 f8f0 	bl	8001a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	20000078 	.word	0x20000078

08000858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800085a:	4802      	ldr	r0, [pc, #8]	@ (8000864 <USART2_IRQHandler+0xc>)
 800085c:	f001 f9d4 	bl	8001c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000860:	bd10      	pop	{r4, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000100 	.word	0x20000100

08000868 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	4770      	bx	lr
	...

0800086c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000870:	2210      	movs	r2, #16
 8000872:	2100      	movs	r1, #0
 8000874:	a802      	add	r0, sp, #8
 8000876:	f001 fe34 	bl	80024e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	2208      	movs	r2, #8
 800087c:	2100      	movs	r1, #0
 800087e:	4668      	mov	r0, sp
 8000880:	f001 fe2f 	bl	80024e2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	4c15      	ldr	r4, [pc, #84]	@ (80008dc <MX_TIM2_Init+0x70>)
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 32000-1;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_TIM2_Init+0x74>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 250-1;
 800088e:	22f9      	movs	r2, #249	@ 0xf9
  htim2.Init.Prescaler = 32000-1;
 8000890:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	2300      	movs	r3, #0
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000894:	0020      	movs	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	3380      	adds	r3, #128	@ 0x80
  htim2.Init.Period = 250-1;
 800089c:	60e2      	str	r2, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a0:	f000 ffd6 	bl	8001850 <HAL_TIM_Base_Init>
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x40>
  {
    Error_Handler();
 80008a8:	f7ff ff9c 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b2:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b6:	f001 f815 	bl	80018e4 <HAL_TIM_ConfigClockSource>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008be:	f7ff ff91 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c4:	4669      	mov	r1, sp
 80008c6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	f001 f938 	bl	8001b40 <HAL_TIMEx_MasterConfigSynchronization>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008d4:	f7ff ff86 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d8:	b006      	add	sp, #24
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	20000078 	.word	0x20000078
 80008e0:	00007cff 	.word	0x00007cff

080008e4 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80008e4:	b510      	push	{r4, lr}
 80008e6:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e8:	2210      	movs	r2, #16
 80008ea:	2100      	movs	r1, #0
 80008ec:	a802      	add	r0, sp, #8
 80008ee:	f001 fdf8 	bl	80024e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f2:	2208      	movs	r2, #8
 80008f4:	2100      	movs	r1, #0
 80008f6:	4668      	mov	r0, sp
 80008f8:	f001 fdf3 	bl	80024e2 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80008fc:	4c15      	ldr	r4, [pc, #84]	@ (8000954 <MX_TIM21_Init+0x70>)
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_TIM21_Init+0x74>)
  htim21.Init.Prescaler = 32000-1;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 1000-1;
 8000900:	4a16      	ldr	r2, [pc, #88]	@ (800095c <MX_TIM21_Init+0x78>)
  htim21.Instance = TIM21;
 8000902:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_TIM21_Init+0x7c>)
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000906:	0020      	movs	r0, r4
  htim21.Init.Prescaler = 32000-1;
 8000908:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	2300      	movs	r3, #0
 800090c:	60a3      	str	r3, [r4, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000910:	3380      	adds	r3, #128	@ 0x80
  htim21.Init.Period = 1000-1;
 8000912:	60e2      	str	r2, [r4, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000914:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000916:	f000 ff9b 	bl	8001850 <HAL_TIM_Base_Init>
 800091a:	2800      	cmp	r0, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM21_Init+0x3e>
  {
    Error_Handler();
 800091e:	f7ff ff61 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000924:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000926:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000928:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800092c:	f000 ffda 	bl	80018e4 <HAL_TIM_ConfigClockSource>
 8000930:	2800      	cmp	r0, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM21_Init+0x54>
  {
    Error_Handler();
 8000934:	f7ff ff56 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800093a:	4669      	mov	r1, sp
 800093c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000942:	f001 f8fd 	bl	8001b40 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	2800      	cmp	r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 800094a:	f7ff ff4b 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800094e:	b006      	add	sp, #24
 8000950:	bd10      	pop	{r4, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000038 	.word	0x20000038
 8000958:	40010800 	.word	0x40010800
 800095c:	000003e7 	.word	0x000003e7
 8000960:	00007cff 	.word	0x00007cff

08000964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	6803      	ldr	r3, [r0, #0]
{
 8000968:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM2)
 800096a:	05d2      	lsls	r2, r2, #23
 800096c:	4293      	cmp	r3, r2
 800096e:	d10d      	bne.n	800098c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000970:	2301      	movs	r3, #1
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <HAL_TIM_Base_MspInit+0x3c>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000974:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000976:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000978:	430b      	orrs	r3, r1
 800097a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	0011      	movs	r1, r2
 8000980:	f000 f928 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000984:	200f      	movs	r0, #15
 8000986:	f000 f94f 	bl	8000c28 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800098a:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM21)
 800098c:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <HAL_TIM_Base_MspInit+0x40>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d1fb      	bne.n	800098a <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000992:	2304      	movs	r3, #4
 8000994:	4a02      	ldr	r2, [pc, #8]	@ (80009a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000996:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000998:	430b      	orrs	r3, r1
 800099a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800099c:	e7f5      	b.n	800098a <HAL_TIM_Base_MspInit+0x26>
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800

080009a8 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x30>)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART2_UART_Init+0x34>)
{
 80009ac:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80009ae:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80009b0:	2396      	movs	r3, #150	@ 0x96
 80009b2:	019b      	lsls	r3, r3, #6
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 80009b6:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ba:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009bc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009be:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c0:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	f001 fd57 	bl	800247c <HAL_UART_Init>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 80009d2:	f7ff ff07 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d6:	bd10      	pop	{r4, pc}
 80009d8:	20000100 	.word	0x20000100
 80009dc:	40004400 	.word	0x40004400

080009e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	0005      	movs	r5, r0
 80009e4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	2214      	movs	r2, #20
 80009e8:	2100      	movs	r1, #0
 80009ea:	a801      	add	r0, sp, #4
 80009ec:	f001 fd79 	bl	80024e2 <memset>
  if(uartHandle->Instance==USART2)
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <HAL_UART_MspInit+0xa8>)
 80009f2:	682a      	ldr	r2, [r5, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d145      	bne.n	8000a84 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <HAL_UART_MspInit+0xac>)
 80009fc:	0292      	lsls	r2, r2, #10
 80009fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	430a      	orrs	r2, r1
 8000a04:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2403      	movs	r4, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4311      	orrs	r1, r2
 8000a12:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4013      	ands	r3, r2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f000 f9f8 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a28:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a2c:	2704      	movs	r7, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a32:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	05c0      	lsls	r0, r0, #23
 8000a36:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a3e:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f000 f9ea 	bl	8000e18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000a44:	4c12      	ldr	r4, [pc, #72]	@ (8000a90 <HAL_UART_MspInit+0xb0>)
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a48:	0020      	movs	r0, r4
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000a4a:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a50:	3b60      	subs	r3, #96	@ 0x60
 8000a52:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	019b      	lsls	r3, r3, #6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000a58:	6067      	str	r7, [r4, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a5a:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	60e6      	str	r6, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a5e:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a60:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a62:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a64:	f000 f906 	bl	8000c74 <HAL_DMA_Init>
 8000a68:	42b0      	cmp	r0, r6
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8000a6c:	f7ff feba 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	201c      	movs	r0, #28
 8000a74:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a76:	676c      	str	r4, [r5, #116]	@ 0x74
 8000a78:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a7a:	f000 f8ab 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7e:	201c      	movs	r0, #28
 8000a80:	f000 f8d2 	bl	8000c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a84:	b007      	add	sp, #28
 8000a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	200000b8 	.word	0x200000b8
 8000a94:	40020030 	.word	0x40020030

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a98:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a9c:	f7ff fee4 	bl	8000868 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000aa0:	4812      	ldr	r0, [pc, #72]	@ (8000aec <LoopForever+0x6>)
    LDR R1, [R0]
 8000aa2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000aa4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <LoopForever+0xa>)
    CMP R1, R2
 8000aa8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000aaa:	d105      	bne.n	8000ab8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000aac:	4811      	ldr	r0, [pc, #68]	@ (8000af4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000aae:	4912      	ldr	r1, [pc, #72]	@ (8000af8 <LoopForever+0x12>)
    STR R1, [R0]
 8000ab0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ab4:	4912      	ldr	r1, [pc, #72]	@ (8000b00 <LoopForever+0x1a>)
    STR R1, [R0]
 8000ab6:	6001      	str	r1, [r0, #0]

08000ab8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000aba:	4913      	ldr	r1, [pc, #76]	@ (8000b08 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000abc:	4a13      	ldr	r2, [pc, #76]	@ (8000b0c <LoopForever+0x26>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ad0:	4c10      	ldr	r4, [pc, #64]	@ (8000b14 <LoopForever+0x2e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 fd09 	bl	80024f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fde3 	bl	80006ac <main>

08000ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
   ldr   r0, =_estack
 8000ae8:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000aec:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000af0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000af4:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000af8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000afc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b00:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b0c:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b14:	2000018c 	.word	0x2000018c

08000b18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_COMP_IRQHandler>
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	20fa      	movs	r0, #250	@ 0xfa
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_InitTick+0x3c>)
 8000b24:	0080      	lsls	r0, r0, #2
 8000b26:	7819      	ldrb	r1, [r3, #0]
 8000b28:	f7ff faee 	bl	8000108 <__udivsi3>
 8000b2c:	4c0b      	ldr	r4, [pc, #44]	@ (8000b5c <HAL_InitTick+0x40>)
 8000b2e:	0001      	movs	r1, r0
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	f7ff fae9 	bl	8000108 <__udivsi3>
 8000b36:	f000 f883 	bl	8000c40 <HAL_SYSTICK_Config>
 8000b3a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d109      	bne.n	8000b56 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	2d03      	cmp	r5, #3
 8000b44:	d807      	bhi.n	8000b56 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b46:	3802      	subs	r0, #2
 8000b48:	0022      	movs	r2, r4
 8000b4a:	0029      	movs	r1, r5
 8000b4c:	f000 f842 	bl	8000bd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	0020      	movs	r0, r4
 8000b52:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_InitTick+0x44>)
 8000b54:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	2000000c 	.word	0x2000000c

08000b64 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b64:	2340      	movs	r3, #64	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_Init+0x24>)
{
 8000b68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b6a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	f7ff ffd3 	bl	8000b1c <HAL_InitTick>
 8000b76:	1e04      	subs	r4, r0, #0
 8000b78:	d103      	bne.n	8000b82 <HAL_Init+0x1e>
    HAL_MspInit();
 8000b7a:	f7ff fe35 	bl	80007e8 <HAL_MspInit>
}
 8000b7e:	0020      	movs	r0, r4
 8000b80:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b82:	2401      	movs	r4, #1
 8000b84:	e7fb      	b.n	8000b7e <HAL_Init+0x1a>
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b8c:	4a03      	ldr	r2, [pc, #12]	@ (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x14>)
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	185b      	adds	r3, r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	4770      	bx	lr
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	20000188 	.word	0x20000188
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	@ (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000188 	.word	0x20000188

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff6 	bl	8000ba4 <HAL_GetTick>
 8000bb8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	1c63      	adds	r3, r4, #1
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <HAL_Delay+0x20>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	42a0      	cmp	r0, r4
 8000bcc:	d3fa      	bcc.n	8000bc4 <HAL_Delay+0x14>
  {
  }
}
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd4:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd6:	24ff      	movs	r4, #255	@ 0xff
 8000bd8:	2203      	movs	r2, #3
 8000bda:	000b      	movs	r3, r1
 8000bdc:	0021      	movs	r1, r4
 8000bde:	4002      	ands	r2, r0
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bea:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	db0a      	blt.n	8000c06 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	24c0      	movs	r4, #192	@ 0xc0
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <HAL_NVIC_SetPriority+0x4c>)
 8000bf4:	0880      	lsrs	r0, r0, #2
 8000bf6:	0080      	lsls	r0, r0, #2
 8000bf8:	1880      	adds	r0, r0, r2
 8000bfa:	00a4      	lsls	r4, r4, #2
 8000bfc:	5902      	ldr	r2, [r0, r4]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	4313      	orrs	r3, r2
 8000c02:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000c04:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c06:	220f      	movs	r2, #15
 8000c08:	4010      	ands	r0, r2
 8000c0a:	3808      	subs	r0, #8
 8000c0c:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <HAL_NVIC_SetPriority+0x50>)
 8000c0e:	0880      	lsrs	r0, r0, #2
 8000c10:	0080      	lsls	r0, r0, #2
 8000c12:	1880      	adds	r0, r0, r2
 8000c14:	69c2      	ldr	r2, [r0, #28]
 8000c16:	4011      	ands	r1, r2
 8000c18:	4319      	orrs	r1, r3
 8000c1a:	61c1      	str	r1, [r0, #28]
 8000c1c:	e7f2      	b.n	8000c04 <HAL_NVIC_SetPriority+0x30>
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	db05      	blt.n	8000c38 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2c:	231f      	movs	r3, #31
 8000c2e:	4018      	ands	r0, r3
 8000c30:	3b1e      	subs	r3, #30
 8000c32:	4083      	lsls	r3, r0
 8000c34:	4a01      	ldr	r2, [pc, #4]	@ (8000c3c <HAL_NVIC_EnableIRQ+0x14>)
 8000c36:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	1e43      	subs	r3, r0, #1
 8000c44:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d20d      	bcs.n	8000c68 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	6a03      	ldr	r3, [r0, #32]
 8000c56:	0609      	lsls	r1, r1, #24
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	e000e010 	.word	0xe000e010
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d035      	beq.n	8000cea <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c7e:	6825      	ldr	r5, [r4, #0]
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <HAL_DMA_Init+0x78>)
 8000c82:	2114      	movs	r1, #20
 8000c84:	18e8      	adds	r0, r5, r3
 8000c86:	f7ff fa3f 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c8c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000c8e:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c90:	2302      	movs	r3, #2
 8000c92:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c94:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c96:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c98:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c9c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000c9e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000ca0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca2:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000ca4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca6:	433b      	orrs	r3, r7
 8000ca8:	6967      	ldr	r7, [r4, #20]
 8000caa:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cac:	69a7      	ldr	r7, [r4, #24]
 8000cae:	433b      	orrs	r3, r7
 8000cb0:	69e7      	ldr	r7, [r4, #28]
 8000cb2:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb4:	6a27      	ldr	r7, [r4, #32]
 8000cb6:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8000cb8:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cba:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	01db      	lsls	r3, r3, #7
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d00c      	beq.n	8000cde <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000cc4:	251c      	movs	r5, #28
 8000cc6:	4028      	ands	r0, r5
 8000cc8:	3d0d      	subs	r5, #13
 8000cca:	4085      	lsls	r5, r0
 8000ccc:	490a      	ldr	r1, [pc, #40]	@ (8000cf8 <HAL_DMA_Init+0x84>)
 8000cce:	680b      	ldr	r3, [r1, #0]
 8000cd0:	43ab      	bics	r3, r5
 8000cd2:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000cd4:	6863      	ldr	r3, [r4, #4]
 8000cd6:	680d      	ldr	r5, [r1, #0]
 8000cd8:	4083      	lsls	r3, r0
 8000cda:	432b      	orrs	r3, r5
 8000cdc:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cde:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ce0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce2:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ce4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000ce6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000ce8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8000cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cec:	bffdfff8 	.word	0xbffdfff8
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	ffff800f 	.word	0xffff800f
 8000cf8:	400200a8 	.word	0x400200a8

08000cfc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfe:	1d84      	adds	r4, r0, #6
 8000d00:	7fe2      	ldrb	r2, [r4, #31]
{
 8000d02:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d04:	2a02      	cmp	r2, #2
 8000d06:	d006      	beq.n	8000d16 <HAL_DMA_Abort+0x1a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d08:	2204      	movs	r2, #4
 8000d0a:	63c2      	str	r2, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	3305      	adds	r3, #5
 8000d12:	77da      	strb	r2, [r3, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8000d14:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	6802      	ldr	r2, [r0, #0]
 8000d18:	200e      	movs	r0, #14
 8000d1a:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d1c:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d1e:	4381      	bics	r1, r0
 8000d20:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d22:	2101      	movs	r1, #1
 8000d24:	6810      	ldr	r0, [r2, #0]
 8000d26:	4388      	bics	r0, r1
 8000d28:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000d2c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000d2e:	402a      	ands	r2, r5
 8000d30:	000d      	movs	r5, r1
 8000d32:	4095      	lsls	r5, r2
 8000d34:	6045      	str	r5, [r0, #4]
    return status;
 8000d36:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000d38:	77e1      	strb	r1, [r4, #31]
    return status;
 8000d3a:	e7e8      	b.n	8000d0e <HAL_DMA_Abort+0x12>

08000d3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d3e:	1d84      	adds	r4, r0, #6
 8000d40:	7fe3      	ldrb	r3, [r4, #31]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d003      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d46:	2304      	movs	r3, #4
 8000d48:	63c3      	str	r3, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d4a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4e:	210e      	movs	r1, #14
 8000d50:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d52:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	438a      	bics	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	6819      	ldr	r1, [r3, #0]
 8000d5e:	4391      	bics	r1, r2
 8000d60:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d62:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8000d64:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8000d66:	402b      	ands	r3, r5
 8000d68:	0015      	movs	r5, r2
 8000d6a:	409d      	lsls	r5, r3
 8000d6c:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000d70:	2200      	movs	r2, #0
 8000d72:	1d43      	adds	r3, r0, #5
 8000d74:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8000d76:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d000      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000d7c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e7e4      	b.n	8000d4c <HAL_DMA_Abort_IT+0x10>

08000d82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000d84:	261c      	movs	r6, #28
 8000d86:	2704      	movs	r7, #4
 8000d88:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d8a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000d8c:	4032      	ands	r2, r6
 8000d8e:	003e      	movs	r6, r7
 8000d90:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d92:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d94:	6803      	ldr	r3, [r0, #0]
 8000d96:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000d98:	4235      	tst	r5, r6
 8000d9a:	d00d      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x36>
 8000d9c:	423c      	tst	r4, r7
 8000d9e:	d00b      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	0692      	lsls	r2, r2, #26
 8000da4:	d402      	bmi.n	8000dac <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	43ba      	bics	r2, r7
 8000daa:	601a      	str	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000dac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000dae:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d019      	beq.n	8000de8 <HAL_DMA_IRQHandler+0x66>
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000db4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000db6:	e017      	b.n	8000de8 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000db8:	2702      	movs	r7, #2
 8000dba:	003e      	movs	r6, r7
 8000dbc:	4096      	lsls	r6, r2
 8000dbe:	4235      	tst	r5, r6
 8000dc0:	d013      	beq.n	8000dea <HAL_DMA_IRQHandler+0x68>
 8000dc2:	423c      	tst	r4, r7
 8000dc4:	d011      	beq.n	8000dea <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	0692      	lsls	r2, r2, #26
 8000dca:	d406      	bmi.n	8000dda <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000dcc:	240a      	movs	r4, #10
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	43a2      	bics	r2, r4
 8000dd2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	1d83      	adds	r3, r0, #6
 8000dd8:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000dde:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000de0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000de2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d1e5      	bne.n	8000db4 <HAL_DMA_IRQHandler+0x32>
}
 8000de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000dea:	2608      	movs	r6, #8
 8000dec:	0037      	movs	r7, r6
 8000dee:	4097      	lsls	r7, r2
 8000df0:	423d      	tst	r5, r7
 8000df2:	d0f9      	beq.n	8000de8 <HAL_DMA_IRQHandler+0x66>
 8000df4:	4234      	tst	r4, r6
 8000df6:	d0f7      	beq.n	8000de8 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df8:	250e      	movs	r5, #14
 8000dfa:	681c      	ldr	r4, [r3, #0]
 8000dfc:	43ac      	bics	r4, r5
 8000dfe:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e00:	2301      	movs	r3, #1
 8000e02:	001c      	movs	r4, r3
 8000e04:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e08:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e0a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	1d43      	adds	r3, r0, #5
 8000e12:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000e14:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000e16:	e7e5      	b.n	8000de4 <HAL_DMA_IRQHandler+0x62>

08000e18 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000e18:	2300      	movs	r3, #0
{
 8000e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1c:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e1e:	680a      	ldr	r2, [r1, #0]
 8000e20:	0014      	movs	r4, r2
 8000e22:	40dc      	lsrs	r4, r3
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_Init+0x12>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8000e26:	b005      	add	sp, #20
 8000e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	0014      	movs	r4, r2
 8000e2e:	409d      	lsls	r5, r3
 8000e30:	402c      	ands	r4, r5
 8000e32:	9400      	str	r4, [sp, #0]
    if (iocurrent)
 8000e34:	422a      	tst	r2, r5
 8000e36:	d100      	bne.n	8000e3a <HAL_GPIO_Init+0x22>
 8000e38:	e090      	b.n	8000f5c <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3a:	684a      	ldr	r2, [r1, #4]
 8000e3c:	005f      	lsls	r7, r3, #1
 8000e3e:	4694      	mov	ip, r2
 8000e40:	2203      	movs	r2, #3
 8000e42:	4664      	mov	r4, ip
 8000e44:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e46:	2403      	movs	r4, #3
 8000e48:	40bc      	lsls	r4, r7
 8000e4a:	43e4      	mvns	r4, r4
 8000e4c:	9401      	str	r4, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e4e:	1e54      	subs	r4, r2, #1
 8000e50:	2c01      	cmp	r4, #1
 8000e52:	d82e      	bhi.n	8000eb2 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000e54:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e56:	9c01      	ldr	r4, [sp, #4]
 8000e58:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	68cc      	ldr	r4, [r1, #12]
 8000e5c:	40bc      	lsls	r4, r7
 8000e5e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000e60:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e62:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e64:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e66:	43ac      	bics	r4, r5
 8000e68:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	4664      	mov	r4, ip
 8000e6c:	0924      	lsrs	r4, r4, #4
 8000e6e:	4034      	ands	r4, r6
 8000e70:	409c      	lsls	r4, r3
 8000e72:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000e74:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000e76:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	9c01      	ldr	r4, [sp, #4]
 8000e7a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7c:	688c      	ldr	r4, [r1, #8]
 8000e7e:	40bc      	lsls	r4, r7
 8000e80:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000e82:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e84:	2a02      	cmp	r2, #2
 8000e86:	d116      	bne.n	8000eb6 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e88:	2507      	movs	r5, #7
 8000e8a:	260f      	movs	r6, #15
 8000e8c:	401d      	ands	r5, r3
 8000e8e:	00ad      	lsls	r5, r5, #2
 8000e90:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000e92:	08dc      	lsrs	r4, r3, #3
 8000e94:	00a4      	lsls	r4, r4, #2
 8000e96:	1904      	adds	r4, r0, r4
 8000e98:	9402      	str	r4, [sp, #8]
 8000e9a:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e9c:	9603      	str	r6, [sp, #12]
 8000e9e:	0026      	movs	r6, r4
 8000ea0:	9c03      	ldr	r4, [sp, #12]
 8000ea2:	43a6      	bics	r6, r4
 8000ea4:	0034      	movs	r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ea6:	690e      	ldr	r6, [r1, #16]
 8000ea8:	40ae      	lsls	r6, r5
 8000eaa:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000eac:	9c02      	ldr	r4, [sp, #8]
 8000eae:	6226      	str	r6, [r4, #32]
 8000eb0:	e001      	b.n	8000eb6 <HAL_GPIO_Init+0x9e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb2:	2a03      	cmp	r2, #3
 8000eb4:	d1df      	bne.n	8000e76 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000eb8:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eba:	9d01      	ldr	r5, [sp, #4]
 8000ebc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000ec2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	02a4      	lsls	r4, r4, #10
 8000ec8:	4222      	tst	r2, r4
 8000eca:	d047      	beq.n	8000f5c <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	2501      	movs	r5, #1
 8000ece:	4c24      	ldr	r4, [pc, #144]	@ (8000f60 <HAL_GPIO_Init+0x148>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ed0:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ed4:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	432a      	orrs	r2, r5
 8000ed8:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <HAL_GPIO_Init+0x14c>)
 8000edc:	089c      	lsrs	r4, r3, #2
 8000ede:	00a4      	lsls	r4, r4, #2
 8000ee0:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	3502      	adds	r5, #2
 8000ee6:	401d      	ands	r5, r3
 8000ee8:	00ad      	lsls	r5, r5, #2
 8000eea:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8000eec:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000eee:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	42b8      	cmp	r0, r7
 8000ef4:	d008      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
 8000ef6:	4f1c      	ldr	r7, [pc, #112]	@ (8000f68 <HAL_GPIO_Init+0x150>)
 8000ef8:	3201      	adds	r2, #1
 8000efa:	42b8      	cmp	r0, r7
 8000efc:	d004      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
 8000efe:	4f1b      	ldr	r7, [pc, #108]	@ (8000f6c <HAL_GPIO_Init+0x154>)
 8000f00:	3205      	adds	r2, #5
 8000f02:	42b8      	cmp	r0, r7
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0xf0>
 8000f06:	3a04      	subs	r2, #4
 8000f08:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f0c:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f0e:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000f10:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000f12:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000f14:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000f16:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000f1a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f1c:	02ff      	lsls	r7, r7, #11
 8000f1e:	d401      	bmi.n	8000f24 <HAL_GPIO_Init+0x10c>
        temp &= ~((uint32_t)iocurrent);
 8000f20:	0035      	movs	r5, r6
 8000f22:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000f26:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000f28:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000f2a:	9d00      	ldr	r5, [sp, #0]
 8000f2c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2e:	02bf      	lsls	r7, r7, #10
 8000f30:	d401      	bmi.n	8000f36 <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8000f32:	0035      	movs	r5, r6
 8000f34:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f36:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000f38:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000f3a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000f3c:	9d00      	ldr	r5, [sp, #0]
 8000f3e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	03bf      	lsls	r7, r7, #14
 8000f42:	d401      	bmi.n	8000f48 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8000f44:	0035      	movs	r5, r6
 8000f46:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000f4a:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000f4c:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000f4e:	9e00      	ldr	r6, [sp, #0]
 8000f50:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f52:	03ff      	lsls	r7, r7, #15
 8000f54:	d401      	bmi.n	8000f5a <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8000f56:	4025      	ands	r5, r4
 8000f58:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000f5a:	6016      	str	r6, [r2, #0]
    position++;
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	e75e      	b.n	8000e1e <HAL_GPIO_Init+0x6>
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	50000400 	.word	0x50000400
 8000f6c:	50000800 	.word	0x50000800
 8000f70:	40010400 	.word	0x40010400

08000f74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f78:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f7a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000f7c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000f7e:	e7fc      	b.n	8000f7a <HAL_GPIO_WritePin+0x6>

08000f80 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f80:	4770      	bx	lr
	...

08000f84 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000f86:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	4210      	tst	r0, r2
 8000f8c:	d002      	beq.n	8000f94 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f8e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	f7ff fff6 	bl	8000f80 <HAL_GPIO_EXTI_Callback>
}
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	40010400 	.word	0x40010400

08000f9c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f9c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8000fa2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fa4:	4022      	ands	r2, r4
 8000fa6:	2a08      	cmp	r2, #8
 8000fa8:	d034      	beq.n	8001014 <HAL_RCC_GetSysClockFreq+0x78>
 8000faa:	2a0c      	cmp	r2, #12
 8000fac:	d00c      	beq.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x2c>
 8000fae:	2a04      	cmp	r2, #4
 8000fb0:	d128      	bne.n	8001004 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8000fb8:	4243      	negs	r3, r0
 8000fba:	4158      	adcs	r0, r3
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_RCC_GetSysClockFreq+0x80>)
 8000fbe:	4240      	negs	r0, r0
 8000fc0:	4018      	ands	r0, r3
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_RCC_GetSysClockFreq+0x84>)
 8000fc4:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000fc8:	02a2      	lsls	r2, r4, #10
 8000fca:	4816      	ldr	r0, [pc, #88]	@ (8001024 <HAL_RCC_GetSysClockFreq+0x88>)
 8000fcc:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000fce:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd0:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000fd2:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd4:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000fd6:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fd8:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000fda:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fdc:	4211      	tst	r1, r2
 8000fde:	d009      	beq.n	8000ff4 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000fe0:	4a11      	ldr	r2, [pc, #68]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f7ff f93b 	bl	8000260 <__aeabi_lmul>
 8000fea:	0022      	movs	r2, r4
 8000fec:	2300      	movs	r3, #0
 8000fee:	f7ff f917 	bl	8000220 <__aeabi_uldivmod>
 8000ff2:	e7e8      	b.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	421a      	tst	r2, r3
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000ffc:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ffe:	e7f0      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_RCC_GetSysClockFreq+0x90>)
 8001002:	e7ee      	b.n	8000fe2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001004:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001006:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001008:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800100e:	3301      	adds	r3, #1
 8001010:	4098      	lsls	r0, r3
      break;
 8001012:	e7d8      	b.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001016:	e7d6      	b.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x2a>
 8001018:	40021000 	.word	0x40021000
 800101c:	00b71b00 	.word	0x00b71b00
 8001020:	003d0900 	.word	0x003d0900
 8001024:	08002554 	.word	0x08002554
 8001028:	007a1200 	.word	0x007a1200
 800102c:	00f42400 	.word	0x00f42400

08001030 <HAL_RCC_OscConfig>:
{
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	0005      	movs	r5, r0
 8001034:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8001036:	2800      	cmp	r0, #0
 8001038:	d055      	beq.n	80010e6 <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	230c      	movs	r3, #12
 800103c:	4cc0      	ldr	r4, [pc, #768]	@ (8001340 <HAL_RCC_OscConfig+0x310>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001040:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001044:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001046:	2380      	movs	r3, #128	@ 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	0019      	movs	r1, r3
 800104c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	07d2      	lsls	r2, r2, #31
 8001050:	d43d      	bmi.n	80010ce <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	079b      	lsls	r3, r3, #30
 8001056:	d500      	bpl.n	800105a <HAL_RCC_OscConfig+0x2a>
 8001058:	e086      	b.n	8001168 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105a:	682b      	ldr	r3, [r5, #0]
 800105c:	06db      	lsls	r3, r3, #27
 800105e:	d528      	bpl.n	80010b2 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001060:	2e00      	cmp	r6, #0
 8001062:	d000      	beq.n	8001066 <HAL_RCC_OscConfig+0x36>
 8001064:	e0df      	b.n	8001226 <HAL_RCC_OscConfig+0x1f6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	059b      	lsls	r3, r3, #22
 800106a:	d502      	bpl.n	8001072 <HAL_RCC_OscConfig+0x42>
 800106c:	69ab      	ldr	r3, [r5, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d039      	beq.n	80010e6 <HAL_RCC_OscConfig+0xb6>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001072:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001074:	6862      	ldr	r2, [r4, #4]
 8001076:	49b3      	ldr	r1, [pc, #716]	@ (8001344 <HAL_RCC_OscConfig+0x314>)
 8001078:	6a2b      	ldr	r3, [r5, #32]
 800107a:	400a      	ands	r2, r1
 800107c:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800107e:	0b5b      	lsrs	r3, r3, #13
 8001080:	3301      	adds	r3, #1
 8001082:	023f      	lsls	r7, r7, #8
 8001084:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001086:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001088:	6861      	ldr	r1, [r4, #4]
 800108a:	69ea      	ldr	r2, [r5, #28]
 800108c:	0209      	lsls	r1, r1, #8
 800108e:	0a09      	lsrs	r1, r1, #8
 8001090:	0612      	lsls	r2, r2, #24
 8001092:	430a      	orrs	r2, r1
 8001094:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001096:	68e1      	ldr	r1, [r4, #12]
 8001098:	48ab      	ldr	r0, [pc, #684]	@ (8001348 <HAL_RCC_OscConfig+0x318>)
 800109a:	060b      	lsls	r3, r1, #24
 800109c:	0f1b      	lsrs	r3, r3, #28
 800109e:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010a0:	4aaa      	ldr	r2, [pc, #680]	@ (800134c <HAL_RCC_OscConfig+0x31c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010a2:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 80010a4:	4baa      	ldr	r3, [pc, #680]	@ (8001350 <HAL_RCC_OscConfig+0x320>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010a6:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	f7ff fd37 	bl	8000b1c <HAL_InitTick>
        if(status != HAL_OK)
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d130      	bne.n	8001114 <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	071b      	lsls	r3, r3, #28
 80010b6:	d500      	bpl.n	80010ba <HAL_RCC_OscConfig+0x8a>
 80010b8:	e0ec      	b.n	8001294 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	075b      	lsls	r3, r3, #29
 80010be:	d500      	bpl.n	80010c2 <HAL_RCC_OscConfig+0x92>
 80010c0:	e10e      	b.n	80012e0 <HAL_RCC_OscConfig+0x2b0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d000      	beq.n	80010ca <HAL_RCC_OscConfig+0x9a>
 80010c8:	e193      	b.n	80013f2 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
 80010cc:	e022      	b.n	8001114 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ce:	2e08      	cmp	r6, #8
 80010d0:	d003      	beq.n	80010da <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d2:	2e0c      	cmp	r6, #12
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_OscConfig+0xba>
 80010d6:	2f00      	cmp	r7, #0
 80010d8:	d007      	beq.n	80010ea <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	039b      	lsls	r3, r3, #14
 80010de:	d5b8      	bpl.n	8001052 <HAL_RCC_OscConfig+0x22>
 80010e0:	686b      	ldr	r3, [r5, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1b5      	bne.n	8001052 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
 80010e8:	e014      	b.n	8001114 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ea:	686a      	ldr	r2, [r5, #4]
 80010ec:	428a      	cmp	r2, r1
 80010ee:	d113      	bne.n	8001118 <HAL_RCC_OscConfig+0xe8>
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010f6:	f7ff fd55 	bl	8000ba4 <HAL_GetTick>
 80010fa:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	0292      	lsls	r2, r2, #10
 8001102:	4213      	tst	r3, r2
 8001104:	d1a5      	bne.n	8001052 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fd4d 	bl	8000ba4 <HAL_GetTick>
 800110a:	9b00      	ldr	r3, [sp, #0]
 800110c:	1ac0      	subs	r0, r0, r3
 800110e:	2864      	cmp	r0, #100	@ 0x64
 8001110:	d9f4      	bls.n	80010fc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
}
 8001114:	b005      	add	sp, #20
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	21a0      	movs	r1, #160	@ 0xa0
 800111a:	02c9      	lsls	r1, r1, #11
 800111c:	428a      	cmp	r2, r1
 800111e:	d105      	bne.n	800112c <HAL_RCC_OscConfig+0xfc>
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	6821      	ldr	r1, [r4, #0]
 8001124:	02d2      	lsls	r2, r2, #11
 8001126:	430a      	orrs	r2, r1
 8001128:	6022      	str	r2, [r4, #0]
 800112a:	e7e1      	b.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 800112c:	6821      	ldr	r1, [r4, #0]
 800112e:	4889      	ldr	r0, [pc, #548]	@ (8001354 <HAL_RCC_OscConfig+0x324>)
 8001130:	4001      	ands	r1, r0
 8001132:	6021      	str	r1, [r4, #0]
 8001134:	6821      	ldr	r1, [r4, #0]
 8001136:	400b      	ands	r3, r1
 8001138:	9303      	str	r3, [sp, #12]
 800113a:	9b03      	ldr	r3, [sp, #12]
 800113c:	4986      	ldr	r1, [pc, #536]	@ (8001358 <HAL_RCC_OscConfig+0x328>)
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	400b      	ands	r3, r1
 8001142:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	2a00      	cmp	r2, #0
 8001146:	d1d6      	bne.n	80010f6 <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8001148:	f7ff fd2c 	bl	8000ba4 <HAL_GetTick>
 800114c:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	0292      	lsls	r2, r2, #10
 8001154:	4213      	tst	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x12a>
 8001158:	e77b      	b.n	8001052 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115a:	f7ff fd23 	bl	8000ba4 <HAL_GetTick>
 800115e:	9b00      	ldr	r3, [sp, #0]
 8001160:	1ac0      	subs	r0, r0, r3
 8001162:	2864      	cmp	r0, #100	@ 0x64
 8001164:	d9f3      	bls.n	800114e <HAL_RCC_OscConfig+0x11e>
 8001166:	e7d4      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001168:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800116a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800116c:	4213      	tst	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001170:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001172:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001174:	4311      	orrs	r1, r2
 8001176:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001178:	2e04      	cmp	r6, #4
 800117a:	d003      	beq.n	8001184 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800117c:	2e0c      	cmp	r6, #12
 800117e:	d124      	bne.n	80011ca <HAL_RCC_OscConfig+0x19a>
 8001180:	2f00      	cmp	r7, #0
 8001182:	d122      	bne.n	80011ca <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	0752      	lsls	r2, r2, #29
 8001188:	d501      	bpl.n	800118e <HAL_RCC_OscConfig+0x15e>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0ab      	beq.n	80010e6 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	6861      	ldr	r1, [r4, #4]
 8001190:	692a      	ldr	r2, [r5, #16]
 8001192:	4872      	ldr	r0, [pc, #456]	@ (800135c <HAL_RCC_OscConfig+0x32c>)
 8001194:	0212      	lsls	r2, r2, #8
 8001196:	4001      	ands	r1, r0
 8001198:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800119a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800119e:	6822      	ldr	r2, [r4, #0]
 80011a0:	438a      	bics	r2, r1
 80011a2:	4313      	orrs	r3, r2
 80011a4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f7ff fef9 	bl	8000f9c <HAL_RCC_GetSysClockFreq>
 80011aa:	68e3      	ldr	r3, [r4, #12]
 80011ac:	4a66      	ldr	r2, [pc, #408]	@ (8001348 <HAL_RCC_OscConfig+0x318>)
 80011ae:	061b      	lsls	r3, r3, #24
 80011b0:	0f1b      	lsrs	r3, r3, #28
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	4965      	ldr	r1, [pc, #404]	@ (800134c <HAL_RCC_OscConfig+0x31c>)
 80011b6:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80011b8:	4b65      	ldr	r3, [pc, #404]	@ (8001350 <HAL_RCC_OscConfig+0x320>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ba:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	f7ff fcad 	bl	8000b1c <HAL_InitTick>
      if(status != HAL_OK)
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d100      	bne.n	80011c8 <HAL_RCC_OscConfig+0x198>
 80011c6:	e748      	b.n	800105a <HAL_RCC_OscConfig+0x2a>
 80011c8:	e7a4      	b.n	8001114 <HAL_RCC_OscConfig+0xe4>
      if(hsi_state != RCC_HSI_OFF)
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011ce:	2109      	movs	r1, #9
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	438a      	bics	r2, r1
 80011d4:	4313      	orrs	r3, r2
 80011d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011d8:	f7ff fce4 	bl	8000ba4 <HAL_GetTick>
 80011dc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011de:	2204      	movs	r2, #4
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	4213      	tst	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	6862      	ldr	r2, [r4, #4]
 80011e8:	692b      	ldr	r3, [r5, #16]
 80011ea:	495c      	ldr	r1, [pc, #368]	@ (800135c <HAL_RCC_OscConfig+0x32c>)
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	400a      	ands	r2, r1
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6063      	str	r3, [r4, #4]
 80011f4:	e731      	b.n	800105a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fcd5 	bl	8000ba4 <HAL_GetTick>
 80011fa:	1bc0      	subs	r0, r0, r7
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d9ee      	bls.n	80011de <HAL_RCC_OscConfig+0x1ae>
 8001200:	e787      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8001202:	2201      	movs	r2, #1
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	4393      	bics	r3, r2
 8001208:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800120a:	f7ff fccb 	bl	8000ba4 <HAL_GetTick>
 800120e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001210:	2204      	movs	r2, #4
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	4213      	tst	r3, r2
 8001216:	d100      	bne.n	800121a <HAL_RCC_OscConfig+0x1ea>
 8001218:	e71f      	b.n	800105a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fcc3 	bl	8000ba4 <HAL_GetTick>
 800121e:	1bc0      	subs	r0, r0, r7
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f5      	bls.n	8001210 <HAL_RCC_OscConfig+0x1e0>
 8001224:	e775      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001226:	69ab      	ldr	r3, [r5, #24]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_MSI_ENABLE();
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4313      	orrs	r3, r2
 8001234:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001236:	f7ff fcb5 	bl	8000ba4 <HAL_GetTick>
 800123a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4213      	tst	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001246:	6863      	ldr	r3, [r4, #4]
 8001248:	4a3e      	ldr	r2, [pc, #248]	@ (8001344 <HAL_RCC_OscConfig+0x314>)
 800124a:	4013      	ands	r3, r2
 800124c:	6a2a      	ldr	r2, [r5, #32]
 800124e:	4313      	orrs	r3, r2
 8001250:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	69eb      	ldr	r3, [r5, #28]
 8001256:	0212      	lsls	r2, r2, #8
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	0a12      	lsrs	r2, r2, #8
 800125c:	4313      	orrs	r3, r2
 800125e:	6063      	str	r3, [r4, #4]
 8001260:	e727      	b.n	80010b2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001262:	f7ff fc9f 	bl	8000ba4 <HAL_GetTick>
 8001266:	1bc0      	subs	r0, r0, r7
 8001268:	2802      	cmp	r0, #2
 800126a:	d9e7      	bls.n	800123c <HAL_RCC_OscConfig+0x20c>
 800126c:	e751      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <HAL_RCC_OscConfig+0x330>)
 8001272:	4013      	ands	r3, r2
 8001274:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001276:	f7ff fc95 	bl	8000ba4 <HAL_GetTick>
 800127a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4213      	tst	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_RCC_OscConfig+0x258>
 8001286:	e714      	b.n	80010b2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001288:	f7ff fc8c 	bl	8000ba4 <HAL_GetTick>
 800128c:	1bc0      	subs	r0, r0, r7
 800128e:	2802      	cmp	r0, #2
 8001290:	d9f4      	bls.n	800127c <HAL_RCC_OscConfig+0x24c>
 8001292:	e73e      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001294:	696a      	ldr	r2, [r5, #20]
 8001296:	2301      	movs	r3, #1
 8001298:	2a00      	cmp	r2, #0
 800129a:	d010      	beq.n	80012be <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_LSI_ENABLE();
 800129c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800129e:	4313      	orrs	r3, r2
 80012a0:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80012a2:	f7ff fc7f 	bl	8000ba4 <HAL_GetTick>
 80012a6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012a8:	2202      	movs	r2, #2
 80012aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80012ac:	4213      	tst	r3, r2
 80012ae:	d000      	beq.n	80012b2 <HAL_RCC_OscConfig+0x282>
 80012b0:	e703      	b.n	80010ba <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc77 	bl	8000ba4 <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d9f5      	bls.n	80012a8 <HAL_RCC_OscConfig+0x278>
 80012bc:	e729      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 80012be:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80012c0:	439a      	bics	r2, r3
 80012c2:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc6e 	bl	8000ba4 <HAL_GetTick>
 80012c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012ca:	2202      	movs	r2, #2
 80012cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80012ce:	4213      	tst	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2a4>
 80012d2:	e6f2      	b.n	80010ba <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc66 	bl	8000ba4 <HAL_GetTick>
 80012d8:	1bc0      	subs	r0, r0, r7
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9f5      	bls.n	80012ca <HAL_RCC_OscConfig+0x29a>
 80012de:	e718      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e0:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80012e6:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80012e8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	421a      	tst	r2, r3
 80012ec:	d104      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80012f0:	4313      	orrs	r3, r2
 80012f2:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 80012f4:	2301      	movs	r3, #1
 80012f6:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	4f1a      	ldr	r7, [pc, #104]	@ (8001364 <HAL_RCC_OscConfig+0x334>)
 80012fc:	0052      	lsls	r2, r2, #1
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4213      	tst	r3, r2
 8001302:	d008      	beq.n	8001316 <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	68ab      	ldr	r3, [r5, #8]
 8001308:	0052      	lsls	r2, r2, #1
 800130a:	4293      	cmp	r3, r2
 800130c:	d12c      	bne.n	8001368 <HAL_RCC_OscConfig+0x338>
 800130e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001310:	4313      	orrs	r3, r2
 8001312:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001314:	e04d      	b.n	80013b2 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	0052      	lsls	r2, r2, #1
 800131c:	4313      	orrs	r3, r2
 800131e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001320:	f7ff fc40 	bl	8000ba4 <HAL_GetTick>
 8001324:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	4213      	tst	r3, r2
 800132e:	d1e9      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001330:	f7ff fc38 	bl	8000ba4 <HAL_GetTick>
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	1ac0      	subs	r0, r0, r3
 8001338:	2864      	cmp	r0, #100	@ 0x64
 800133a:	d9f4      	bls.n	8001326 <HAL_RCC_OscConfig+0x2f6>
 800133c:	e6e9      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	40021000 	.word	0x40021000
 8001344:	ffff1fff 	.word	0xffff1fff
 8001348:	08002565 	.word	0x08002565
 800134c:	20000004 	.word	0x20000004
 8001350:	2000000c 	.word	0x2000000c
 8001354:	fffeffff 	.word	0xfffeffff
 8001358:	fffbffff 	.word	0xfffbffff
 800135c:	ffffe0ff 	.word	0xffffe0ff
 8001360:	fffffeff 	.word	0xfffffeff
 8001364:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x36a>
 800136c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800136e:	4a51      	ldr	r2, [pc, #324]	@ (80014b4 <HAL_RCC_OscConfig+0x484>)
 8001370:	4013      	ands	r3, r2
 8001372:	6523      	str	r3, [r4, #80]	@ 0x50
 8001374:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001376:	4a50      	ldr	r2, [pc, #320]	@ (80014b8 <HAL_RCC_OscConfig+0x488>)
 8001378:	4013      	ands	r3, r2
 800137a:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 800137c:	f7ff fc12 	bl	8000ba4 <HAL_GetTick>
 8001380:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4213      	tst	r3, r2
 800138a:	d01a      	beq.n	80013c2 <HAL_RCC_OscConfig+0x392>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fc0a 	bl	8000ba4 <HAL_GetTick>
 8001390:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <HAL_RCC_OscConfig+0x48c>)
 8001392:	1bc0      	subs	r0, r0, r7
 8001394:	4298      	cmp	r0, r3
 8001396:	d9f4      	bls.n	8001382 <HAL_RCC_OscConfig+0x352>
 8001398:	e6bb      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139a:	21a0      	movs	r1, #160	@ 0xa0
 800139c:	00c9      	lsls	r1, r1, #3
 800139e:	428b      	cmp	r3, r1
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x3a4>
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6523      	str	r3, [r4, #80]	@ 0x50
 80013ac:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80013ae:	431a      	orrs	r2, r3
 80013b0:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbf7 	bl	8000ba4 <HAL_GetTick>
 80013b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4213      	tst	r3, r2
 80013c0:	d010      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3b4>
    if(pwrclkchanged == SET)
 80013c2:	9b00      	ldr	r3, [sp, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d000      	beq.n	80013ca <HAL_RCC_OscConfig+0x39a>
 80013c8:	e67b      	b.n	80010c2 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80013cc:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <HAL_RCC_OscConfig+0x490>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80013d2:	e676      	b.n	80010c2 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80013d6:	4a37      	ldr	r2, [pc, #220]	@ (80014b4 <HAL_RCC_OscConfig+0x484>)
 80013d8:	4013      	ands	r3, r2
 80013da:	6523      	str	r3, [r4, #80]	@ 0x50
 80013dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80013de:	4a36      	ldr	r2, [pc, #216]	@ (80014b8 <HAL_RCC_OscConfig+0x488>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	e796      	b.n	8001312 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbde 	bl	8000ba4 <HAL_GetTick>
 80013e8:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <HAL_RCC_OscConfig+0x48c>)
 80013ea:	1bc0      	subs	r0, r0, r7
 80013ec:	4298      	cmp	r0, r3
 80013ee:	d9e3      	bls.n	80013b8 <HAL_RCC_OscConfig+0x388>
 80013f0:	e68f      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f2:	2e0c      	cmp	r6, #12
 80013f4:	d043      	beq.n	800147e <HAL_RCC_OscConfig+0x44e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f6:	4a33      	ldr	r2, [pc, #204]	@ (80014c4 <HAL_RCC_OscConfig+0x494>)
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d12e      	bne.n	800145a <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_DISABLE();
 80013fc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013fe:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001400:	4013      	ands	r3, r2
 8001402:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001404:	f7ff fbce 	bl	8000ba4 <HAL_GetTick>
 8001408:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800140a:	04bf      	lsls	r7, r7, #18
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	423b      	tst	r3, r7
 8001410:	d11d      	bne.n	800144e <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001414:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001416:	68e2      	ldr	r2, [r4, #12]
 8001418:	430b      	orrs	r3, r1
 800141a:	492b      	ldr	r1, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800141c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141e:	400a      	ands	r2, r1
 8001420:	4313      	orrs	r3, r2
 8001422:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001424:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001426:	4313      	orrs	r3, r2
 8001428:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	045b      	lsls	r3, r3, #17
 8001430:	4313      	orrs	r3, r2
 8001432:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001434:	f7ff fbb6 	bl	8000ba4 <HAL_GetTick>
 8001438:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	4233      	tst	r3, r6
 800143e:	d000      	beq.n	8001442 <HAL_RCC_OscConfig+0x412>
 8001440:	e643      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fbaf 	bl	8000ba4 <HAL_GetTick>
 8001446:	1b40      	subs	r0, r0, r5
 8001448:	2802      	cmp	r0, #2
 800144a:	d9f6      	bls.n	800143a <HAL_RCC_OscConfig+0x40a>
 800144c:	e661      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fba9 	bl	8000ba4 <HAL_GetTick>
 8001452:	1b80      	subs	r0, r0, r6
 8001454:	2802      	cmp	r0, #2
 8001456:	d9d9      	bls.n	800140c <HAL_RCC_OscConfig+0x3dc>
 8001458:	e65b      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 800145a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800145c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800145e:	4013      	ands	r3, r2
 8001460:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001462:	f7ff fb9f 	bl	8000ba4 <HAL_GetTick>
 8001466:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001468:	04b6      	lsls	r6, r6, #18
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	4233      	tst	r3, r6
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x442>
 8001470:	e62b      	b.n	80010ca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fb97 	bl	8000ba4 <HAL_GetTick>
 8001476:	1b40      	subs	r0, r0, r5
 8001478:	2802      	cmp	r0, #2
 800147a:	d9f6      	bls.n	800146a <HAL_RCC_OscConfig+0x43a>
 800147c:	e649      	b.n	8001112 <HAL_RCC_OscConfig+0xe2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147e:	2b01      	cmp	r3, #1
 8001480:	d100      	bne.n	8001484 <HAL_RCC_OscConfig+0x454>
 8001482:	e630      	b.n	80010e6 <HAL_RCC_OscConfig+0xb6>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8001486:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001488:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	4003      	ands	r3, r0
 800148e:	4293      	cmp	r3, r2
 8001490:	d000      	beq.n	8001494 <HAL_RCC_OscConfig+0x464>
 8001492:	e628      	b.n	80010e6 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001494:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001498:	039b      	lsls	r3, r3, #14
 800149a:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	4293      	cmp	r3, r2
 800149e:	d000      	beq.n	80014a2 <HAL_RCC_OscConfig+0x472>
 80014a0:	e621      	b.n	80010e6 <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014a2:	23c0      	movs	r3, #192	@ 0xc0
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80014aa:	1ac0      	subs	r0, r0, r3
 80014ac:	1e43      	subs	r3, r0, #1
 80014ae:	4198      	sbcs	r0, r3
 80014b0:	b2c0      	uxtb	r0, r0
 80014b2:	e62f      	b.n	8001114 <HAL_RCC_OscConfig+0xe4>
 80014b4:	fffffeff 	.word	0xfffffeff
 80014b8:	fffffbff 	.word	0xfffffbff
 80014bc:	00001388 	.word	0x00001388
 80014c0:	efffffff 	.word	0xefffffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	ff02ffff 	.word	0xff02ffff

080014cc <HAL_RCC_ClockConfig>:
{
 80014cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014ce:	1e04      	subs	r4, r0, #0
 80014d0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
}
 80014d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	2501      	movs	r5, #1
 80014da:	4e5b      	ldr	r6, [pc, #364]	@ (8001648 <HAL_RCC_ClockConfig+0x17c>)
 80014dc:	9a01      	ldr	r2, [sp, #4]
 80014de:	6833      	ldr	r3, [r6, #0]
 80014e0:	402b      	ands	r3, r5
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d331      	bcc.n	800154a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e6:	6822      	ldr	r2, [r4, #0]
 80014e8:	0793      	lsls	r3, r2, #30
 80014ea:	d443      	bmi.n	8001574 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ec:	07d2      	lsls	r2, r2, #31
 80014ee:	d449      	bmi.n	8001584 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	2501      	movs	r5, #1
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	9a01      	ldr	r2, [sp, #4]
 80014f6:	402b      	ands	r3, r5
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d909      	bls.n	8001510 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fc:	6833      	ldr	r3, [r6, #0]
 80014fe:	43ab      	bics	r3, r5
 8001500:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001502:	f7ff fb4f 	bl	8000ba4 <HAL_GetTick>
 8001506:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001508:	6833      	ldr	r3, [r6, #0]
 800150a:	422b      	tst	r3, r5
 800150c:	d000      	beq.n	8001510 <HAL_RCC_ClockConfig+0x44>
 800150e:	e08c      	b.n	800162a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	4d4e      	ldr	r5, [pc, #312]	@ (800164c <HAL_RCC_ClockConfig+0x180>)
 8001514:	0753      	lsls	r3, r2, #29
 8001516:	d500      	bpl.n	800151a <HAL_RCC_ClockConfig+0x4e>
 8001518:	e08f      	b.n	800163a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151a:	0712      	lsls	r2, r2, #28
 800151c:	d506      	bpl.n	800152c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800151e:	68ea      	ldr	r2, [r5, #12]
 8001520:	6923      	ldr	r3, [r4, #16]
 8001522:	494b      	ldr	r1, [pc, #300]	@ (8001650 <HAL_RCC_ClockConfig+0x184>)
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	400a      	ands	r2, r1
 8001528:	4313      	orrs	r3, r2
 800152a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152c:	f7ff fd36 	bl	8000f9c <HAL_RCC_GetSysClockFreq>
 8001530:	68eb      	ldr	r3, [r5, #12]
 8001532:	4a48      	ldr	r2, [pc, #288]	@ (8001654 <HAL_RCC_ClockConfig+0x188>)
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	0f1b      	lsrs	r3, r3, #28
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	4947      	ldr	r1, [pc, #284]	@ (8001658 <HAL_RCC_ClockConfig+0x18c>)
 800153c:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001540:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f7ff faea 	bl	8000b1c <HAL_InitTick>
  if(status != HAL_OK)
 8001548:	e7c5      	b.n	80014d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	6833      	ldr	r3, [r6, #0]
 800154c:	9a01      	ldr	r2, [sp, #4]
 800154e:	43ab      	bics	r3, r5
 8001550:	4313      	orrs	r3, r2
 8001552:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001554:	f7ff fb26 	bl	8000ba4 <HAL_GetTick>
 8001558:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	6833      	ldr	r3, [r6, #0]
 800155c:	9a01      	ldr	r2, [sp, #4]
 800155e:	402b      	ands	r3, r5
 8001560:	4293      	cmp	r3, r2
 8001562:	d0c0      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fb1e 	bl	8000ba4 <HAL_GetTick>
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 800156a:	1bc0      	subs	r0, r0, r7
 800156c:	4298      	cmp	r0, r3
 800156e:	d9f4      	bls.n	800155a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001570:	2003      	movs	r0, #3
 8001572:	e7b0      	b.n	80014d6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	20f0      	movs	r0, #240	@ 0xf0
 8001576:	4935      	ldr	r1, [pc, #212]	@ (800164c <HAL_RCC_ClockConfig+0x180>)
 8001578:	68cb      	ldr	r3, [r1, #12]
 800157a:	4383      	bics	r3, r0
 800157c:	68a0      	ldr	r0, [r4, #8]
 800157e:	4303      	orrs	r3, r0
 8001580:	60cb      	str	r3, [r1, #12]
 8001582:	e7b3      	b.n	80014ec <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001584:	4d31      	ldr	r5, [pc, #196]	@ (800164c <HAL_RCC_ClockConfig+0x180>)
 8001586:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001588:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	2a02      	cmp	r2, #2
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800158e:	039b      	lsls	r3, r3, #14
 8001590:	d5a0      	bpl.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	2103      	movs	r1, #3
 8001594:	68eb      	ldr	r3, [r5, #12]
 8001596:	438b      	bics	r3, r1
 8001598:	4313      	orrs	r3, r2
 800159a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800159c:	f7ff fb02 	bl	8000ba4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80015a2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d118      	bne.n	80015da <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	220c      	movs	r2, #12
 80015aa:	68eb      	ldr	r3, [r5, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d09e      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	f7ff faf7 	bl	8000ba4 <HAL_GetTick>
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 80015b8:	1bc0      	subs	r0, r0, r7
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d9f4      	bls.n	80015a8 <HAL_RCC_ClockConfig+0xdc>
 80015be:	e7d7      	b.n	8001570 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	2a03      	cmp	r2, #3
 80015c2:	d102      	bne.n	80015ca <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	d4e4      	bmi.n	8001592 <HAL_RCC_ClockConfig+0xc6>
 80015c8:	e784      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015ca:	2a01      	cmp	r2, #1
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ce:	075b      	lsls	r3, r3, #29
 80015d0:	d4df      	bmi.n	8001592 <HAL_RCC_ClockConfig+0xc6>
 80015d2:	e77f      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d4:	059b      	lsls	r3, r3, #22
 80015d6:	d4dc      	bmi.n	8001592 <HAL_RCC_ClockConfig+0xc6>
 80015d8:	e77c      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015de:	220c      	movs	r2, #12
 80015e0:	68eb      	ldr	r3, [r5, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d083      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff fadc 	bl	8000ba4 <HAL_GetTick>
 80015ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 80015ee:	1bc0      	subs	r0, r0, r7
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d9f4      	bls.n	80015de <HAL_RCC_ClockConfig+0x112>
 80015f4:	e7bc      	b.n	8001570 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d011      	beq.n	800161e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015fa:	220c      	movs	r2, #12
 80015fc:	68eb      	ldr	r3, [r5, #12]
 80015fe:	4213      	tst	r3, r2
 8001600:	d100      	bne.n	8001604 <HAL_RCC_ClockConfig+0x138>
 8001602:	e775      	b.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff face 	bl	8000ba4 <HAL_GetTick>
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 800160a:	1bc0      	subs	r0, r0, r7
 800160c:	4298      	cmp	r0, r3
 800160e:	d9f4      	bls.n	80015fa <HAL_RCC_ClockConfig+0x12e>
 8001610:	e7ae      	b.n	8001570 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001612:	f7ff fac7 	bl	8000ba4 <HAL_GetTick>
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 8001618:	1bc0      	subs	r0, r0, r7
 800161a:	4298      	cmp	r0, r3
 800161c:	d8a8      	bhi.n	8001570 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800161e:	220c      	movs	r2, #12
 8001620:	68eb      	ldr	r3, [r5, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b04      	cmp	r3, #4
 8001626:	d1f4      	bne.n	8001612 <HAL_RCC_ClockConfig+0x146>
 8001628:	e762      	b.n	80014f0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7ff fabb 	bl	8000ba4 <HAL_GetTick>
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_RCC_ClockConfig+0x194>)
 8001630:	1bc0      	subs	r0, r0, r7
 8001632:	4298      	cmp	r0, r3
 8001634:	d800      	bhi.n	8001638 <HAL_RCC_ClockConfig+0x16c>
 8001636:	e767      	b.n	8001508 <HAL_RCC_ClockConfig+0x3c>
 8001638:	e79a      	b.n	8001570 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163a:	68eb      	ldr	r3, [r5, #12]
 800163c:	4909      	ldr	r1, [pc, #36]	@ (8001664 <HAL_RCC_ClockConfig+0x198>)
 800163e:	400b      	ands	r3, r1
 8001640:	68e1      	ldr	r1, [r4, #12]
 8001642:	430b      	orrs	r3, r1
 8001644:	60eb      	str	r3, [r5, #12]
 8001646:	e768      	b.n	800151a <HAL_RCC_ClockConfig+0x4e>
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	ffffc7ff 	.word	0xffffc7ff
 8001654:	08002565 	.word	0x08002565
 8001658:	20000004 	.word	0x20000004
 800165c:	2000000c 	.word	0x2000000c
 8001660:	00001388 	.word	0x00001388
 8001664:	fffff8ff 	.word	0xfffff8ff

08001668 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001668:	4b04      	ldr	r3, [pc, #16]	@ (800167c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4905      	ldr	r1, [pc, #20]	@ (8001684 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001670:	055b      	lsls	r3, r3, #21
 8001672:	0f5b      	lsrs	r3, r3, #29
 8001674:	5ccb      	ldrb	r3, [r1, r3]
 8001676:	6810      	ldr	r0, [r2, #0]
 8001678:	40d8      	lsrs	r0, r3
}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	20000004 	.word	0x20000004
 8001684:	0800255d 	.word	0x0800255d

08001688 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001688:	6803      	ldr	r3, [r0, #0]
{
 800168a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800168c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800168e:	069b      	lsls	r3, r3, #26
 8001690:	d52b      	bpl.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8001694:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4c51      	ldr	r4, [pc, #324]	@ (80017dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001698:	055b      	lsls	r3, r3, #21
 800169a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 800169c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	421a      	tst	r2, r3
 80016a0:	d104      	bne.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80016a4:	4313      	orrs	r3, r2
 80016a6:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	2780      	movs	r7, #128	@ 0x80
 80016ae:	4e4c      	ldr	r6, [pc, #304]	@ (80017e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80016b0:	007f      	lsls	r7, r7, #1
 80016b2:	6833      	ldr	r3, [r6, #0]
 80016b4:	423b      	tst	r3, r7
 80016b6:	d038      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80016b8:	20c0      	movs	r0, #192	@ 0xc0
 80016ba:	22c0      	movs	r2, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80016bc:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80016be:	686b      	ldr	r3, [r5, #4]
 80016c0:	0380      	lsls	r0, r0, #14
 80016c2:	4059      	eors	r1, r3
 80016c4:	0292      	lsls	r2, r2, #10
 80016c6:	4201      	tst	r1, r0
 80016c8:	d140      	bne.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80016ca:	6d20      	ldr	r0, [r4, #80]	@ 0x50

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016cc:	6829      	ldr	r1, [r5, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80016ce:	0006      	movs	r6, r0
 80016d0:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016d2:	4210      	tst	r0, r2
 80016d4:	d143      	bne.n	800175e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	069b      	lsls	r3, r3, #26
 80016da:	d454      	bmi.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016dc:	9b00      	ldr	r3, [sp, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d103      	bne.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80016e4:	4a3f      	ldr	r2, [pc, #252]	@ (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	079a      	lsls	r2, r3, #30
 80016ee:	d506      	bpl.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016f0:	200c      	movs	r0, #12
 80016f2:	493a      	ldr	r1, [pc, #232]	@ (80017dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80016f4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80016f6:	4382      	bics	r2, r0
 80016f8:	68a8      	ldr	r0, [r5, #8]
 80016fa:	4302      	orrs	r2, r0
 80016fc:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80016fe:	075a      	lsls	r2, r3, #29
 8001700:	d506      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001702:	4936      	ldr	r1, [pc, #216]	@ (80017dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001704:	4838      	ldr	r0, [pc, #224]	@ (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001706:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001708:	4002      	ands	r2, r0
 800170a:	68e8      	ldr	r0, [r5, #12]
 800170c:	4302      	orrs	r2, r0
 800170e:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001710:	071a      	lsls	r2, r3, #28
 8001712:	d506      	bpl.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001714:	4931      	ldr	r1, [pc, #196]	@ (80017dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001716:	4835      	ldr	r0, [pc, #212]	@ (80017ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001718:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800171a:	4002      	ands	r2, r0
 800171c:	6928      	ldr	r0, [r5, #16]
 800171e:	4302      	orrs	r2, r0
 8001720:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	d452      	bmi.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001726:	2000      	movs	r0, #0
 8001728:	e00f      	b.n	800174a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	6833      	ldr	r3, [r6, #0]
 800172c:	433b      	orrs	r3, r7
 800172e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001730:	f7ff fa38 	bl	8000ba4 <HAL_GetTick>
 8001734:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	6833      	ldr	r3, [r6, #0]
 8001738:	423b      	tst	r3, r7
 800173a:	d1bd      	bne.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff fa32 	bl	8000ba4 <HAL_GetTick>
 8001740:	9b01      	ldr	r3, [sp, #4]
 8001742:	1ac0      	subs	r0, r0, r3
 8001744:	2864      	cmp	r0, #100	@ 0x64
 8001746:	d9f6      	bls.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0xae>
          return HAL_TIMEOUT;
 8001748:	2003      	movs	r0, #3
}
 800174a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800174c:	0019      	movs	r1, r3
 800174e:	4011      	ands	r1, r2
 8001750:	4291      	cmp	r1, r2
 8001752:	d1ba      	bne.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001754:	6821      	ldr	r1, [r4, #0]
          return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001758:	0389      	lsls	r1, r1, #14
 800175a:	d5b6      	bpl.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 800175c:	e7f5      	b.n	800174a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800175e:	4013      	ands	r3, r2
 8001760:	42b3      	cmp	r3, r6
 8001762:	d0b8      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001764:	0689      	lsls	r1, r1, #26
 8001766:	d5b9      	bpl.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001768:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800176a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800176c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800176e:	0309      	lsls	r1, r1, #12
 8001770:	4301      	orrs	r1, r0
 8001772:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001774:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001776:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001778:	481e      	ldr	r0, [pc, #120]	@ (80017f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800177a:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800177c:	4001      	ands	r1, r0
 800177e:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8001780:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001782:	05db      	lsls	r3, r3, #23
 8001784:	d412      	bmi.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x124>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001786:	6869      	ldr	r1, [r5, #4]
 8001788:	23c0      	movs	r3, #192	@ 0xc0
 800178a:	000a      	movs	r2, r1
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	401a      	ands	r2, r3
 8001790:	429a      	cmp	r2, r3
 8001792:	d107      	bne.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001798:	4003      	ands	r3, r0
 800179a:	20c0      	movs	r0, #192	@ 0xc0
 800179c:	0380      	lsls	r0, r0, #14
 800179e:	4001      	ands	r1, r0
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6023      	str	r3, [r4, #0]
 80017a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80017a6:	431a      	orrs	r2, r3
 80017a8:	6522      	str	r2, [r4, #80]	@ 0x50
 80017aa:	e797      	b.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9fa 	bl	8000ba4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017b0:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80017b2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017b4:	00bf      	lsls	r7, r7, #2
 80017b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80017b8:	423b      	tst	r3, r7
 80017ba:	d000      	beq.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x136>
 80017bc:	e78b      	b.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f9f1 	bl	8000ba4 <HAL_GetTick>
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80017c4:	1b80      	subs	r0, r0, r6
 80017c6:	4298      	cmp	r0, r3
 80017c8:	d9f5      	bls.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80017ca:	e7bd      	b.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80017cc:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80017ce:	490c      	ldr	r1, [pc, #48]	@ (8001800 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80017d0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80017d2:	400b      	ands	r3, r1
 80017d4:	6969      	ldr	r1, [r5, #20]
 80017d6:	430b      	orrs	r3, r1
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	e7a4      	b.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	efffffff 	.word	0xefffffff
 80017e8:	fffff3ff 	.word	0xfffff3ff
 80017ec:	ffffcfff 	.word	0xffffcfff
 80017f0:	fffcffff 	.word	0xfffcffff
 80017f4:	fff7ffff 	.word	0xfff7ffff
 80017f8:	ffcfffff 	.word	0xffcfffff
 80017fc:	00001388 	.word	0x00001388
 8001800:	fff3ffff 	.word	0xfff3ffff

08001804 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001804:	2280      	movs	r2, #128	@ 0x80
{
 8001806:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001808:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800180a:	05d2      	lsls	r2, r2, #23
 800180c:	4290      	cmp	r0, r2
 800180e:	d002      	beq.n	8001816 <TIM_Base_SetConfig+0x12>
 8001810:	4c0d      	ldr	r4, [pc, #52]	@ (8001848 <TIM_Base_SetConfig+0x44>)
 8001812:	42a0      	cmp	r0, r4
 8001814:	d10c      	bne.n	8001830 <TIM_Base_SetConfig+0x2c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001816:	2470      	movs	r4, #112	@ 0x70
 8001818:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800181a:	684c      	ldr	r4, [r1, #4]
 800181c:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181e:	4290      	cmp	r0, r2
 8001820:	d002      	beq.n	8001828 <TIM_Base_SetConfig+0x24>
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <TIM_Base_SetConfig+0x44>)
 8001824:	4290      	cmp	r0, r2
 8001826:	d103      	bne.n	8001830 <TIM_Base_SetConfig+0x2c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <TIM_Base_SetConfig+0x48>)
 800182a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800182c:	68ca      	ldr	r2, [r1, #12]
 800182e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	4393      	bics	r3, r2
 8001834:	690a      	ldr	r2, [r1, #16]
 8001836:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001838:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800183a:	688b      	ldr	r3, [r1, #8]
 800183c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800183e:	680b      	ldr	r3, [r1, #0]
 8001840:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001842:	2301      	movs	r3, #1
 8001844:	6143      	str	r3, [r0, #20]
}
 8001846:	bd10      	pop	{r4, pc}
 8001848:	40010800 	.word	0x40010800
 800184c:	fffffcff 	.word	0xfffffcff

08001850 <HAL_TIM_Base_Init>:
{
 8001850:	b570      	push	{r4, r5, r6, lr}
 8001852:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
  if (htim == NULL)
 8001856:	2c00      	cmp	r4, #0
 8001858:	d01d      	beq.n	8001896 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800185a:	0025      	movs	r5, r4
 800185c:	3539      	adds	r5, #57	@ 0x39
 800185e:	782b      	ldrb	r3, [r5, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001866:	0023      	movs	r3, r4
 8001868:	3338      	adds	r3, #56	@ 0x38
    HAL_TIM_Base_MspInit(htim);
 800186a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800186c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800186e:	f7ff f879 	bl	8000964 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001876:	6820      	ldr	r0, [r4, #0]
 8001878:	1d21      	adds	r1, r4, #4
 800187a:	f7ff ffc3 	bl	8001804 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187e:	0022      	movs	r2, r4
 8001880:	2301      	movs	r3, #1
  return HAL_OK;
 8001882:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001884:	323e      	adds	r2, #62	@ 0x3e
 8001886:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001888:	343d      	adds	r4, #61	@ 0x3d
 800188a:	3a04      	subs	r2, #4
 800188c:	7013      	strb	r3, [r2, #0]
 800188e:	7053      	strb	r3, [r2, #1]
 8001890:	7093      	strb	r3, [r2, #2]
 8001892:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001894:	702b      	strb	r3, [r5, #0]
}
 8001896:	bd70      	pop	{r4, r5, r6, pc}

08001898 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001898:	0001      	movs	r1, r0
{
 800189a:	0003      	movs	r3, r0
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
{
 800189e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80018a0:	3139      	adds	r1, #57	@ 0x39
 80018a2:	780c      	ldrb	r4, [r1, #0]
 80018a4:	b2e2      	uxtb	r2, r4
 80018a6:	4284      	cmp	r4, r0
 80018a8:	d116      	bne.n	80018d8 <HAL_TIM_Base_Start_IT+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80018aa:	1800      	adds	r0, r0, r0
 80018ac:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	4311      	orrs	r1, r2
 80018b4:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	05c9      	lsls	r1, r1, #23
 80018ba:	428b      	cmp	r3, r1
 80018bc:	d002      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x2c>
 80018be:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <HAL_TIM_Base_Start_IT+0x48>)
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d10a      	bne.n	80018da <HAL_TIM_Base_Start_IT+0x42>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c4:	2107      	movs	r1, #7
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ca:	2a06      	cmp	r2, #6
 80018cc:	d003      	beq.n	80018d6 <HAL_TIM_Base_Start_IT+0x3e>
      __HAL_TIM_ENABLE(htim);
 80018ce:	2201      	movs	r2, #1
 80018d0:	6819      	ldr	r1, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018d6:	2000      	movs	r0, #0
}
 80018d8:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	e7f9      	b.n	80018d2 <HAL_TIM_Base_Start_IT+0x3a>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	40010800 	.word	0x40010800

080018e4 <HAL_TIM_ConfigClockSource>:
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80018e6:	0004      	movs	r4, r0
 80018e8:	2202      	movs	r2, #2
 80018ea:	3438      	adds	r4, #56	@ 0x38
 80018ec:	7825      	ldrb	r5, [r4, #0]
{
 80018ee:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80018f0:	0010      	movs	r0, r2
 80018f2:	2d01      	cmp	r5, #1
 80018f4:	d01c      	beq.n	8001930 <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80018f6:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 80018f8:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80018fa:	3539      	adds	r5, #57	@ 0x39
  __HAL_LOCK(htim);
 80018fc:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018fe:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001900:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001902:	4e46      	ldr	r6, [pc, #280]	@ (8001a1c <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr = htim->Instance->SMCR;
 8001904:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001906:	4032      	ands	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8001908:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800190a:	680a      	ldr	r2, [r1, #0]
 800190c:	2a60      	cmp	r2, #96	@ 0x60
 800190e:	d059      	beq.n	80019c4 <HAL_TIM_ConfigClockSource+0xe0>
 8001910:	d82e      	bhi.n	8001970 <HAL_TIM_ConfigClockSource+0x8c>
 8001912:	2a40      	cmp	r2, #64	@ 0x40
 8001914:	d100      	bne.n	8001918 <HAL_TIM_ConfigClockSource+0x34>
 8001916:	e06c      	b.n	80019f2 <HAL_TIM_ConfigClockSource+0x10e>
 8001918:	d813      	bhi.n	8001942 <HAL_TIM_ConfigClockSource+0x5e>
 800191a:	2a20      	cmp	r2, #32
 800191c:	d00b      	beq.n	8001936 <HAL_TIM_ConfigClockSource+0x52>
 800191e:	d808      	bhi.n	8001932 <HAL_TIM_ConfigClockSource+0x4e>
 8001920:	2110      	movs	r1, #16
 8001922:	0016      	movs	r6, r2
 8001924:	438e      	bics	r6, r1
 8001926:	d006      	beq.n	8001936 <HAL_TIM_ConfigClockSource+0x52>
  htim->State = HAL_TIM_STATE_READY;
 8001928:	2301      	movs	r3, #1
 800192a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800192c:	2300      	movs	r3, #0
 800192e:	7023      	strb	r3, [r4, #0]
}
 8001930:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001932:	2a30      	cmp	r2, #48	@ 0x30
 8001934:	d1f8      	bne.n	8001928 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001936:	2070      	movs	r0, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8001938:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800193a:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800193c:	430a      	orrs	r2, r1
 800193e:	2107      	movs	r1, #7
 8001940:	e02d      	b.n	800199e <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8001942:	2a50      	cmp	r2, #80	@ 0x50
 8001944:	d1f0      	bne.n	8001928 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8001946:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001948:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800194a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800194c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800194e:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001950:	4387      	bics	r7, r0
 8001952:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001954:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001956:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001958:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800195a:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800195c:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 800195e:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001960:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001962:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8001964:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 8001966:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001968:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800196a:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800196c:	3a19      	subs	r2, #25
 800196e:	e016      	b.n	800199e <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8001970:	2680      	movs	r6, #128	@ 0x80
 8001972:	0176      	lsls	r6, r6, #5
 8001974:	42b2      	cmp	r2, r6
 8001976:	d014      	beq.n	80019a2 <HAL_TIM_ConfigClockSource+0xbe>
 8001978:	2680      	movs	r6, #128	@ 0x80
 800197a:	01b6      	lsls	r6, r6, #6
 800197c:	42b2      	cmp	r2, r6
 800197e:	d012      	beq.n	80019a6 <HAL_TIM_ConfigClockSource+0xc2>
 8001980:	2a70      	cmp	r2, #112	@ 0x70
 8001982:	d1d1      	bne.n	8001928 <HAL_TIM_ConfigClockSource+0x44>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001984:	6898      	ldr	r0, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001986:	4a26      	ldr	r2, [pc, #152]	@ (8001a20 <HAL_TIM_ConfigClockSource+0x13c>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001988:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198a:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800198c:	688a      	ldr	r2, [r1, #8]
 800198e:	68c9      	ldr	r1, [r1, #12]
 8001990:	4332      	orrs	r2, r6
 8001992:	0209      	lsls	r1, r1, #8
 8001994:	430a      	orrs	r2, r1
 8001996:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001998:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800199a:	2277      	movs	r2, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 800199c:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800199e:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 80019a0:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2000      	movs	r0, #0
 80019a4:	e7c0      	b.n	8001928 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80019a6:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019aa:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ac:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ae:	688a      	ldr	r2, [r1, #8]
 80019b0:	68c9      	ldr	r1, [r1, #12]
 80019b2:	4332      	orrs	r2, r6
 80019b4:	0209      	lsls	r1, r1, #8
 80019b6:	430a      	orrs	r2, r1
 80019b8:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80019ba:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019bc:	2280      	movs	r2, #128	@ 0x80
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	01d2      	lsls	r2, r2, #7
 80019c2:	e7ec      	b.n	800199e <HAL_TIM_ConfigClockSource+0xba>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019c4:	2610      	movs	r6, #16
 80019c6:	6a18      	ldr	r0, [r3, #32]
                               sClockSourceConfig->ClockPolarity,
 80019c8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ca:	43b0      	bics	r0, r6
                               sClockSourceConfig->ClockFilter);
 80019cc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ce:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019d0:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019d2:	4f14      	ldr	r7, [pc, #80]	@ (8001a24 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019d4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019d6:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019d8:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019da:	26a0      	movs	r6, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 80019dc:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019de:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019e0:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 80019e2:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80019e4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80019e6:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019e8:	2270      	movs	r2, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80019ea:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019ec:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019ee:	3a09      	subs	r2, #9
 80019f0:	e7d5      	b.n	800199e <HAL_TIM_ConfigClockSource+0xba>
                               sClockSourceConfig->ClockPolarity,
 80019f2:	684e      	ldr	r6, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80019f4:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80019f6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019f8:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019fa:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019fc:	4387      	bics	r7, r0
 80019fe:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a00:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001a02:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a04:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a06:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a08:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8001a0a:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a0c:	2270      	movs	r2, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a0e:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8001a10:	4331      	orrs	r1, r6
  TIMx->CCER = tmpccer;
 8001a12:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001a14:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a16:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a18:	3a29      	subs	r2, #41	@ 0x29
 8001a1a:	e7c0      	b.n	800199e <HAL_TIM_ConfigClockSource+0xba>
 8001a1c:	ffff0088 	.word	0xffff0088
 8001a20:	ffff00ff 	.word	0xffff00ff
 8001a24:	ffff0fff 	.word	0xffff0fff

08001a28 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001a28:	4770      	bx	lr

08001a2a <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001a2c:	4770      	bx	lr

08001a2e <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001a2e:	4770      	bx	lr

08001a30 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a30:	2202      	movs	r2, #2
 8001a32:	6803      	ldr	r3, [r0, #0]
{
 8001a34:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a36:	6919      	ldr	r1, [r3, #16]
{
 8001a38:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a3a:	4211      	tst	r1, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	4211      	tst	r1, r2
 8001a42:	d00a      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a44:	3a05      	subs	r2, #5
 8001a46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a48:	3204      	adds	r2, #4
 8001a4a:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	079b      	lsls	r3, r3, #30
 8001a50:	d05e      	beq.n	8001b10 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	f7ff ffea 	bl	8001a2a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	2300      	movs	r3, #0
 8001a58:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	4211      	tst	r1, r2
 8001a62:	d010      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a64:	68d9      	ldr	r1, [r3, #12]
 8001a66:	4211      	tst	r1, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a6a:	3a09      	subs	r2, #9
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6e:	3207      	adds	r2, #7
 8001a70:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	23c0      	movs	r3, #192	@ 0xc0
 8001a76:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001a78:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a7a:	421a      	tst	r2, r3
 8001a7c:	d04e      	beq.n	8001b1c <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	f7ff ffd4 	bl	8001a2a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a82:	2300      	movs	r3, #0
 8001a84:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a86:	2208      	movs	r2, #8
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	6919      	ldr	r1, [r3, #16]
 8001a8c:	4211      	tst	r1, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a90:	68d9      	ldr	r1, [r3, #12]
 8001a92:	4211      	tst	r1, r2
 8001a94:	d00b      	beq.n	8001aae <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a96:	3a11      	subs	r2, #17
 8001a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9a:	320d      	adds	r2, #13
 8001a9c:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a9e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa2:	079b      	lsls	r3, r3, #30
 8001aa4:	d040      	beq.n	8001b28 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	f7ff ffc0 	bl	8001a2a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aae:	2210      	movs	r2, #16
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	4211      	tst	r1, r2
 8001ab6:	d010      	beq.n	8001ada <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ab8:	68d9      	ldr	r1, [r3, #12]
 8001aba:	4211      	tst	r1, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001abe:	3a21      	subs	r2, #33	@ 0x21
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac2:	3219      	adds	r2, #25
 8001ac4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	23c0      	movs	r3, #192	@ 0xc0
 8001aca:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001acc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ace:	421a      	tst	r2, r3
 8001ad0:	d030      	beq.n	8001b34 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	f7ff ffaa 	bl	8001a2a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ada:	2201      	movs	r2, #1
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	4211      	tst	r1, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	4211      	tst	r1, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aea:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aec:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af0:	f7fe fe26 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001af4:	2240      	movs	r2, #64	@ 0x40
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	6919      	ldr	r1, [r3, #16]
 8001afa:	4211      	tst	r1, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001afe:	68d9      	ldr	r1, [r3, #12]
 8001b00:	4211      	tst	r1, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	3a81      	subs	r2, #129	@ 0x81
      HAL_TIM_TriggerCallback(htim);
 8001b06:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b08:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b0a:	f7ff ff90 	bl	8001a2e <HAL_TIM_TriggerCallback>
}
 8001b0e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b10:	f7ff ff8a 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	0020      	movs	r0, r4
 8001b16:	f7ff ff89 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001b1a:	e79c      	b.n	8001a56 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1c:	f7ff ff84 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	0020      	movs	r0, r4
 8001b22:	f7ff ff83 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001b26:	e7ac      	b.n	8001a82 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b28:	f7ff ff7e 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b2c:	0020      	movs	r0, r4
 8001b2e:	f7ff ff7d 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001b32:	e7ba      	b.n	8001aaa <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b34:	f7ff ff78 	bl	8001a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b38:	0020      	movs	r0, r4
 8001b3a:	f7ff ff77 	bl	8001a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001b3e:	e7ca      	b.n	8001ad6 <HAL_TIM_IRQHandler+0xa6>

08001b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b42:	0004      	movs	r4, r0
 8001b44:	2202      	movs	r2, #2
 8001b46:	3438      	adds	r4, #56	@ 0x38
 8001b48:	7825      	ldrb	r5, [r4, #0]
{
 8001b4a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	2d01      	cmp	r5, #1
 8001b50:	d01a      	beq.n	8001b88 <HAL_TIMEx_MasterConfigSynchronization+0x48>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b52:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b54:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001b56:	3539      	adds	r5, #57	@ 0x39
 8001b58:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001b5e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b60:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b62:	680e      	ldr	r6, [r1, #0]
 8001b64:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b66:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b68:	2080      	movs	r0, #128	@ 0x80
 8001b6a:	05c0      	lsls	r0, r0, #23
 8001b6c:	4283      	cmp	r3, r0
 8001b6e:	d002      	beq.n	8001b76 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8001b70:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8001b72:	4283      	cmp	r3, r0
 8001b74:	d104      	bne.n	8001b80 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b76:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b78:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b7a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b7c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001b82:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b84:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001b86:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	40010800 	.word	0x40010800

08001b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b90:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b92:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b96:	2201      	movs	r2, #1
 8001b98:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b9c:	6801      	ldr	r1, [r0, #0]
 8001b9e:	4d12      	ldr	r5, [pc, #72]	@ (8001be8 <UART_EndRxTransfer+0x58>)
 8001ba0:	680b      	ldr	r3, [r1, #0]
 8001ba2:	402b      	ands	r3, r5
 8001ba4:	600b      	str	r3, [r1, #0]
 8001ba6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001baa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bae:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb2:	6801      	ldr	r1, [r0, #0]
 8001bb4:	688b      	ldr	r3, [r1, #8]
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
 8001bba:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bbe:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10a      	bne.n	8001bda <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bc4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bcc:	2410      	movs	r4, #16
 8001bce:	6802      	ldr	r2, [r0, #0]
 8001bd0:	6813      	ldr	r3, [r2, #0]
 8001bd2:	43a3      	bics	r3, r4
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bda:	2220      	movs	r2, #32
 8001bdc:	1d03      	adds	r3, r0, #4
 8001bde:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001be0:	2300      	movs	r3, #0
 8001be2:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001be4:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8001be6:	bd30      	pop	{r4, r5, pc}
 8001be8:	fffffedf 	.word	0xfffffedf

08001bec <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8001bec:	4770      	bx	lr

08001bee <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8001bee:	4770      	bx	lr

08001bf0 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001bf0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	0002      	movs	r2, r0
{
 8001bf6:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001bf8:	325a      	adds	r2, #90	@ 0x5a
 8001bfa:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001bfc:	3a08      	subs	r2, #8
 8001bfe:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001c00:	f7ff fff5 	bl	8001bee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c04:	bd10      	pop	{r4, pc}

08001c06 <HAL_UARTEx_RxEventCallback>:
}
 8001c06:	4770      	bx	lr

08001c08 <HAL_UART_IRQHandler>:
{
 8001c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c0a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c0c:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c0e:	4bab      	ldr	r3, [pc, #684]	@ (8001ebc <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c10:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c12:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c14:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8001c16:	4219      	tst	r1, r3
 8001c18:	d10b      	bne.n	8001c32 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	4219      	tst	r1, r3
 8001c1e:	d100      	bne.n	8001c22 <HAL_UART_IRQHandler+0x1a>
 8001c20:	e080      	b.n	8001d24 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c22:	421e      	tst	r6, r3
 8001c24:	d100      	bne.n	8001c28 <HAL_UART_IRQHandler+0x20>
 8001c26:	e07d      	b.n	8001d24 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8001c28:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 8001c2a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d16f      	bne.n	8001d10 <HAL_UART_IRQHandler+0x108>
 8001c30:	e06f      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c32:	2301      	movs	r3, #1
 8001c34:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c36:	4aa2      	ldr	r2, [pc, #648]	@ (8001ec0 <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c38:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c3a:	4032      	ands	r2, r6
 8001c3c:	433a      	orrs	r2, r7
 8001c3e:	d100      	bne.n	8001c42 <HAL_UART_IRQHandler+0x3a>
 8001c40:	e070      	b.n	8001d24 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c42:	0025      	movs	r5, r4
 8001c44:	3508      	adds	r5, #8
 8001c46:	4219      	tst	r1, r3
 8001c48:	d005      	beq.n	8001c56 <HAL_UART_IRQHandler+0x4e>
 8001c4a:	05f2      	lsls	r2, r6, #23
 8001c4c:	d503      	bpl.n	8001c56 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c4e:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c50:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001c52:	4313      	orrs	r3, r2
 8001c54:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c56:	2302      	movs	r3, #2
 8001c58:	4219      	tst	r1, r3
 8001c5a:	d006      	beq.n	8001c6a <HAL_UART_IRQHandler+0x62>
 8001c5c:	2f00      	cmp	r7, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c60:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c62:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001c64:	18db      	adds	r3, r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	4219      	tst	r1, r3
 8001c6e:	d006      	beq.n	8001c7e <HAL_UART_IRQHandler+0x76>
 8001c70:	2f00      	cmp	r7, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c74:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c76:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001c78:	3b02      	subs	r3, #2
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c7e:	2308      	movs	r3, #8
 8001c80:	4219      	tst	r1, r3
 8001c82:	d007      	beq.n	8001c94 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c84:	2220      	movs	r2, #32
 8001c86:	4032      	ands	r2, r6
 8001c88:	433a      	orrs	r2, r7
 8001c8a:	d003      	beq.n	8001c94 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c8c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c8e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001c90:	4313      	orrs	r3, r2
 8001c92:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4219      	tst	r1, r3
 8001c9a:	d006      	beq.n	8001caa <HAL_UART_IRQHandler+0xa2>
 8001c9c:	0172      	lsls	r2, r6, #5
 8001c9e:	d504      	bpl.n	8001caa <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ca0:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001caa:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d030      	beq.n	8001d12 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	4219      	tst	r1, r3
 8001cb4:	d006      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cb6:	421e      	tst	r6, r3
 8001cb8:	d004      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8001cba:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cc4:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8001cc6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cc8:	2740      	movs	r7, #64	@ 0x40
 8001cca:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ccc:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cce:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001cd0:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8001cd2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cd4:	431e      	orrs	r6, r3
 8001cd6:	d021      	beq.n	8001d1c <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001cd8:	f7ff ff5a 	bl	8001b90 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	423b      	tst	r3, r7
 8001ce2:	d017      	beq.n	8001d14 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	43bb      	bics	r3, r7
 8001cf4:	6093      	str	r3, [r2, #8]
 8001cf6:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8001cfa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d009      	beq.n	8001d14 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d00:	4b70      	ldr	r3, [pc, #448]	@ (8001ec4 <HAL_UART_IRQHandler+0x2bc>)
 8001d02:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d04:	f7ff f81a 	bl	8000d3c <HAL_DMA_Abort_IT>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d0c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8001d0e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001d10:	4798      	blx	r3
}
 8001d12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001d14:	0020      	movs	r0, r4
 8001d16:	f7ff ff6a 	bl	8001bee <HAL_UART_ErrorCallback>
 8001d1a:	e7fa      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001d1c:	f7ff ff67 	bl	8001bee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d20:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8001d22:	e7f6      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d24:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d000      	beq.n	8001d2c <HAL_UART_IRQHandler+0x124>
 8001d2a:	e09a      	b.n	8001e62 <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4211      	tst	r1, r2
 8001d30:	d100      	bne.n	8001d34 <HAL_UART_IRQHandler+0x12c>
 8001d32:	e096      	b.n	8001e62 <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001d34:	4216      	tst	r6, r2
 8001d36:	d100      	bne.n	8001d3a <HAL_UART_IRQHandler+0x132>
 8001d38:	e093      	b.n	8001e62 <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001d3a:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d3c:	6881      	ldr	r1, [r0, #8]
 8001d3e:	2640      	movs	r6, #64	@ 0x40
 8001d40:	000f      	movs	r7, r1
 8001d42:	4037      	ands	r7, r6
 8001d44:	4231      	tst	r1, r6
 8001d46:	d053      	beq.n	8001df0 <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001d48:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8001d4a:	6808      	ldr	r0, [r1, #0]
 8001d4c:	6841      	ldr	r1, [r0, #4]
 8001d4e:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d0de      	beq.n	8001d12 <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001d54:	0025      	movs	r5, r4
 8001d56:	3558      	adds	r5, #88	@ 0x58
 8001d58:	882d      	ldrh	r5, [r5, #0]
 8001d5a:	428d      	cmp	r5, r1
 8001d5c:	d9d9      	bls.n	8001d12 <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8001d5e:	0025      	movs	r5, r4
 8001d60:	355a      	adds	r5, #90	@ 0x5a
 8001d62:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001d64:	6801      	ldr	r1, [r0, #0]
 8001d66:	2020      	movs	r0, #32
 8001d68:	000d      	movs	r5, r1
 8001d6a:	4005      	ands	r5, r0
 8001d6c:	9501      	str	r5, [sp, #4]
 8001d6e:	4201      	tst	r1, r0
 8001d70:	d130      	bne.n	8001dd4 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d72:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d76:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d7a:	6825      	ldr	r5, [r4, #0]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_UART_IRQHandler+0x2c0>)
 8001d7e:	6829      	ldr	r1, [r5, #0]
 8001d80:	4011      	ands	r1, r2
 8001d82:	6029      	str	r1, [r5, #0]
 8001d84:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d88:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d90:	6825      	ldr	r5, [r4, #0]
 8001d92:	68a9      	ldr	r1, [r5, #8]
 8001d94:	4399      	bics	r1, r3
 8001d96:	60a9      	str	r1, [r5, #8]
 8001d98:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d9c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da4:	0021      	movs	r1, r4
 8001da6:	c980      	ldmia	r1!, {r7}
 8001da8:	68bd      	ldr	r5, [r7, #8]
 8001daa:	43b5      	bics	r5, r6
 8001dac:	60bd      	str	r5, [r7, #8]
 8001dae:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db2:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8001db4:	67c8      	str	r0, [r1, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db6:	6622      	str	r2, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	6821      	ldr	r1, [r4, #0]
 8001dc4:	680b      	ldr	r3, [r1, #0]
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
 8001dca:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001dce:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8001dd0:	f7fe ff94 	bl	8000cfc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dd4:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dd6:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001dd8:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dda:	0023      	movs	r3, r4
 8001ddc:	3258      	adds	r2, #88	@ 0x58
 8001dde:	335a      	adds	r3, #90	@ 0x5a
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	8811      	ldrh	r1, [r2, #0]
 8001de4:	1ac9      	subs	r1, r1, r3
 8001de6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001de8:	0020      	movs	r0, r4
 8001dea:	f7ff ff0c 	bl	8001c06 <HAL_UARTEx_RxEventCallback>
 8001dee:	e790      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001df0:	0025      	movs	r5, r4
 8001df2:	0021      	movs	r1, r4
 8001df4:	355a      	adds	r5, #90	@ 0x5a
 8001df6:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8001df8:	882d      	ldrh	r5, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dfa:	3158      	adds	r1, #88	@ 0x58
 8001dfc:	8809      	ldrh	r1, [r1, #0]
 8001dfe:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8001e00:	2d00      	cmp	r5, #0
 8001e02:	d100      	bne.n	8001e06 <HAL_UART_IRQHandler+0x1fe>
 8001e04:	e785      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e06:	1a09      	subs	r1, r1, r0
 8001e08:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001e0a:	2900      	cmp	r1, #0
 8001e0c:	d100      	bne.n	8001e10 <HAL_UART_IRQHandler+0x208>
 8001e0e:	e780      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e10:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e14:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e18:	6825      	ldr	r5, [r4, #0]
 8001e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001ecc <HAL_UART_IRQHandler+0x2c4>)
 8001e1c:	6828      	ldr	r0, [r5, #0]
 8001e1e:	4010      	ands	r0, r2
 8001e20:	6028      	str	r0, [r5, #0]
 8001e22:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e26:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2e:	0020      	movs	r0, r4
 8001e30:	c840      	ldmia	r0!, {r6}
 8001e32:	68b5      	ldr	r5, [r6, #8]
 8001e34:	439d      	bics	r5, r3
 8001e36:	60b5      	str	r5, [r6, #8]
 8001e38:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8001e3c:	2520      	movs	r5, #32
 8001e3e:	67c5      	str	r5, [r0, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e40:	6627      	str	r7, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8001e42:	66a7      	str	r7, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e44:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e48:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	3232      	adds	r2, #50	@ 0x32
 8001e50:	6803      	ldr	r3, [r0, #0]
 8001e52:	32ff      	adds	r2, #255	@ 0xff
 8001e54:	4393      	bics	r3, r2
 8001e56:	6003      	str	r3, [r0, #0]
 8001e58:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	6663      	str	r3, [r4, #100]	@ 0x64
 8001e60:	e7c2      	b.n	8001de8 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	035b      	lsls	r3, r3, #13
 8001e66:	4219      	tst	r1, r3
 8001e68:	d006      	beq.n	8001e78 <HAL_UART_IRQHandler+0x270>
 8001e6a:	026d      	lsls	r5, r5, #9
 8001e6c:	d504      	bpl.n	8001e78 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001e6e:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001e70:	0020      	movs	r0, r4
 8001e72:	f000 fb35 	bl	80024e0 <HAL_UARTEx_WakeupCallback>
    return;
 8001e76:	e74c      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	4219      	tst	r1, r3
 8001e7c:	d003      	beq.n	8001e86 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e7e:	421e      	tst	r6, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 8001e82:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001e84:	e6d1      	b.n	8001c2a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e86:	2240      	movs	r2, #64	@ 0x40
 8001e88:	4211      	tst	r1, r2
 8001e8a:	d100      	bne.n	8001e8e <HAL_UART_IRQHandler+0x286>
 8001e8c:	e741      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
 8001e8e:	4216      	tst	r6, r2
 8001e90:	d100      	bne.n	8001e94 <HAL_UART_IRQHandler+0x28c>
 8001e92:	e73e      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e94:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e9e:	6821      	ldr	r1, [r4, #0]
 8001ea0:	680b      	ldr	r3, [r1, #0]
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]
 8001ea6:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001eae:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001eb0:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001eb2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 8001eb4:	f7ff fe9a 	bl	8001bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001eb8:	e72b      	b.n	8001d12 <HAL_UART_IRQHandler+0x10a>
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	0000080f 	.word	0x0000080f
 8001ec0:	04000120 	.word	0x04000120
 8001ec4:	08001bf1 	.word	0x08001bf1
 8001ec8:	fffffeff 	.word	0xfffffeff
 8001ecc:	fffffedf 	.word	0xfffffedf

08001ed0 <UART_SetConfig>:
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed4:	6925      	ldr	r5, [r4, #16]
 8001ed6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ed8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eda:	4329      	orrs	r1, r5
 8001edc:	6965      	ldr	r5, [r4, #20]
 8001ede:	69c3      	ldr	r3, [r0, #28]
 8001ee0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ee2:	6810      	ldr	r0, [r2, #0]
 8001ee4:	4d60      	ldr	r5, [pc, #384]	@ (8002068 <UART_SetConfig+0x198>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ee6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ee8:	4028      	ands	r0, r5
 8001eea:	4301      	orrs	r1, r0
 8001eec:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eee:	6851      	ldr	r1, [r2, #4]
 8001ef0:	485e      	ldr	r0, [pc, #376]	@ (800206c <UART_SetConfig+0x19c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001ef2:	4d5f      	ldr	r5, [pc, #380]	@ (8002070 <UART_SetConfig+0x1a0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef4:	4001      	ands	r1, r0
 8001ef6:	68e0      	ldr	r0, [r4, #12]
 8001ef8:	4301      	orrs	r1, r0
 8001efa:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001efc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001efe:	42aa      	cmp	r2, r5
 8001f00:	d001      	beq.n	8001f06 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8001f02:	6a21      	ldr	r1, [r4, #32]
 8001f04:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f06:	6891      	ldr	r1, [r2, #8]
 8001f08:	4e5a      	ldr	r6, [pc, #360]	@ (8002074 <UART_SetConfig+0x1a4>)
 8001f0a:	4031      	ands	r1, r6
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f10:	4959      	ldr	r1, [pc, #356]	@ (8002078 <UART_SetConfig+0x1a8>)
 8001f12:	428a      	cmp	r2, r1
 8001f14:	d116      	bne.n	8001f44 <UART_SetConfig+0x74>
 8001f16:	200c      	movs	r0, #12
 8001f18:	4958      	ldr	r1, [pc, #352]	@ (800207c <UART_SetConfig+0x1ac>)
 8001f1a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8001f1c:	4002      	ands	r2, r0
 8001f1e:	2a08      	cmp	r2, #8
 8001f20:	d100      	bne.n	8001f24 <UART_SetConfig+0x54>
 8001f22:	e08a      	b.n	800203a <UART_SetConfig+0x16a>
 8001f24:	d807      	bhi.n	8001f36 <UART_SetConfig+0x66>
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d100      	bne.n	8001f2c <UART_SetConfig+0x5c>
 8001f2a:	e07d      	b.n	8002028 <UART_SetConfig+0x158>
 8001f2c:	2a04      	cmp	r2, #4
 8001f2e:	d100      	bne.n	8001f32 <UART_SetConfig+0x62>
 8001f30:	e073      	b.n	800201a <UART_SetConfig+0x14a>
          pclk = (uint32_t) HSI_VALUE;
 8001f32:	2001      	movs	r0, #1
 8001f34:	e047      	b.n	8001fc6 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f36:	2a0c      	cmp	r2, #12
 8001f38:	d1fb      	bne.n	8001f32 <UART_SetConfig+0x62>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f3a:	2080      	movs	r0, #128	@ 0x80
 8001f3c:	0200      	lsls	r0, r0, #8
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	d049      	beq.n	8001fd6 <UART_SetConfig+0x106>
 8001f42:	e088      	b.n	8002056 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f44:	42aa      	cmp	r2, r5
 8001f46:	d1f4      	bne.n	8001f32 <UART_SetConfig+0x62>
 8001f48:	21c0      	movs	r1, #192	@ 0xc0
 8001f4a:	2080      	movs	r0, #128	@ 0x80
 8001f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800207c <UART_SetConfig+0x1ac>)
 8001f4e:	0109      	lsls	r1, r1, #4
 8001f50:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8001f52:	0100      	lsls	r0, r0, #4
 8001f54:	400b      	ands	r3, r1
 8001f56:	4283      	cmp	r3, r0
 8001f58:	d00e      	beq.n	8001f78 <UART_SetConfig+0xa8>
 8001f5a:	d808      	bhi.n	8001f6e <UART_SetConfig+0x9e>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d02d      	beq.n	8001fbc <UART_SetConfig+0xec>
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	00d2      	lsls	r2, r2, #3
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d1e4      	bne.n	8001f32 <UART_SetConfig+0x62>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f68:	f7ff f818 	bl	8000f9c <HAL_RCC_GetSysClockFreq>
        break;
 8001f6c:	e028      	b.n	8001fc0 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f6e:	428b      	cmp	r3, r1
 8001f70:	d1df      	bne.n	8001f32 <UART_SetConfig+0x62>
 8001f72:	2080      	movs	r0, #128	@ 0x80
 8001f74:	0200      	lsls	r0, r0, #8
 8001f76:	e006      	b.n	8001f86 <UART_SetConfig+0xb6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f78:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8001f7a:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <UART_SetConfig+0x1b0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f7c:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8001f7e:	17c0      	asrs	r0, r0, #31
 8001f80:	4018      	ands	r0, r3
 8001f82:	4b40      	ldr	r3, [pc, #256]	@ (8002084 <UART_SetConfig+0x1b4>)
 8001f84:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001f86:	2303      	movs	r3, #3
 8001f88:	6862      	ldr	r2, [r4, #4]
 8001f8a:	4353      	muls	r3, r2
 8001f8c:	4283      	cmp	r3, r0
 8001f8e:	d8d0      	bhi.n	8001f32 <UART_SetConfig+0x62>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001f90:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001f92:	4283      	cmp	r3, r0
 8001f94:	d3cd      	bcc.n	8001f32 <UART_SetConfig+0x62>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001f96:	2100      	movs	r1, #0
 8001f98:	0e07      	lsrs	r7, r0, #24
 8001f9a:	0206      	lsls	r6, r0, #8
 8001f9c:	0850      	lsrs	r0, r2, #1
 8001f9e:	1836      	adds	r6, r6, r0
 8001fa0:	414f      	adcs	r7, r1
 8001fa2:	000b      	movs	r3, r1
 8001fa4:	0030      	movs	r0, r6
 8001fa6:	0039      	movs	r1, r7
 8001fa8:	f7fe f93a 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001fac:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <UART_SetConfig+0x1b8>)
 8001fae:	18c2      	adds	r2, r0, r3
 8001fb0:	4b36      	ldr	r3, [pc, #216]	@ (800208c <UART_SetConfig+0x1bc>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d8bd      	bhi.n	8001f32 <UART_SetConfig+0x62>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	60d8      	str	r0, [r3, #12]
 8001fba:	e003      	b.n	8001fc4 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fbc:	f7ff fb54 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d1e0      	bne.n	8001f86 <UART_SetConfig+0xb6>
          pclk = (uint32_t) HSI_VALUE;
 8001fc4:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001fca:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fce:	f7ff fb4b 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001fd2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001fd4:	d0f6      	beq.n	8001fc4 <UART_SetConfig+0xf4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fd6:	6861      	ldr	r1, [r4, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	0848      	lsrs	r0, r1, #1
 8001fdc:	1818      	adds	r0, r3, r0
 8001fde:	f7fe f893 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <UART_SetConfig+0x1c0>)
 8001fe6:	3a10      	subs	r2, #16
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8a2      	bhi.n	8001f32 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fec:	230f      	movs	r3, #15
 8001fee:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ff0:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ff2:	439a      	bics	r2, r3
 8001ff4:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ff6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	4303      	orrs	r3, r0
 8001ffc:	60d3      	str	r3, [r2, #12]
 8001ffe:	e7e1      	b.n	8001fc4 <UART_SetConfig+0xf4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002000:	f7fe ffcc 	bl	8000f9c <HAL_RCC_GetSysClockFreq>
 8002004:	e7e5      	b.n	8001fd2 <UART_SetConfig+0x102>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002006:	680b      	ldr	r3, [r1, #0]
 8002008:	4013      	ands	r3, r2
          pclk = (uint32_t) HSI_VALUE;
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <UART_SetConfig+0x1b0>)
 8002010:	425b      	negs	r3, r3
 8002012:	4013      	ands	r3, r2
 8002014:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <UART_SetConfig+0x1b4>)
 8002016:	189b      	adds	r3, r3, r2
 8002018:	e7dd      	b.n	8001fd6 <UART_SetConfig+0x106>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	0212      	lsls	r2, r2, #8
 800201e:	4293      	cmp	r3, r2
 8002020:	d0ee      	beq.n	8002000 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetSysClockFreq();
 8002022:	f7fe ffbb 	bl	8000f9c <HAL_RCC_GetSysClockFreq>
        break;
 8002026:	e005      	b.n	8002034 <UART_SetConfig+0x164>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4293      	cmp	r3, r2
 800202e:	d0ce      	beq.n	8001fce <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002030:	f7ff fb1a 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002034:	2800      	cmp	r0, #0
 8002036:	d0c5      	beq.n	8001fc4 <UART_SetConfig+0xf4>
 8002038:	e00d      	b.n	8002056 <UART_SetConfig+0x186>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800203a:	2080      	movs	r0, #128	@ 0x80
 800203c:	2210      	movs	r2, #16
 800203e:	0200      	lsls	r0, r0, #8
 8002040:	4283      	cmp	r3, r0
 8002042:	d0e0      	beq.n	8002006 <UART_SetConfig+0x136>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002044:	6808      	ldr	r0, [r1, #0]
 8002046:	4010      	ands	r0, r2
          pclk = (uint32_t) HSI_VALUE;
 8002048:	1e43      	subs	r3, r0, #1
 800204a:	4198      	sbcs	r0, r3
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <UART_SetConfig+0x1b0>)
 800204e:	4240      	negs	r0, r0
 8002050:	4018      	ands	r0, r3
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <UART_SetConfig+0x1b4>)
 8002054:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002056:	6861      	ldr	r1, [r4, #4]
 8002058:	084b      	lsrs	r3, r1, #1
 800205a:	1818      	adds	r0, r3, r0
 800205c:	f7fe f854 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002060:	0002      	movs	r2, r0
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <UART_SetConfig+0x1c0>)
 8002064:	3a10      	subs	r2, #16
 8002066:	e7a4      	b.n	8001fb2 <UART_SetConfig+0xe2>
 8002068:	efff69f3 	.word	0xefff69f3
 800206c:	ffffcfff 	.word	0xffffcfff
 8002070:	40004800 	.word	0x40004800
 8002074:	fffff4ff 	.word	0xfffff4ff
 8002078:	40004400 	.word	0x40004400
 800207c:	40021000 	.word	0x40021000
 8002080:	ff48e500 	.word	0xff48e500
 8002084:	00f42400 	.word	0x00f42400
 8002088:	fffffd00 	.word	0xfffffd00
 800208c:	000ffcff 	.word	0x000ffcff
 8002090:	0000ffef 	.word	0x0000ffef

08002094 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002094:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002096:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002098:	07da      	lsls	r2, r3, #31
 800209a:	d506      	bpl.n	80020aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800209c:	6801      	ldr	r1, [r0, #0]
 800209e:	4c28      	ldr	r4, [pc, #160]	@ (8002140 <UART_AdvFeatureConfig+0xac>)
 80020a0:	684a      	ldr	r2, [r1, #4]
 80020a2:	4022      	ands	r2, r4
 80020a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80020a6:	4322      	orrs	r2, r4
 80020a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020aa:	079a      	lsls	r2, r3, #30
 80020ac:	d506      	bpl.n	80020bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020ae:	6801      	ldr	r1, [r0, #0]
 80020b0:	4c24      	ldr	r4, [pc, #144]	@ (8002144 <UART_AdvFeatureConfig+0xb0>)
 80020b2:	684a      	ldr	r2, [r1, #4]
 80020b4:	4022      	ands	r2, r4
 80020b6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80020b8:	4322      	orrs	r2, r4
 80020ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020bc:	075a      	lsls	r2, r3, #29
 80020be:	d506      	bpl.n	80020ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020c0:	6801      	ldr	r1, [r0, #0]
 80020c2:	4c21      	ldr	r4, [pc, #132]	@ (8002148 <UART_AdvFeatureConfig+0xb4>)
 80020c4:	684a      	ldr	r2, [r1, #4]
 80020c6:	4022      	ands	r2, r4
 80020c8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80020ca:	4322      	orrs	r2, r4
 80020cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020ce:	071a      	lsls	r2, r3, #28
 80020d0:	d506      	bpl.n	80020e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020d2:	6801      	ldr	r1, [r0, #0]
 80020d4:	4c1d      	ldr	r4, [pc, #116]	@ (800214c <UART_AdvFeatureConfig+0xb8>)
 80020d6:	684a      	ldr	r2, [r1, #4]
 80020d8:	4022      	ands	r2, r4
 80020da:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80020dc:	4322      	orrs	r2, r4
 80020de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020e0:	06da      	lsls	r2, r3, #27
 80020e2:	d506      	bpl.n	80020f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020e4:	6801      	ldr	r1, [r0, #0]
 80020e6:	4c1a      	ldr	r4, [pc, #104]	@ (8002150 <UART_AdvFeatureConfig+0xbc>)
 80020e8:	688a      	ldr	r2, [r1, #8]
 80020ea:	4022      	ands	r2, r4
 80020ec:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80020ee:	4322      	orrs	r2, r4
 80020f0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020f2:	069a      	lsls	r2, r3, #26
 80020f4:	d506      	bpl.n	8002104 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020f6:	6801      	ldr	r1, [r0, #0]
 80020f8:	4c16      	ldr	r4, [pc, #88]	@ (8002154 <UART_AdvFeatureConfig+0xc0>)
 80020fa:	688a      	ldr	r2, [r1, #8]
 80020fc:	4022      	ands	r2, r4
 80020fe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002100:	4322      	orrs	r2, r4
 8002102:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002104:	065a      	lsls	r2, r3, #25
 8002106:	d510      	bpl.n	800212a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002108:	6801      	ldr	r1, [r0, #0]
 800210a:	4d13      	ldr	r5, [pc, #76]	@ (8002158 <UART_AdvFeatureConfig+0xc4>)
 800210c:	684a      	ldr	r2, [r1, #4]
 800210e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002110:	402a      	ands	r2, r5
 8002112:	4322      	orrs	r2, r4
 8002114:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	0352      	lsls	r2, r2, #13
 800211a:	4294      	cmp	r4, r2
 800211c:	d105      	bne.n	800212a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800211e:	684a      	ldr	r2, [r1, #4]
 8002120:	4c0e      	ldr	r4, [pc, #56]	@ (800215c <UART_AdvFeatureConfig+0xc8>)
 8002122:	4022      	ands	r2, r4
 8002124:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002126:	4322      	orrs	r2, r4
 8002128:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	d506      	bpl.n	800213c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800212e:	6802      	ldr	r2, [r0, #0]
 8002130:	490b      	ldr	r1, [pc, #44]	@ (8002160 <UART_AdvFeatureConfig+0xcc>)
 8002132:	6853      	ldr	r3, [r2, #4]
 8002134:	400b      	ands	r3, r1
 8002136:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002138:	430b      	orrs	r3, r1
 800213a:	6053      	str	r3, [r2, #4]
}
 800213c:	bd30      	pop	{r4, r5, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	fffdffff 	.word	0xfffdffff
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	fffbffff 	.word	0xfffbffff
 800214c:	ffff7fff 	.word	0xffff7fff
 8002150:	ffffefff 	.word	0xffffefff
 8002154:	ffffdfff 	.word	0xffffdfff
 8002158:	ffefffff 	.word	0xffefffff
 800215c:	ff9fffff 	.word	0xff9fffff
 8002160:	fff7ffff 	.word	0xfff7ffff

08002164 <UART_WaitOnFlagUntilTimeout>:
{
 8002164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002166:	0004      	movs	r4, r0
 8002168:	000d      	movs	r5, r1
 800216a:	0017      	movs	r7, r2
 800216c:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	69d3      	ldr	r3, [r2, #28]
 8002172:	402b      	ands	r3, r5
 8002174:	1b5b      	subs	r3, r3, r5
 8002176:	4259      	negs	r1, r3
 8002178:	414b      	adcs	r3, r1
 800217a:	42bb      	cmp	r3, r7
 800217c:	d001      	beq.n	8002182 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800217e:	2000      	movs	r0, #0
 8002180:	e020      	b.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002182:	9b08      	ldr	r3, [sp, #32]
 8002184:	3301      	adds	r3, #1
 8002186:	d0f3      	beq.n	8002170 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002188:	f7fe fd0c 	bl	8000ba4 <HAL_GetTick>
 800218c:	9b00      	ldr	r3, [sp, #0]
 800218e:	1ac0      	subs	r0, r0, r3
 8002190:	9b08      	ldr	r3, [sp, #32]
 8002192:	4298      	cmp	r0, r3
 8002194:	d827      	bhi.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x82>
 8002196:	2b00      	cmp	r3, #0
 8002198:	d025      	beq.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	d5e5      	bpl.n	800216e <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	2608      	movs	r6, #8
 80021a6:	0011      	movs	r1, r2
 80021a8:	4031      	ands	r1, r6
 80021aa:	9101      	str	r1, [sp, #4]
 80021ac:	4232      	tst	r2, r6
 80021ae:	d00a      	beq.n	80021c6 <UART_WaitOnFlagUntilTimeout+0x62>
           UART_EndRxTransfer(huart);
 80021b0:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021b2:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80021b4:	f7ff fcec 	bl	8001b90 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021b8:	19a3      	adds	r3, r4, r6
 80021ba:	67de      	str	r6, [r3, #124]	@ 0x7c
           __HAL_UNLOCK(huart);
 80021bc:	2300      	movs	r3, #0
           return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80021c0:	3478      	adds	r4, #120	@ 0x78
 80021c2:	7023      	strb	r3, [r4, #0]
}
 80021c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	69d9      	ldr	r1, [r3, #28]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	4211      	tst	r1, r2
 80021ce:	d0ce      	beq.n	800216e <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021d0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80021d2:	0020      	movs	r0, r4
 80021d4:	f7ff fcdc 	bl	8001b90 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021d8:	0023      	movs	r3, r4
 80021da:	2220      	movs	r2, #32
 80021dc:	3308      	adds	r3, #8
 80021de:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	3478      	adds	r4, #120	@ 0x78
 80021e4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80021e6:	2003      	movs	r0, #3
 80021e8:	e7ec      	b.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x60>

080021ea <HAL_UART_Transmit>:
{
 80021ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ec:	b087      	sub	sp, #28
 80021ee:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80021f0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80021f2:	0004      	movs	r4, r0
 80021f4:	000d      	movs	r5, r1
 80021f6:	0017      	movs	r7, r2
    return HAL_BUSY;
 80021f8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d138      	bne.n	8002270 <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80021fe:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002200:	2900      	cmp	r1, #0
 8002202:	d035      	beq.n	8002270 <HAL_UART_Transmit+0x86>
 8002204:	2a00      	cmp	r2, #0
 8002206:	d033      	beq.n	8002270 <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	68a2      	ldr	r2, [r4, #8]
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	429a      	cmp	r2, r3
 8002210:	d104      	bne.n	800221c <HAL_UART_Transmit+0x32>
 8002212:	6923      	ldr	r3, [r4, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002218:	4201      	tst	r1, r0
 800221a:	d129      	bne.n	8002270 <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	0023      	movs	r3, r4
 800221e:	2600      	movs	r6, #0
 8002220:	3308      	adds	r3, #8
 8002222:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002224:	2321      	movs	r3, #33	@ 0x21
 8002226:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8002228:	f7fe fcbc 	bl	8000ba4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800222c:	0023      	movs	r3, r4
 800222e:	3350      	adds	r3, #80	@ 0x50
 8002230:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002232:	3302      	adds	r3, #2
 8002234:	9303      	str	r3, [sp, #12]
 8002236:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800223c:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	429a      	cmp	r2, r3
 8002242:	d104      	bne.n	800224e <HAL_UART_Transmit+0x64>
 8002244:	6923      	ldr	r3, [r4, #16]
 8002246:	42b3      	cmp	r3, r6
 8002248:	d101      	bne.n	800224e <HAL_UART_Transmit+0x64>
 800224a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800224c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800224e:	0023      	movs	r3, r4
 8002250:	3352      	adds	r3, #82	@ 0x52
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	9b05      	ldr	r3, [sp, #20]
 800225c:	2140      	movs	r1, #64	@ 0x40
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	0020      	movs	r0, r4
 8002262:	9b04      	ldr	r3, [sp, #16]
 8002264:	f7ff ff7e 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8002268:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800226a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800226c:	2800      	cmp	r0, #0
 800226e:	d10d      	bne.n	800228c <HAL_UART_Transmit+0xa2>
}
 8002270:	b007      	add	sp, #28
 8002272:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002274:	9b05      	ldr	r3, [sp, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	0020      	movs	r0, r4
 800227e:	9b04      	ldr	r3, [sp, #16]
 8002280:	f7ff ff70 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8002284:	2800      	cmp	r0, #0
 8002286:	d003      	beq.n	8002290 <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8002288:	2320      	movs	r3, #32
 800228a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800228c:	2003      	movs	r0, #3
 800228e:	e7ef      	b.n	8002270 <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002290:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002292:	2d00      	cmp	r5, #0
 8002294:	d10b      	bne.n	80022ae <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002296:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002298:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800229a:	05db      	lsls	r3, r3, #23
 800229c:	0ddb      	lsrs	r3, r3, #23
 800229e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80022a0:	9b03      	ldr	r3, [sp, #12]
 80022a2:	9a03      	ldr	r2, [sp, #12]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	8013      	strh	r3, [r2, #0]
 80022ac:	e7cf      	b.n	800224e <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ae:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80022b0:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b2:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 80022b4:	e7f4      	b.n	80022a0 <HAL_UART_Transmit+0xb6>
	...

080022b8 <HAL_UART_Receive>:
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	0015      	movs	r5, r2
 80022bc:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 80022be:	1d02      	adds	r2, r0, #4
{
 80022c0:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80022c2:	6fd3      	ldr	r3, [r2, #124]	@ 0x7c
{
 80022c4:	0004      	movs	r4, r0
 80022c6:	000f      	movs	r7, r1
    return HAL_BUSY;
 80022c8:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d161      	bne.n	8002392 <HAL_UART_Receive+0xda>
      return  HAL_ERROR;
 80022ce:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d05e      	beq.n	8002392 <HAL_UART_Receive+0xda>
 80022d4:	2d00      	cmp	r5, #0
 80022d6:	d05c      	beq.n	8002392 <HAL_UART_Receive+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	68a1      	ldr	r1, [r4, #8]
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	4299      	cmp	r1, r3
 80022e0:	d104      	bne.n	80022ec <HAL_UART_Receive+0x34>
 80022e2:	6923      	ldr	r3, [r4, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80022e8:	4207      	tst	r7, r0
 80022ea:	d152      	bne.n	8002392 <HAL_UART_Receive+0xda>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	0023      	movs	r3, r4
 80022ee:	2100      	movs	r1, #0
 80022f0:	3308      	adds	r3, #8
 80022f2:	67d9      	str	r1, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022f4:	2322      	movs	r3, #34	@ 0x22
 80022f6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f8:	6621      	str	r1, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 80022fa:	f7fe fc53 	bl	8000ba4 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80022fe:	0023      	movs	r3, r4
 8002300:	3358      	adds	r3, #88	@ 0x58
 8002302:	801d      	strh	r5, [r3, #0]
    huart->RxXferCount = Size;
 8002304:	3302      	adds	r3, #2
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	801d      	strh	r5, [r3, #0]
    UART_MASK_COMPUTATION(huart);
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800230e:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8002310:	015b      	lsls	r3, r3, #5
 8002312:	429a      	cmp	r2, r3
 8002314:	d112      	bne.n	800233c <HAL_UART_Receive+0x84>
 8002316:	6923      	ldr	r3, [r4, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d024      	beq.n	8002366 <HAL_UART_Receive+0xae>
    uhMask = huart->Mask;
 800231c:	26ff      	movs	r6, #255	@ 0xff
 800231e:	0033      	movs	r3, r6
      pdata16bits = NULL;
 8002320:	2500      	movs	r5, #0
    UART_MASK_COMPUTATION(huart);
 8002322:	0022      	movs	r2, r4
 8002324:	325c      	adds	r2, #92	@ 0x5c
      huart->RxXferCount--;
 8002326:	8013      	strh	r3, [r2, #0]
    while (huart->RxXferCount > 0U)
 8002328:	0023      	movs	r3, r4
 800232a:	335a      	adds	r3, #90	@ 0x5a
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b298      	uxth	r0, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d120      	bne.n	8002376 <HAL_UART_Receive+0xbe>
    huart->RxState = HAL_UART_STATE_READY;
 8002334:	3404      	adds	r4, #4
 8002336:	3320      	adds	r3, #32
 8002338:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800233a:	e02a      	b.n	8002392 <HAL_UART_Receive+0xda>
    UART_MASK_COMPUTATION(huart);
 800233c:	2a00      	cmp	r2, #0
 800233e:	d105      	bne.n	800234c <HAL_UART_Receive+0x94>
 8002340:	6925      	ldr	r5, [r4, #16]
 8002342:	23ff      	movs	r3, #255	@ 0xff
 8002344:	2d00      	cmp	r5, #0
 8002346:	d014      	beq.n	8002372 <HAL_UART_Receive+0xba>
 8002348:	237f      	movs	r3, #127	@ 0x7f
 800234a:	e00a      	b.n	8002362 <HAL_UART_Receive+0xaa>
 800234c:	2300      	movs	r3, #0
 800234e:	2180      	movs	r1, #128	@ 0x80
    uhMask = huart->Mask;
 8002350:	001e      	movs	r6, r3
      pdata16bits = NULL;
 8002352:	001d      	movs	r5, r3
    UART_MASK_COMPUTATION(huart);
 8002354:	0549      	lsls	r1, r1, #21
 8002356:	428a      	cmp	r2, r1
 8002358:	d1e3      	bne.n	8002322 <HAL_UART_Receive+0x6a>
 800235a:	6925      	ldr	r5, [r4, #16]
 800235c:	429d      	cmp	r5, r3
 800235e:	d007      	beq.n	8002370 <HAL_UART_Receive+0xb8>
 8002360:	333f      	adds	r3, #63	@ 0x3f
    uhMask = huart->Mask;
 8002362:	001e      	movs	r6, r3
 8002364:	e7dc      	b.n	8002320 <HAL_UART_Receive+0x68>
 8002366:	4e14      	ldr	r6, [pc, #80]	@ (80023b8 <HAL_UART_Receive+0x100>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	003d      	movs	r5, r7
 800236a:	0033      	movs	r3, r6
      pdata8bits  = NULL;
 800236c:	2700      	movs	r7, #0
 800236e:	e7d8      	b.n	8002322 <HAL_UART_Receive+0x6a>
 8002370:	237f      	movs	r3, #127	@ 0x7f
    uhMask = huart->Mask;
 8002372:	001e      	movs	r6, r3
 8002374:	e7d5      	b.n	8002322 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002376:	9b05      	ldr	r3, [sp, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2120      	movs	r1, #32
 800237e:	0020      	movs	r0, r4
 8002380:	9b04      	ldr	r3, [sp, #16]
 8002382:	f7ff feef 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 8002386:	2800      	cmp	r0, #0
 8002388:	d005      	beq.n	8002396 <HAL_UART_Receive+0xde>
        huart->RxState = HAL_UART_STATE_READY;
 800238a:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800238e:	3404      	adds	r4, #4
 8002390:	67e3      	str	r3, [r4, #124]	@ 0x7c
}
 8002392:	b007      	add	sp, #28
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 800239c:	2f00      	cmp	r7, #0
 800239e:	d107      	bne.n	80023b0 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80023a0:	802b      	strh	r3, [r5, #0]
        pdata16bits++;
 80023a2:	3502      	adds	r5, #2
      huart->RxXferCount--;
 80023a4:	9b03      	ldr	r3, [sp, #12]
 80023a6:	9a03      	ldr	r2, [sp, #12]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	e7ba      	b.n	8002326 <HAL_UART_Receive+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023b0:	703b      	strb	r3, [r7, #0]
        pdata8bits++;
 80023b2:	3701      	adds	r7, #1
 80023b4:	e7f6      	b.n	80023a4 <HAL_UART_Receive+0xec>
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	000001ff 	.word	0x000001ff

080023bc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	0003      	movs	r3, r0
{
 80023be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c0:	2500      	movs	r5, #0
{
 80023c2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	3308      	adds	r3, #8
 80023c6:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80023c8:	f7fe fbec 	bl	8000ba4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023cc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80023ce:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	071b      	lsls	r3, r3, #28
 80023d4:	d51d      	bpl.n	8002412 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <UART_CheckIdleState+0xb8>)
 80023da:	002a      	movs	r2, r5
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	0389      	lsls	r1, r1, #14
 80023e0:	0003      	movs	r3, r0
 80023e2:	0020      	movs	r0, r4
 80023e4:	f7ff febe 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 80023e8:	42a8      	cmp	r0, r5
 80023ea:	d012      	beq.n	8002412 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	2301      	movs	r3, #1
 80023f2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80023f6:	2080      	movs	r0, #128	@ 0x80
 80023f8:	6822      	ldr	r2, [r4, #0]
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	4383      	bics	r3, r0
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002404:	2320      	movs	r3, #32
 8002406:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002408:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800240a:	2300      	movs	r3, #0
 800240c:	3478      	adds	r4, #120	@ 0x78
 800240e:	7023      	strb	r3, [r4, #0]
}
 8002410:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002412:	0025      	movs	r5, r4
 8002414:	cd08      	ldmia	r5!, {r3}
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	075b      	lsls	r3, r3, #29
 800241a:	d523      	bpl.n	8002464 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <UART_CheckIdleState+0xb8>)
 8002420:	2200      	movs	r2, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	0020      	movs	r0, r4
 8002426:	0033      	movs	r3, r6
 8002428:	03c9      	lsls	r1, r1, #15
 800242a:	f7ff fe9b 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 800242e:	2800      	cmp	r0, #0
 8002430:	d018      	beq.n	8002464 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002436:	2201      	movs	r2, #1
 8002438:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800243c:	6821      	ldr	r1, [r4, #0]
 800243e:	4e0e      	ldr	r6, [pc, #56]	@ (8002478 <UART_CheckIdleState+0xbc>)
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	4033      	ands	r3, r6
 8002444:	600b      	str	r3, [r1, #0]
 8002446:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002452:	6821      	ldr	r1, [r4, #0]
 8002454:	688b      	ldr	r3, [r1, #8]
 8002456:	4393      	bics	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
 800245a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800245e:	2320      	movs	r3, #32
 8002460:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002462:	e7d1      	b.n	8002408 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002464:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002466:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002468:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800246a:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800246e:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002470:	e7cb      	b.n	800240a <UART_CheckIdleState+0x4e>
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	01ffffff 	.word	0x01ffffff
 8002478:	fffffedf 	.word	0xfffffedf

0800247c <HAL_UART_Init>:
{
 800247c:	b510      	push	{r4, lr}
 800247e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002480:	d101      	bne.n	8002486 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
}
 8002484:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002486:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800248c:	0002      	movs	r2, r0
 800248e:	3278      	adds	r2, #120	@ 0x78
 8002490:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002492:	f7fe faa5 	bl	80009e0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002496:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8002498:	2101      	movs	r1, #1
 800249a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800249c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800249e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80024a2:	438b      	bics	r3, r1
 80024a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a6:	f7ff fd13 	bl	8001ed0 <UART_SetConfig>
 80024aa:	2801      	cmp	r0, #1
 80024ac:	d0e9      	beq.n	8002482 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80024b4:	0020      	movs	r0, r4
 80024b6:	f7ff fded 	bl	8002094 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_UART_Init+0x60>)
 80024be:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80024c0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c4:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	438a      	bics	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80024ce:	2201      	movs	r2, #1
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80024d6:	f7ff ff71 	bl	80023bc <UART_CheckIdleState>
 80024da:	e7d3      	b.n	8002484 <HAL_UART_Init+0x8>
 80024dc:	ffffb7ff 	.word	0xffffb7ff

080024e0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80024e0:	4770      	bx	lr

080024e2 <memset>:
 80024e2:	0003      	movs	r3, r0
 80024e4:	1882      	adds	r2, r0, r2
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d100      	bne.n	80024ec <memset+0xa>
 80024ea:	4770      	bx	lr
 80024ec:	7019      	strb	r1, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	e7f9      	b.n	80024e6 <memset+0x4>
	...

080024f4 <__libc_init_array>:
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	2600      	movs	r6, #0
 80024f8:	4c0c      	ldr	r4, [pc, #48]	@ (800252c <__libc_init_array+0x38>)
 80024fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002530 <__libc_init_array+0x3c>)
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	42a6      	cmp	r6, r4
 8002502:	d109      	bne.n	8002518 <__libc_init_array+0x24>
 8002504:	2600      	movs	r6, #0
 8002506:	f000 f819 	bl	800253c <_init>
 800250a:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <__libc_init_array+0x40>)
 800250c:	4d0a      	ldr	r5, [pc, #40]	@ (8002538 <__libc_init_array+0x44>)
 800250e:	1b64      	subs	r4, r4, r5
 8002510:	10a4      	asrs	r4, r4, #2
 8002512:	42a6      	cmp	r6, r4
 8002514:	d105      	bne.n	8002522 <__libc_init_array+0x2e>
 8002516:	bd70      	pop	{r4, r5, r6, pc}
 8002518:	00b3      	lsls	r3, r6, #2
 800251a:	58eb      	ldr	r3, [r5, r3]
 800251c:	4798      	blx	r3
 800251e:	3601      	adds	r6, #1
 8002520:	e7ee      	b.n	8002500 <__libc_init_array+0xc>
 8002522:	00b3      	lsls	r3, r6, #2
 8002524:	58eb      	ldr	r3, [r5, r3]
 8002526:	4798      	blx	r3
 8002528:	3601      	adds	r6, #1
 800252a:	e7f2      	b.n	8002512 <__libc_init_array+0x1e>
 800252c:	08002580 	.word	0x08002580
 8002530:	08002580 	.word	0x08002580
 8002534:	08002584 	.word	0x08002584
 8002538:	08002580 	.word	0x08002580

0800253c <_init>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr

08002548 <_fini>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254e:	bc08      	pop	{r3}
 8002550:	469e      	mov	lr, r3
 8002552:	4770      	bx	lr
